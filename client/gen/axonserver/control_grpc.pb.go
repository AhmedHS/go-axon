// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: control.proto

package axonserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PlatformServiceClient is the client API for PlatformService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlatformServiceClient interface {
	// Obtains connection information for the Server that a Client should use for its connections.
	GetPlatformServer(ctx context.Context, in *ClientIdentification, opts ...grpc.CallOption) (*PlatformInfo, error)
	// Opens an instruction stream to the Platform, allowing AxonServer to provide management instructions to the application
	OpenStream(ctx context.Context, opts ...grpc.CallOption) (PlatformService_OpenStreamClient, error)
}

type platformServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlatformServiceClient(cc grpc.ClientConnInterface) PlatformServiceClient {
	return &platformServiceClient{cc}
}

func (c *platformServiceClient) GetPlatformServer(ctx context.Context, in *ClientIdentification, opts ...grpc.CallOption) (*PlatformInfo, error) {
	out := new(PlatformInfo)
	err := c.cc.Invoke(ctx, "/io.axoniq.axonserver.grpc.control.PlatformService/GetPlatformServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformServiceClient) OpenStream(ctx context.Context, opts ...grpc.CallOption) (PlatformService_OpenStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &PlatformService_ServiceDesc.Streams[0], "/io.axoniq.axonserver.grpc.control.PlatformService/OpenStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &platformServiceOpenStreamClient{stream}
	return x, nil
}

type PlatformService_OpenStreamClient interface {
	Send(*PlatformInboundInstruction) error
	Recv() (*PlatformOutboundInstruction, error)
	grpc.ClientStream
}

type platformServiceOpenStreamClient struct {
	grpc.ClientStream
}

func (x *platformServiceOpenStreamClient) Send(m *PlatformInboundInstruction) error {
	return x.ClientStream.SendMsg(m)
}

func (x *platformServiceOpenStreamClient) Recv() (*PlatformOutboundInstruction, error) {
	m := new(PlatformOutboundInstruction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PlatformServiceServer is the server API for PlatformService service.
// All implementations must embed UnimplementedPlatformServiceServer
// for forward compatibility
type PlatformServiceServer interface {
	// Obtains connection information for the Server that a Client should use for its connections.
	GetPlatformServer(context.Context, *ClientIdentification) (*PlatformInfo, error)
	// Opens an instruction stream to the Platform, allowing AxonServer to provide management instructions to the application
	OpenStream(PlatformService_OpenStreamServer) error
	mustEmbedUnimplementedPlatformServiceServer()
}

// UnimplementedPlatformServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlatformServiceServer struct {
}

func (UnimplementedPlatformServiceServer) GetPlatformServer(context.Context, *ClientIdentification) (*PlatformInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlatformServer not implemented")
}
func (UnimplementedPlatformServiceServer) OpenStream(PlatformService_OpenStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method OpenStream not implemented")
}
func (UnimplementedPlatformServiceServer) mustEmbedUnimplementedPlatformServiceServer() {}

// UnsafePlatformServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlatformServiceServer will
// result in compilation errors.
type UnsafePlatformServiceServer interface {
	mustEmbedUnimplementedPlatformServiceServer()
}

func RegisterPlatformServiceServer(s grpc.ServiceRegistrar, srv PlatformServiceServer) {
	s.RegisterService(&PlatformService_ServiceDesc, srv)
}

func _PlatformService_GetPlatformServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientIdentification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlatformServiceServer).GetPlatformServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.axoniq.axonserver.grpc.control.PlatformService/GetPlatformServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlatformServiceServer).GetPlatformServer(ctx, req.(*ClientIdentification))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlatformService_OpenStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PlatformServiceServer).OpenStream(&platformServiceOpenStreamServer{stream})
}

type PlatformService_OpenStreamServer interface {
	Send(*PlatformOutboundInstruction) error
	Recv() (*PlatformInboundInstruction, error)
	grpc.ServerStream
}

type platformServiceOpenStreamServer struct {
	grpc.ServerStream
}

func (x *platformServiceOpenStreamServer) Send(m *PlatformOutboundInstruction) error {
	return x.ServerStream.SendMsg(m)
}

func (x *platformServiceOpenStreamServer) Recv() (*PlatformInboundInstruction, error) {
	m := new(PlatformInboundInstruction)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PlatformService_ServiceDesc is the grpc.ServiceDesc for PlatformService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlatformService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.axoniq.axonserver.grpc.control.PlatformService",
	HandlerType: (*PlatformServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlatformServer",
			Handler:    _PlatformService_GetPlatformServer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpenStream",
			Handler:       _PlatformService_OpenStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "control.proto",
}
