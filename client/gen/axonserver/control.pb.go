// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: control.proto

package axonserver

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// An instruction from Application Node to the AxonServer platform
type PlatformInboundInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The actual instruction to send
	// Types that are assignable to Request:
	//
	//	*PlatformInboundInstruction_Register
	//	*PlatformInboundInstruction_EventProcessorInfo
	//	*PlatformInboundInstruction_Heartbeat
	//	*PlatformInboundInstruction_Ack
	//	*PlatformInboundInstruction_Result
	Request isPlatformInboundInstruction_Request `protobuf_oneof:"request"`
	// Instruction identifier. If this identifier is set, this instruction will be acknowledged via outbound stream
	InstructionId string `protobuf:"bytes,5,opt,name=instruction_id,json=instructionId,proto3" json:"instruction_id,omitempty"`
}

func (x *PlatformInboundInstruction) Reset() {
	*x = PlatformInboundInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatformInboundInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformInboundInstruction) ProtoMessage() {}

func (x *PlatformInboundInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformInboundInstruction.ProtoReflect.Descriptor instead.
func (*PlatformInboundInstruction) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{0}
}

func (m *PlatformInboundInstruction) GetRequest() isPlatformInboundInstruction_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *PlatformInboundInstruction) GetRegister() *ClientIdentification {
	if x, ok := x.GetRequest().(*PlatformInboundInstruction_Register); ok {
		return x.Register
	}
	return nil
}

func (x *PlatformInboundInstruction) GetEventProcessorInfo() *EventProcessorInfo {
	if x, ok := x.GetRequest().(*PlatformInboundInstruction_EventProcessorInfo); ok {
		return x.EventProcessorInfo
	}
	return nil
}

func (x *PlatformInboundInstruction) GetHeartbeat() *Heartbeat {
	if x, ok := x.GetRequest().(*PlatformInboundInstruction_Heartbeat); ok {
		return x.Heartbeat
	}
	return nil
}

func (x *PlatformInboundInstruction) GetAck() *InstructionAck {
	if x, ok := x.GetRequest().(*PlatformInboundInstruction_Ack); ok {
		return x.Ack
	}
	return nil
}

func (x *PlatformInboundInstruction) GetResult() *InstructionResult {
	if x, ok := x.GetRequest().(*PlatformInboundInstruction_Result); ok {
		return x.Result
	}
	return nil
}

func (x *PlatformInboundInstruction) GetInstructionId() string {
	if x != nil {
		return x.InstructionId
	}
	return ""
}

type isPlatformInboundInstruction_Request interface {
	isPlatformInboundInstruction_Request()
}

type PlatformInboundInstruction_Register struct {
	// Information about the client being connected.
	// This information is used by AxonServer to monitor the topology of connected applications.
	Register *ClientIdentification `protobuf:"bytes,1,opt,name=register,proto3,oneof"`
}

type PlatformInboundInstruction_EventProcessorInfo struct {
	// Information about Processors defined in the application.
	// This information is used by Axon Server to monitor the progress of Event Processors across instances.
	EventProcessorInfo *EventProcessorInfo `protobuf:"bytes,2,opt,name=event_processor_info,json=eventProcessorInfo,proto3,oneof"`
}

type PlatformInboundInstruction_Heartbeat struct {
	// This heartbeat is used by AxonServer in order to check if the connection is still alive
	Heartbeat *Heartbeat `protobuf:"bytes,3,opt,name=heartbeat,proto3,oneof"`
}

type PlatformInboundInstruction_Ack struct {
	// Acknowledgement of previously sent instruction via outbound stream
	Ack *InstructionAck `protobuf:"bytes,4,opt,name=ack,proto3,oneof"`
}

type PlatformInboundInstruction_Result struct {
	// The result of the execution of an instruction
	Result *InstructionResult `protobuf:"bytes,6,opt,name=result,proto3,oneof"`
}

func (*PlatformInboundInstruction_Register) isPlatformInboundInstruction_Request() {}

func (*PlatformInboundInstruction_EventProcessorInfo) isPlatformInboundInstruction_Request() {}

func (*PlatformInboundInstruction_Heartbeat) isPlatformInboundInstruction_Request() {}

func (*PlatformInboundInstruction_Ack) isPlatformInboundInstruction_Request() {}

func (*PlatformInboundInstruction_Result) isPlatformInboundInstruction_Request() {}

// An instruction or information from the AxonServer Platform to the Application Node
type PlatformOutboundInstruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The actual instruction or information
	// Types that are assignable to Request:
	//
	//	*PlatformOutboundInstruction_NodeNotification
	//	*PlatformOutboundInstruction_RequestReconnect
	//	*PlatformOutboundInstruction_PauseEventProcessor
	//	*PlatformOutboundInstruction_StartEventProcessor
	//	*PlatformOutboundInstruction_ReleaseSegment
	//	*PlatformOutboundInstruction_RequestEventProcessorInfo
	//	*PlatformOutboundInstruction_SplitEventProcessorSegment
	//	*PlatformOutboundInstruction_MergeEventProcessorSegment
	//	*PlatformOutboundInstruction_Heartbeat
	//	*PlatformOutboundInstruction_Ack
	Request isPlatformOutboundInstruction_Request `protobuf_oneof:"request"`
	// Instruction identifier. If this identifier is set, this instruction will be acknowledged via inbound stream
	InstructionId string `protobuf:"bytes,12,opt,name=instruction_id,json=instructionId,proto3" json:"instruction_id,omitempty"`
}

func (x *PlatformOutboundInstruction) Reset() {
	*x = PlatformOutboundInstruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatformOutboundInstruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformOutboundInstruction) ProtoMessage() {}

func (x *PlatformOutboundInstruction) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformOutboundInstruction.ProtoReflect.Descriptor instead.
func (*PlatformOutboundInstruction) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{1}
}

func (m *PlatformOutboundInstruction) GetRequest() isPlatformOutboundInstruction_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *PlatformOutboundInstruction) GetNodeNotification() *NodeInfo {
	if x, ok := x.GetRequest().(*PlatformOutboundInstruction_NodeNotification); ok {
		return x.NodeNotification
	}
	return nil
}

func (x *PlatformOutboundInstruction) GetRequestReconnect() *RequestReconnect {
	if x, ok := x.GetRequest().(*PlatformOutboundInstruction_RequestReconnect); ok {
		return x.RequestReconnect
	}
	return nil
}

func (x *PlatformOutboundInstruction) GetPauseEventProcessor() *EventProcessorReference {
	if x, ok := x.GetRequest().(*PlatformOutboundInstruction_PauseEventProcessor); ok {
		return x.PauseEventProcessor
	}
	return nil
}

func (x *PlatformOutboundInstruction) GetStartEventProcessor() *EventProcessorReference {
	if x, ok := x.GetRequest().(*PlatformOutboundInstruction_StartEventProcessor); ok {
		return x.StartEventProcessor
	}
	return nil
}

func (x *PlatformOutboundInstruction) GetReleaseSegment() *EventProcessorSegmentReference {
	if x, ok := x.GetRequest().(*PlatformOutboundInstruction_ReleaseSegment); ok {
		return x.ReleaseSegment
	}
	return nil
}

func (x *PlatformOutboundInstruction) GetRequestEventProcessorInfo() *EventProcessorReference {
	if x, ok := x.GetRequest().(*PlatformOutboundInstruction_RequestEventProcessorInfo); ok {
		return x.RequestEventProcessorInfo
	}
	return nil
}

func (x *PlatformOutboundInstruction) GetSplitEventProcessorSegment() *EventProcessorSegmentReference {
	if x, ok := x.GetRequest().(*PlatformOutboundInstruction_SplitEventProcessorSegment); ok {
		return x.SplitEventProcessorSegment
	}
	return nil
}

func (x *PlatformOutboundInstruction) GetMergeEventProcessorSegment() *EventProcessorSegmentReference {
	if x, ok := x.GetRequest().(*PlatformOutboundInstruction_MergeEventProcessorSegment); ok {
		return x.MergeEventProcessorSegment
	}
	return nil
}

func (x *PlatformOutboundInstruction) GetHeartbeat() *Heartbeat {
	if x, ok := x.GetRequest().(*PlatformOutboundInstruction_Heartbeat); ok {
		return x.Heartbeat
	}
	return nil
}

func (x *PlatformOutboundInstruction) GetAck() *InstructionAck {
	if x, ok := x.GetRequest().(*PlatformOutboundInstruction_Ack); ok {
		return x.Ack
	}
	return nil
}

func (x *PlatformOutboundInstruction) GetInstructionId() string {
	if x != nil {
		return x.InstructionId
	}
	return ""
}

type isPlatformOutboundInstruction_Request interface {
	isPlatformOutboundInstruction_Request()
}

type PlatformOutboundInstruction_NodeNotification struct {
	// Information provided by AxonServer which provides information about the AxonServer node the application is connected with
	NodeNotification *NodeInfo `protobuf:"bytes,1,opt,name=node_notification,json=nodeNotification,proto3,oneof"`
}

type PlatformOutboundInstruction_RequestReconnect struct {
	// A request from AxonServer to the Application to migrate its connection to another node.
	// Clients SHOULD honor this request by closing their current connection, and using the GetPlatformServer RPC
	// to request a new destination.
	RequestReconnect *RequestReconnect `protobuf:"bytes,3,opt,name=request_reconnect,json=requestReconnect,proto3,oneof"`
}

type PlatformOutboundInstruction_PauseEventProcessor struct {
	// Instruction from AxonServer to Pause a Streaming Event Processor.
	PauseEventProcessor *EventProcessorReference `protobuf:"bytes,4,opt,name=pause_event_processor,json=pauseEventProcessor,proto3,oneof"`
}

type PlatformOutboundInstruction_StartEventProcessor struct {
	// Instruction from AxonServer to Start a Streaming Event Processor.
	StartEventProcessor *EventProcessorReference `protobuf:"bytes,5,opt,name=start_event_processor,json=startEventProcessor,proto3,oneof"`
}

type PlatformOutboundInstruction_ReleaseSegment struct {
	// Instruction from AxonServer to Release a specific segment in a Streaming Event Processor
	ReleaseSegment *EventProcessorSegmentReference `protobuf:"bytes,6,opt,name=release_segment,json=releaseSegment,proto3,oneof"`
}

type PlatformOutboundInstruction_RequestEventProcessorInfo struct {
	// A request from AxonServer for status information of a specific Streaming Event Processor
	RequestEventProcessorInfo *EventProcessorReference `protobuf:"bytes,7,opt,name=request_event_processor_info,json=requestEventProcessorInfo,proto3,oneof"`
}

type PlatformOutboundInstruction_SplitEventProcessorSegment struct {
	// Instruction to split a Segment in a Streaming Event Processor
	SplitEventProcessorSegment *EventProcessorSegmentReference `protobuf:"bytes,8,opt,name=split_event_processor_segment,json=splitEventProcessorSegment,proto3,oneof"`
}

type PlatformOutboundInstruction_MergeEventProcessorSegment struct {
	// Instruction to merge two Segments in a Streaming Event Processor
	MergeEventProcessorSegment *EventProcessorSegmentReference `protobuf:"bytes,9,opt,name=merge_event_processor_segment,json=mergeEventProcessorSegment,proto3,oneof"`
}

type PlatformOutboundInstruction_Heartbeat struct {
	// This heartbeat is used by AxonFramework in order to check if the connection is still alive
	Heartbeat *Heartbeat `protobuf:"bytes,10,opt,name=heartbeat,proto3,oneof"`
}

type PlatformOutboundInstruction_Ack struct {
	// Acknowledgement of previously sent instruction via inbound stream
	Ack *InstructionAck `protobuf:"bytes,11,opt,name=ack,proto3,oneof"`
}

func (*PlatformOutboundInstruction_NodeNotification) isPlatformOutboundInstruction_Request() {}

func (*PlatformOutboundInstruction_RequestReconnect) isPlatformOutboundInstruction_Request() {}

func (*PlatformOutboundInstruction_PauseEventProcessor) isPlatformOutboundInstruction_Request() {}

func (*PlatformOutboundInstruction_StartEventProcessor) isPlatformOutboundInstruction_Request() {}

func (*PlatformOutboundInstruction_ReleaseSegment) isPlatformOutboundInstruction_Request() {}

func (*PlatformOutboundInstruction_RequestEventProcessorInfo) isPlatformOutboundInstruction_Request() {
}

func (*PlatformOutboundInstruction_SplitEventProcessorSegment) isPlatformOutboundInstruction_Request() {
}

func (*PlatformOutboundInstruction_MergeEventProcessorSegment) isPlatformOutboundInstruction_Request() {
}

func (*PlatformOutboundInstruction_Heartbeat) isPlatformOutboundInstruction_Request() {}

func (*PlatformOutboundInstruction_Ack) isPlatformOutboundInstruction_Request() {}

// Message send when AxonServer requests the client to re-establish its connection with the Platform
type RequestReconnect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestReconnect) Reset() {
	*x = RequestReconnect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestReconnect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestReconnect) ProtoMessage() {}

func (x *RequestReconnect) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestReconnect.ProtoReflect.Descriptor instead.
func (*RequestReconnect) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{2}
}

// Message containing connection information of the node to Connect with
type PlatformInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The connection details of the node the client should connect with
	Primary *NodeInfo `protobuf:"bytes,1,opt,name=primary,proto3" json:"primary,omitempty"`
	// Flag indicating that the connection may be reused to connect. When true, the client _may_ reuse the connection
	// established for the GetPlatformServer request for subsequent requests.
	SameConnection bool `protobuf:"varint,2,opt,name=same_connection,json=sameConnection,proto3" json:"same_connection,omitempty"`
}

func (x *PlatformInfo) Reset() {
	*x = PlatformInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatformInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformInfo) ProtoMessage() {}

func (x *PlatformInfo) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformInfo.ProtoReflect.Descriptor instead.
func (*PlatformInfo) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{3}
}

func (x *PlatformInfo) GetPrimary() *NodeInfo {
	if x != nil {
		return x.Primary
	}
	return nil
}

func (x *PlatformInfo) GetSameConnection() bool {
	if x != nil {
		return x.SameConnection
	}
	return false
}

// Message containing connection information for an AxonServer Node
type NodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The host name to use when connecting to this node
	HostName string `protobuf:"bytes,1,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	// The port number for gRPC connections
	GrpcPort int32 `protobuf:"varint,2,opt,name=grpc_port,json=grpcPort,proto3" json:"grpc_port,omitempty"`
	// The port number for HTTP connections
	HttpPort int32 `protobuf:"varint,3,opt,name=http_port,json=httpPort,proto3" json:"http_port,omitempty"`
	// The version identifier of the API
	Version int32 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	// The unique name of the node to connect with, for purpose of debugging
	NodeName string `protobuf:"bytes,5,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
}

func (x *NodeInfo) Reset() {
	*x = NodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo) ProtoMessage() {}

func (x *NodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo.ProtoReflect.Descriptor instead.
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{4}
}

func (x *NodeInfo) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *NodeInfo) GetGrpcPort() int32 {
	if x != nil {
		return x.GrpcPort
	}
	return 0
}

func (x *NodeInfo) GetHttpPort() int32 {
	if x != nil {
		return x.HttpPort
	}
	return 0
}

func (x *NodeInfo) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *NodeInfo) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

// Message containing details about the Client Application
type ClientIdentification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique identifier for this client instance. Is used to distinguish different instances of the same component
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// The name of the component. Several instances of the same component should share this name
	ComponentName string `protobuf:"bytes,2,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
	// Any tags associated with the client, which may provide hints and preferences for setting up connections
	Tags map[string]string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Axon framework version used by the client application instance
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ClientIdentification) Reset() {
	*x = ClientIdentification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientIdentification) ProtoMessage() {}

func (x *ClientIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientIdentification.ProtoReflect.Descriptor instead.
func (*ClientIdentification) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{5}
}

func (x *ClientIdentification) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ClientIdentification) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

func (x *ClientIdentification) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ClientIdentification) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Message containing information about the status of an Event Processor
type EventProcessorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The logical name of this processor.
	ProcessorName string `protobuf:"bytes,1,opt,name=processor_name,json=processorName,proto3" json:"processor_name,omitempty"`
	// The mode in which this processor is reading Events, for example: 'Tracking' or 'Subscribing'
	Mode string `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
	// The number of threads currently actively processing Events
	ActiveThreads int32 `protobuf:"varint,3,opt,name=active_threads,json=activeThreads,proto3" json:"active_threads,omitempty"`
	// Flag indicating whether the processor is running
	Running bool `protobuf:"varint,4,opt,name=running,proto3" json:"running,omitempty"`
	// Flag indicating whether the processor, when stopped, did so because of an irrecoverable Error
	Error bool `protobuf:"varint,5,opt,name=error,proto3" json:"error,omitempty"`
	// Status details of each of the Segments for which Events are being processed. This is only provided by Streaming
	// Event Processors.
	SegmentStatus []*EventProcessorInfo_SegmentStatus `protobuf:"bytes,6,rep,name=segment_status,json=segmentStatus,proto3" json:"segment_status,omitempty"`
	// The number of threads the processor has available to assign to Segments.
	// Will report 0 if all threads are assigned a Segment.
	AvailableThreads int32 `protobuf:"varint,7,opt,name=available_threads,json=availableThreads,proto3" json:"available_threads,omitempty"`
	// The Token Store Identifier if available. This is only provided by Streaming Event Processors.
	TokenStoreIdentifier string `protobuf:"bytes,8,opt,name=token_store_identifier,json=tokenStoreIdentifier,proto3" json:"token_store_identifier,omitempty"`
	// Flag indicating whether the processor is a Streaming Event Processor.
	// This dictates whether streaming operations, like split and merge, are supported by this processor.
	IsStreamingProcessor bool `protobuf:"varint,9,opt,name=is_streaming_processor,json=isStreamingProcessor,proto3" json:"is_streaming_processor,omitempty"`
	// current load balancing strategy name for the event processor
	LoadBalancingStrategyName string `protobuf:"bytes,10,opt,name=load_balancing_strategy_name,json=loadBalancingStrategyName,proto3" json:"load_balancing_strategy_name,omitempty"`
}

func (x *EventProcessorInfo) Reset() {
	*x = EventProcessorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventProcessorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventProcessorInfo) ProtoMessage() {}

func (x *EventProcessorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventProcessorInfo.ProtoReflect.Descriptor instead.
func (*EventProcessorInfo) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{6}
}

func (x *EventProcessorInfo) GetProcessorName() string {
	if x != nil {
		return x.ProcessorName
	}
	return ""
}

func (x *EventProcessorInfo) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *EventProcessorInfo) GetActiveThreads() int32 {
	if x != nil {
		return x.ActiveThreads
	}
	return 0
}

func (x *EventProcessorInfo) GetRunning() bool {
	if x != nil {
		return x.Running
	}
	return false
}

func (x *EventProcessorInfo) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *EventProcessorInfo) GetSegmentStatus() []*EventProcessorInfo_SegmentStatus {
	if x != nil {
		return x.SegmentStatus
	}
	return nil
}

func (x *EventProcessorInfo) GetAvailableThreads() int32 {
	if x != nil {
		return x.AvailableThreads
	}
	return 0
}

func (x *EventProcessorInfo) GetTokenStoreIdentifier() string {
	if x != nil {
		return x.TokenStoreIdentifier
	}
	return ""
}

func (x *EventProcessorInfo) GetIsStreamingProcessor() bool {
	if x != nil {
		return x.IsStreamingProcessor
	}
	return false
}

func (x *EventProcessorInfo) GetLoadBalancingStrategyName() string {
	if x != nil {
		return x.LoadBalancingStrategyName
	}
	return ""
}

// Message providing reference to an Event Processor
type EventProcessorReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the Event Processor
	ProcessorName string `protobuf:"bytes,1,opt,name=processor_name,json=processorName,proto3" json:"processor_name,omitempty"`
}

func (x *EventProcessorReference) Reset() {
	*x = EventProcessorReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventProcessorReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventProcessorReference) ProtoMessage() {}

func (x *EventProcessorReference) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventProcessorReference.ProtoReflect.Descriptor instead.
func (*EventProcessorReference) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{7}
}

func (x *EventProcessorReference) GetProcessorName() string {
	if x != nil {
		return x.ProcessorName
	}
	return ""
}

// Message providing reference to a Segment of an Event Processor
type EventProcessorSegmentReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the Event Processor
	ProcessorName string `protobuf:"bytes,1,opt,name=processor_name,json=processorName,proto3" json:"processor_name,omitempty"`
	// The identifier of the Segment
	SegmentIdentifier int32 `protobuf:"varint,2,opt,name=segment_identifier,json=segmentIdentifier,proto3" json:"segment_identifier,omitempty"`
}

func (x *EventProcessorSegmentReference) Reset() {
	*x = EventProcessorSegmentReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventProcessorSegmentReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventProcessorSegmentReference) ProtoMessage() {}

func (x *EventProcessorSegmentReference) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventProcessorSegmentReference.ProtoReflect.Descriptor instead.
func (*EventProcessorSegmentReference) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{8}
}

func (x *EventProcessorSegmentReference) GetProcessorName() string {
	if x != nil {
		return x.ProcessorName
	}
	return ""
}

func (x *EventProcessorSegmentReference) GetSegmentIdentifier() int32 {
	if x != nil {
		return x.SegmentIdentifier
	}
	return 0
}

type Heartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Heartbeat) Reset() {
	*x = Heartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartbeat) ProtoMessage() {}

func (x *Heartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartbeat.ProtoReflect.Descriptor instead.
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{9}
}

// Message containing information about the status of a Segment of a Streaming Event Processor
type EventProcessorInfo_SegmentStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the Segment for which the status is reported
	SegmentId int32 `protobuf:"varint,1,opt,name=segment_id,json=segmentId,proto3" json:"segment_id,omitempty"`
	// Indicates whether the Segment has "Caught Up" with the Head of the Event Stream
	CaughtUp bool `protobuf:"varint,2,opt,name=caught_up,json=caughtUp,proto3" json:"caught_up,omitempty"`
	// Indicates whether the Segment is "Replaying" historic events after a Reset.
	Replaying bool `protobuf:"varint,3,opt,name=replaying,proto3" json:"replaying,omitempty"`
	// The fraction this segment processes. A fraction of 2 means 1/2, 4 means 1/4, etc.
	OnePartOf int32 `protobuf:"varint,4,opt,name=one_part_of,json=onePartOf,proto3" json:"one_part_of,omitempty"`
	// The approximate position of the token in the stream.
	TokenPosition int64 `protobuf:"varint,5,opt,name=token_position,json=tokenPosition,proto3" json:"token_position,omitempty"`
	// Information about the error state of the Segment, if applicable.
	ErrorState string `protobuf:"bytes,6,opt,name=error_state,json=errorState,proto3" json:"error_state,omitempty"`
}

func (x *EventProcessorInfo_SegmentStatus) Reset() {
	*x = EventProcessorInfo_SegmentStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventProcessorInfo_SegmentStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventProcessorInfo_SegmentStatus) ProtoMessage() {}

func (x *EventProcessorInfo_SegmentStatus) ProtoReflect() protoreflect.Message {
	mi := &file_control_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventProcessorInfo_SegmentStatus.ProtoReflect.Descriptor instead.
func (*EventProcessorInfo_SegmentStatus) Descriptor() ([]byte, []int) {
	return file_control_proto_rawDescGZIP(), []int{6, 0}
}

func (x *EventProcessorInfo_SegmentStatus) GetSegmentId() int32 {
	if x != nil {
		return x.SegmentId
	}
	return 0
}

func (x *EventProcessorInfo_SegmentStatus) GetCaughtUp() bool {
	if x != nil {
		return x.CaughtUp
	}
	return false
}

func (x *EventProcessorInfo_SegmentStatus) GetReplaying() bool {
	if x != nil {
		return x.Replaying
	}
	return false
}

func (x *EventProcessorInfo_SegmentStatus) GetOnePartOf() int32 {
	if x != nil {
		return x.OnePartOf
	}
	return 0
}

func (x *EventProcessorInfo_SegmentStatus) GetTokenPosition() int64 {
	if x != nil {
		return x.TokenPosition
	}
	return 0
}

func (x *EventProcessorInfo_SegmentStatus) GetErrorState() string {
	if x != nil {
		return x.ErrorState
	}
	return ""
}

var File_control_proto protoreflect.FileDescriptor

var file_control_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x21, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xe5, 0x03, 0x0a, 0x1a, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x55, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78,
	0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x69, 0x0a, 0x14, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71,
	0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x12, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x4c, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71,
	0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x48, 0x00, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12,
	0x3d, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x46,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x09, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xff, 0x08, 0x0a, 0x1b, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a, 0x0a, 0x11, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e,
	0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x48, 0x00, 0x52, 0x10, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x70, 0x0a, 0x15, 0x70, 0x61, 0x75, 0x73,
	0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f,
	0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x13, 0x70, 0x61, 0x75, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x70, 0x0a, 0x15, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x69, 0x6f, 0x2e, 0x61,
	0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x13, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x6c, 0x0a, 0x0f,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69,
	0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x7d, 0x0a, 0x1c, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f,
	0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x19,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x86, 0x01, 0x0a, 0x1d, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78,
	0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x86, 0x01, 0x0a, 0x1d, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x1a, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x09, 0x68,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x48, 0x00, 0x52, 0x09,
	0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x3d, 0x0a, 0x03, 0x61, 0x63, 0x6b,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e,
	0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x6b, 0x48, 0x00, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42,
	0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x12, 0x0a, 0x10, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x22, 0x7e,
	0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x45,
	0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x73, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x98,
	0x01, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x68, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x70, 0x63,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x72, 0x70,
	0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x84, 0x02, 0x0a, 0x14, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71,
	0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x61,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xc0, 0x05, 0x0a, 0x12, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x6a, 0x0a, 0x0e, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x43, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78,
	0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x3f,
	0x0a, 0x1c, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x1a,
	0xd1, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x75, 0x67, 0x68, 0x74, 0x5f, 0x75, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x75, 0x67, 0x68, 0x74, 0x55, 0x70, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0b, 0x6f,
	0x6e, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6f, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x12, 0x25, 0x0a, 0x0e, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x22, 0x40, 0x0a, 0x17, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x76, 0x0a, 0x1e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x0b, 0x0a,
	0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x32, 0xa6, 0x02, 0x0a, 0x0f, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7f,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e,
	0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x2f, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12,
	0x91, 0x01, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x3d,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x6e, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3e, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x28,
	0x01, 0x30, 0x01, 0x42, 0x19, 0x50, 0x01, 0x5a, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_control_proto_rawDescOnce sync.Once
	file_control_proto_rawDescData = file_control_proto_rawDesc
)

func file_control_proto_rawDescGZIP() []byte {
	file_control_proto_rawDescOnce.Do(func() {
		file_control_proto_rawDescData = protoimpl.X.CompressGZIP(file_control_proto_rawDescData)
	})
	return file_control_proto_rawDescData
}

var file_control_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_control_proto_goTypes = []interface{}{
	(*PlatformInboundInstruction)(nil),       // 0: io.axoniq.axonserver.grpc.control.PlatformInboundInstruction
	(*PlatformOutboundInstruction)(nil),      // 1: io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction
	(*RequestReconnect)(nil),                 // 2: io.axoniq.axonserver.grpc.control.RequestReconnect
	(*PlatformInfo)(nil),                     // 3: io.axoniq.axonserver.grpc.control.PlatformInfo
	(*NodeInfo)(nil),                         // 4: io.axoniq.axonserver.grpc.control.NodeInfo
	(*ClientIdentification)(nil),             // 5: io.axoniq.axonserver.grpc.control.ClientIdentification
	(*EventProcessorInfo)(nil),               // 6: io.axoniq.axonserver.grpc.control.EventProcessorInfo
	(*EventProcessorReference)(nil),          // 7: io.axoniq.axonserver.grpc.control.EventProcessorReference
	(*EventProcessorSegmentReference)(nil),   // 8: io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference
	(*Heartbeat)(nil),                        // 9: io.axoniq.axonserver.grpc.control.Heartbeat
	nil,                                      // 10: io.axoniq.axonserver.grpc.control.ClientIdentification.TagsEntry
	(*EventProcessorInfo_SegmentStatus)(nil), // 11: io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus
	(*InstructionAck)(nil),                   // 12: io.axoniq.axonserver.grpc.InstructionAck
	(*InstructionResult)(nil),                // 13: io.axoniq.axonserver.grpc.InstructionResult
}
var file_control_proto_depIdxs = []int32{
	5,  // 0: io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.register:type_name -> io.axoniq.axonserver.grpc.control.ClientIdentification
	6,  // 1: io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.event_processor_info:type_name -> io.axoniq.axonserver.grpc.control.EventProcessorInfo
	9,  // 2: io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.heartbeat:type_name -> io.axoniq.axonserver.grpc.control.Heartbeat
	12, // 3: io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.ack:type_name -> io.axoniq.axonserver.grpc.InstructionAck
	13, // 4: io.axoniq.axonserver.grpc.control.PlatformInboundInstruction.result:type_name -> io.axoniq.axonserver.grpc.InstructionResult
	4,  // 5: io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.node_notification:type_name -> io.axoniq.axonserver.grpc.control.NodeInfo
	2,  // 6: io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.request_reconnect:type_name -> io.axoniq.axonserver.grpc.control.RequestReconnect
	7,  // 7: io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.pause_event_processor:type_name -> io.axoniq.axonserver.grpc.control.EventProcessorReference
	7,  // 8: io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.start_event_processor:type_name -> io.axoniq.axonserver.grpc.control.EventProcessorReference
	8,  // 9: io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.release_segment:type_name -> io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference
	7,  // 10: io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.request_event_processor_info:type_name -> io.axoniq.axonserver.grpc.control.EventProcessorReference
	8,  // 11: io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.split_event_processor_segment:type_name -> io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference
	8,  // 12: io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.merge_event_processor_segment:type_name -> io.axoniq.axonserver.grpc.control.EventProcessorSegmentReference
	9,  // 13: io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.heartbeat:type_name -> io.axoniq.axonserver.grpc.control.Heartbeat
	12, // 14: io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction.ack:type_name -> io.axoniq.axonserver.grpc.InstructionAck
	4,  // 15: io.axoniq.axonserver.grpc.control.PlatformInfo.primary:type_name -> io.axoniq.axonserver.grpc.control.NodeInfo
	10, // 16: io.axoniq.axonserver.grpc.control.ClientIdentification.tags:type_name -> io.axoniq.axonserver.grpc.control.ClientIdentification.TagsEntry
	11, // 17: io.axoniq.axonserver.grpc.control.EventProcessorInfo.segment_status:type_name -> io.axoniq.axonserver.grpc.control.EventProcessorInfo.SegmentStatus
	5,  // 18: io.axoniq.axonserver.grpc.control.PlatformService.GetPlatformServer:input_type -> io.axoniq.axonserver.grpc.control.ClientIdentification
	0,  // 19: io.axoniq.axonserver.grpc.control.PlatformService.OpenStream:input_type -> io.axoniq.axonserver.grpc.control.PlatformInboundInstruction
	3,  // 20: io.axoniq.axonserver.grpc.control.PlatformService.GetPlatformServer:output_type -> io.axoniq.axonserver.grpc.control.PlatformInfo
	1,  // 21: io.axoniq.axonserver.grpc.control.PlatformService.OpenStream:output_type -> io.axoniq.axonserver.grpc.control.PlatformOutboundInstruction
	20, // [20:22] is the sub-list for method output_type
	18, // [18:20] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_control_proto_init() }
func file_control_proto_init() {
	if File_control_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_control_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatformInboundInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatformOutboundInstruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestReconnect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatformInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientIdentification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventProcessorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventProcessorReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventProcessorSegmentReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Heartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventProcessorInfo_SegmentStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_control_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*PlatformInboundInstruction_Register)(nil),
		(*PlatformInboundInstruction_EventProcessorInfo)(nil),
		(*PlatformInboundInstruction_Heartbeat)(nil),
		(*PlatformInboundInstruction_Ack)(nil),
		(*PlatformInboundInstruction_Result)(nil),
	}
	file_control_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*PlatformOutboundInstruction_NodeNotification)(nil),
		(*PlatformOutboundInstruction_RequestReconnect)(nil),
		(*PlatformOutboundInstruction_PauseEventProcessor)(nil),
		(*PlatformOutboundInstruction_StartEventProcessor)(nil),
		(*PlatformOutboundInstruction_ReleaseSegment)(nil),
		(*PlatformOutboundInstruction_RequestEventProcessorInfo)(nil),
		(*PlatformOutboundInstruction_SplitEventProcessorSegment)(nil),
		(*PlatformOutboundInstruction_MergeEventProcessorSegment)(nil),
		(*PlatformOutboundInstruction_Heartbeat)(nil),
		(*PlatformOutboundInstruction_Ack)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_control_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_control_proto_goTypes,
		DependencyIndexes: file_control_proto_depIdxs,
		MessageInfos:      file_control_proto_msgTypes,
	}.Build()
	File_control_proto = out.File
	file_control_proto_rawDesc = nil
	file_control_proto_goTypes = nil
	file_control_proto_depIdxs = nil
}
