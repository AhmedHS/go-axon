// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: query.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Message containing Query related instructions for Axon Server
type QueryProviderOutbound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The actual instruction to send
	// Types that are assignable to Request:
	//
	//	*QueryProviderOutbound_Subscribe
	//	*QueryProviderOutbound_Unsubscribe
	//	*QueryProviderOutbound_FlowControl
	//	*QueryProviderOutbound_QueryResponse
	//	*QueryProviderOutbound_QueryComplete
	//	*QueryProviderOutbound_SubscriptionQueryResponse
	//	*QueryProviderOutbound_Ack
	Request isQueryProviderOutbound_Request `protobuf_oneof:"request"`
	// Instruction identifier. If this identifier is set, this instruction will be acknowledged via inbound stream
	InstructionId string `protobuf:"bytes,8,opt,name=instruction_id,json=instructionId,proto3" json:"instruction_id,omitempty"`
}

func (x *QueryProviderOutbound) Reset() {
	*x = QueryProviderOutbound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProviderOutbound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProviderOutbound) ProtoMessage() {}

func (x *QueryProviderOutbound) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProviderOutbound.ProtoReflect.Descriptor instead.
func (*QueryProviderOutbound) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{0}
}

func (m *QueryProviderOutbound) GetRequest() isQueryProviderOutbound_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *QueryProviderOutbound) GetSubscribe() *QuerySubscription {
	if x, ok := x.GetRequest().(*QueryProviderOutbound_Subscribe); ok {
		return x.Subscribe
	}
	return nil
}

func (x *QueryProviderOutbound) GetUnsubscribe() *QuerySubscription {
	if x, ok := x.GetRequest().(*QueryProviderOutbound_Unsubscribe); ok {
		return x.Unsubscribe
	}
	return nil
}

func (x *QueryProviderOutbound) GetFlowControl() *FlowControl {
	if x, ok := x.GetRequest().(*QueryProviderOutbound_FlowControl); ok {
		return x.FlowControl
	}
	return nil
}

func (x *QueryProviderOutbound) GetQueryResponse() *QueryResponse {
	if x, ok := x.GetRequest().(*QueryProviderOutbound_QueryResponse); ok {
		return x.QueryResponse
	}
	return nil
}

func (x *QueryProviderOutbound) GetQueryComplete() *QueryComplete {
	if x, ok := x.GetRequest().(*QueryProviderOutbound_QueryComplete); ok {
		return x.QueryComplete
	}
	return nil
}

func (x *QueryProviderOutbound) GetSubscriptionQueryResponse() *SubscriptionQueryResponse {
	if x, ok := x.GetRequest().(*QueryProviderOutbound_SubscriptionQueryResponse); ok {
		return x.SubscriptionQueryResponse
	}
	return nil
}

func (x *QueryProviderOutbound) GetAck() *InstructionAck {
	if x, ok := x.GetRequest().(*QueryProviderOutbound_Ack); ok {
		return x.Ack
	}
	return nil
}

func (x *QueryProviderOutbound) GetInstructionId() string {
	if x != nil {
		return x.InstructionId
	}
	return ""
}

type isQueryProviderOutbound_Request interface {
	isQueryProviderOutbound_Request()
}

type QueryProviderOutbound_Subscribe struct {
	// Registers a Query Handler with AxonServer
	Subscribe *QuerySubscription `protobuf:"bytes,1,opt,name=subscribe,proto3,oneof"`
}

type QueryProviderOutbound_Unsubscribe struct {
	// Unregisters a Query Handler with AxonServer
	Unsubscribe *QuerySubscription `protobuf:"bytes,2,opt,name=unsubscribe,proto3,oneof"`
}

type QueryProviderOutbound_FlowControl struct {
	// Grant permits to AxonServer to send a number of messages to the client
	FlowControl *FlowControl `protobuf:"bytes,3,opt,name=flow_control,json=flowControl,proto3,oneof"`
}

type QueryProviderOutbound_QueryResponse struct {
	// Sends a Response to a Query received via the inbound stream
	QueryResponse *QueryResponse `protobuf:"bytes,4,opt,name=query_response,json=queryResponse,proto3,oneof"`
}

type QueryProviderOutbound_QueryComplete struct {
	// Indicator that all responses for Query have been sent
	QueryComplete *QueryComplete `protobuf:"bytes,5,opt,name=query_complete,json=queryComplete,proto3,oneof"`
}

type QueryProviderOutbound_SubscriptionQueryResponse struct {
	// Sends a response for a Subscription Query that has been received via the inbound stream
	SubscriptionQueryResponse *SubscriptionQueryResponse `protobuf:"bytes,6,opt,name=subscription_query_response,json=subscriptionQueryResponse,proto3,oneof"`
}

type QueryProviderOutbound_Ack struct {
	// Acknowledgement of previously sent instruction via inbound stream
	Ack *InstructionAck `protobuf:"bytes,7,opt,name=ack,proto3,oneof"`
}

func (*QueryProviderOutbound_Subscribe) isQueryProviderOutbound_Request() {}

func (*QueryProviderOutbound_Unsubscribe) isQueryProviderOutbound_Request() {}

func (*QueryProviderOutbound_FlowControl) isQueryProviderOutbound_Request() {}

func (*QueryProviderOutbound_QueryResponse) isQueryProviderOutbound_Request() {}

func (*QueryProviderOutbound_QueryComplete) isQueryProviderOutbound_Request() {}

func (*QueryProviderOutbound_SubscriptionQueryResponse) isQueryProviderOutbound_Request() {}

func (*QueryProviderOutbound_Ack) isQueryProviderOutbound_Request() {}

// Queries or Query related instructions from AxonServer for the connected application
type QueryProviderInbound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The actual query or instruction
	// Types that are assignable to Request:
	//
	//	*QueryProviderInbound_Ack
	//	*QueryProviderInbound_Query
	//	*QueryProviderInbound_SubscriptionQueryRequest
	//	*QueryProviderInbound_QueryCancel
	//	*QueryProviderInbound_QueryFlowControl
	Request isQueryProviderInbound_Request `protobuf_oneof:"request"`
	// Instruction identifier. If this identifier is set, this instruction will be acknowledged via outbound stream
	InstructionId string `protobuf:"bytes,4,opt,name=instruction_id,json=instructionId,proto3" json:"instruction_id,omitempty"`
}

func (x *QueryProviderInbound) Reset() {
	*x = QueryProviderInbound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryProviderInbound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryProviderInbound) ProtoMessage() {}

func (x *QueryProviderInbound) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryProviderInbound.ProtoReflect.Descriptor instead.
func (*QueryProviderInbound) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{1}
}

func (m *QueryProviderInbound) GetRequest() isQueryProviderInbound_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *QueryProviderInbound) GetAck() *InstructionAck {
	if x, ok := x.GetRequest().(*QueryProviderInbound_Ack); ok {
		return x.Ack
	}
	return nil
}

func (x *QueryProviderInbound) GetQuery() *QueryRequest {
	if x, ok := x.GetRequest().(*QueryProviderInbound_Query); ok {
		return x.Query
	}
	return nil
}

func (x *QueryProviderInbound) GetSubscriptionQueryRequest() *SubscriptionQueryRequest {
	if x, ok := x.GetRequest().(*QueryProviderInbound_SubscriptionQueryRequest); ok {
		return x.SubscriptionQueryRequest
	}
	return nil
}

func (x *QueryProviderInbound) GetQueryCancel() *QueryReference {
	if x, ok := x.GetRequest().(*QueryProviderInbound_QueryCancel); ok {
		return x.QueryCancel
	}
	return nil
}

func (x *QueryProviderInbound) GetQueryFlowControl() *QueryFlowControl {
	if x, ok := x.GetRequest().(*QueryProviderInbound_QueryFlowControl); ok {
		return x.QueryFlowControl
	}
	return nil
}

func (x *QueryProviderInbound) GetInstructionId() string {
	if x != nil {
		return x.InstructionId
	}
	return ""
}

type isQueryProviderInbound_Request interface {
	isQueryProviderInbound_Request()
}

type QueryProviderInbound_Ack struct {
	// Acknowledgement of previously sent instruction via outbound stream
	Ack *InstructionAck `protobuf:"bytes,1,opt,name=ack,proto3,oneof"`
}

type QueryProviderInbound_Query struct {
	// Represents an incoming Query, for which this component is expected to provide a response
	Query *QueryRequest `protobuf:"bytes,2,opt,name=query,proto3,oneof"`
}

type QueryProviderInbound_SubscriptionQueryRequest struct {
	// Represents an incoming Subscription Query, for which this component is expected to provide a response and updates
	SubscriptionQueryRequest *SubscriptionQueryRequest `protobuf:"bytes,3,opt,name=subscription_query_request,json=subscriptionQueryRequest,proto3,oneof"`
}

type QueryProviderInbound_QueryCancel struct {
	// Indicator that receiver is no more interested in updates of this query
	QueryCancel *QueryReference `protobuf:"bytes,5,opt,name=query_cancel,json=queryCancel,proto3,oneof"`
}

type QueryProviderInbound_QueryFlowControl struct {
	// Indicator that receiver should send more updates of this query
	QueryFlowControl *QueryFlowControl `protobuf:"bytes,6,opt,name=query_flow_control,json=queryFlowControl,proto3,oneof"`
}

func (*QueryProviderInbound_Ack) isQueryProviderInbound_Request() {}

func (*QueryProviderInbound_Query) isQueryProviderInbound_Request() {}

func (*QueryProviderInbound_SubscriptionQueryRequest) isQueryProviderInbound_Request() {}

func (*QueryProviderInbound_QueryCancel) isQueryProviderInbound_Request() {}

func (*QueryProviderInbound_QueryFlowControl) isQueryProviderInbound_Request() {}

type QueryReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the query request.
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *QueryReference) Reset() {
	*x = QueryReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryReference) ProtoMessage() {}

func (x *QueryReference) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryReference.ProtoReflect.Descriptor instead.
func (*QueryReference) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{2}
}

func (x *QueryReference) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// Message indicating that query has been completed.
type QueryComplete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique identifier for this message
	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// The identifier of the incoming query to complete
	RequestId string `protobuf:"bytes,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *QueryComplete) Reset() {
	*x = QueryComplete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryComplete) ProtoMessage() {}

func (x *QueryComplete) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryComplete.ProtoReflect.Descriptor instead.
func (*QueryComplete) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{3}
}

func (x *QueryComplete) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *QueryComplete) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

// Message indicating that consumer is requesting more messages from producer.
type QueryFlowControl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the incoming query to complete
	QueryReference *QueryReference `protobuf:"bytes,1,opt,name=query_reference,json=queryReference,proto3" json:"query_reference,omitempty"`
	// Number of messages requested
	Permits int64 `protobuf:"varint,2,opt,name=permits,proto3" json:"permits,omitempty"`
}

func (x *QueryFlowControl) Reset() {
	*x = QueryFlowControl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryFlowControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryFlowControl) ProtoMessage() {}

func (x *QueryFlowControl) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryFlowControl.ProtoReflect.Descriptor instead.
func (*QueryFlowControl) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{4}
}

func (x *QueryFlowControl) GetQueryReference() *QueryReference {
	if x != nil {
		return x.QueryReference
	}
	return nil
}

func (x *QueryFlowControl) GetPermits() int64 {
	if x != nil {
		return x.Permits
	}
	return 0
}

// Message representing an incoming Query
type QueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The message ID of the incoming Query
	MessageIdentifier string `protobuf:"bytes,1,opt,name=message_identifier,json=messageIdentifier,proto3" json:"message_identifier,omitempty"`
	// The name of the Query to execute
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// The timestamp of the Query creation
	Timestamp int64 `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// A payload accompanying the Query
	Payload *SerializedObject `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	// Meta Data providing contextual information of the Query
	MetaData map[string]*MetaDataValue `protobuf:"bytes,5,rep,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// An object describing the expectations of the Response Type
	ResponseType *SerializedObject `protobuf:"bytes,6,opt,name=response_type,json=responseType,proto3" json:"response_type,omitempty"`
	// Any instructions for components Routing or Handling the Query
	ProcessingInstructions []*ProcessingInstruction `protobuf:"bytes,7,rep,name=processing_instructions,json=processingInstructions,proto3" json:"processing_instructions,omitempty"`
	// The unique identifier of the client instance dispatching the query
	ClientId string `protobuf:"bytes,8,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// The Name of the Component dispatching the query
	ComponentName string `protobuf:"bytes,9,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{5}
}

func (x *QueryRequest) GetMessageIdentifier() string {
	if x != nil {
		return x.MessageIdentifier
	}
	return ""
}

func (x *QueryRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *QueryRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *QueryRequest) GetPayload() *SerializedObject {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *QueryRequest) GetMetaData() map[string]*MetaDataValue {
	if x != nil {
		return x.MetaData
	}
	return nil
}

func (x *QueryRequest) GetResponseType() *SerializedObject {
	if x != nil {
		return x.ResponseType
	}
	return nil
}

func (x *QueryRequest) GetProcessingInstructions() []*ProcessingInstruction {
	if x != nil {
		return x.ProcessingInstructions
	}
	return nil
}

func (x *QueryRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *QueryRequest) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

// Message that represents the Response to a Query
type QueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the Response Message
	MessageIdentifier string `protobuf:"bytes,1,opt,name=message_identifier,json=messageIdentifier,proto3" json:"message_identifier,omitempty"`
	// An Error Code identifying the type of error, if any
	ErrorCode string `protobuf:"bytes,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// A detailed description of the error, if any
	ErrorMessage *ErrorMessage `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// The Payload of the Response Message
	Payload *SerializedObject `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	// Any Meta Data describing the context of the Response Message
	MetaData map[string]*MetaDataValue `protobuf:"bytes,5,rep,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Any instructions for components Routing or Handling the Response Message
	ProcessingInstructions []*ProcessingInstruction `protobuf:"bytes,6,rep,name=processing_instructions,json=processingInstructions,proto3" json:"processing_instructions,omitempty"`
	// The unique identifier of the Query to which this is a response
	RequestIdentifier string `protobuf:"bytes,7,opt,name=request_identifier,json=requestIdentifier,proto3" json:"request_identifier,omitempty"`
}

func (x *QueryResponse) Reset() {
	*x = QueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryResponse) ProtoMessage() {}

func (x *QueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryResponse.ProtoReflect.Descriptor instead.
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{6}
}

func (x *QueryResponse) GetMessageIdentifier() string {
	if x != nil {
		return x.MessageIdentifier
	}
	return ""
}

func (x *QueryResponse) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *QueryResponse) GetErrorMessage() *ErrorMessage {
	if x != nil {
		return x.ErrorMessage
	}
	return nil
}

func (x *QueryResponse) GetPayload() *SerializedObject {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *QueryResponse) GetMetaData() map[string]*MetaDataValue {
	if x != nil {
		return x.MetaData
	}
	return nil
}

func (x *QueryResponse) GetProcessingInstructions() []*ProcessingInstruction {
	if x != nil {
		return x.ProcessingInstructions
	}
	return nil
}

func (x *QueryResponse) GetRequestIdentifier() string {
	if x != nil {
		return x.RequestIdentifier
	}
	return ""
}

// Message that represents a Subscription Query
type SubscriptionQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique identifier for this subscription
	SubscriptionIdentifier string `protobuf:"bytes,1,opt,name=subscription_identifier,json=subscriptionIdentifier,proto3" json:"subscription_identifier,omitempty"`
	// The number of messages the Server may send before needing to await additional permits
	NumberOfPermits int64 `protobuf:"varint,2,opt,name=number_of_permits,json=numberOfPermits,proto3" json:"number_of_permits,omitempty"`
	// The Query describing the desire for information
	QueryRequest *QueryRequest `protobuf:"bytes,3,opt,name=query_request,json=queryRequest,proto3" json:"query_request,omitempty"`
	// A description of the type of Object expected as Update Responses
	UpdateResponseType *SerializedObject `protobuf:"bytes,4,opt,name=update_response_type,json=updateResponseType,proto3" json:"update_response_type,omitempty"`
}

func (x *SubscriptionQuery) Reset() {
	*x = SubscriptionQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionQuery) ProtoMessage() {}

func (x *SubscriptionQuery) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionQuery.ProtoReflect.Descriptor instead.
func (*SubscriptionQuery) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{7}
}

func (x *SubscriptionQuery) GetSubscriptionIdentifier() string {
	if x != nil {
		return x.SubscriptionIdentifier
	}
	return ""
}

func (x *SubscriptionQuery) GetNumberOfPermits() int64 {
	if x != nil {
		return x.NumberOfPermits
	}
	return 0
}

func (x *SubscriptionQuery) GetQueryRequest() *QueryRequest {
	if x != nil {
		return x.QueryRequest
	}
	return nil
}

func (x *SubscriptionQuery) GetUpdateResponseType() *SerializedObject {
	if x != nil {
		return x.UpdateResponseType
	}
	return nil
}

// A message containing an Update of a Query Subscription Response
type QueryUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of this Update
	MessageIdentifier string `protobuf:"bytes,2,opt,name=message_identifier,json=messageIdentifier,proto3" json:"message_identifier,omitempty"`
	// The object representing the Update
	Payload *SerializedObject `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	// Meta Data providing contextual information of the Update
	MetaData map[string]*MetaDataValue `protobuf:"bytes,4,rep,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The identifier of the Client instance providing the Update
	ClientId string `protobuf:"bytes,5,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// The Component Name of the Client providing the Update
	ComponentName string `protobuf:"bytes,6,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
	// An Error Code identifying the type of error, if any
	ErrorCode string `protobuf:"bytes,7,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// A detailed description of the error, if any
	ErrorMessage *ErrorMessage `protobuf:"bytes,8,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *QueryUpdate) Reset() {
	*x = QueryUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUpdate) ProtoMessage() {}

func (x *QueryUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUpdate.ProtoReflect.Descriptor instead.
func (*QueryUpdate) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{8}
}

func (x *QueryUpdate) GetMessageIdentifier() string {
	if x != nil {
		return x.MessageIdentifier
	}
	return ""
}

func (x *QueryUpdate) GetPayload() *SerializedObject {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *QueryUpdate) GetMetaData() map[string]*MetaDataValue {
	if x != nil {
		return x.MetaData
	}
	return nil
}

func (x *QueryUpdate) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *QueryUpdate) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

func (x *QueryUpdate) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *QueryUpdate) GetErrorMessage() *ErrorMessage {
	if x != nil {
		return x.ErrorMessage
	}
	return nil
}

// Message indicating that all relevant Updates have been sent for a Subscription Query, and that no further Updates are available
type QueryUpdateComplete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the Client instance providing the Update
	ClientId string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// The Component Name of the Client providing the Update
	ComponentName string `protobuf:"bytes,3,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
}

func (x *QueryUpdateComplete) Reset() {
	*x = QueryUpdateComplete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUpdateComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUpdateComplete) ProtoMessage() {}

func (x *QueryUpdateComplete) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUpdateComplete.ProtoReflect.Descriptor instead.
func (*QueryUpdateComplete) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{9}
}

func (x *QueryUpdateComplete) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *QueryUpdateComplete) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

// Message indicating that an Error occurred and that no Updates will be sent for a Subscription Query
type QueryUpdateCompleteExceptionally struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the Client instance providing the Update
	ClientId string `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// The Component Name of the Client providing the Update
	ComponentName string `protobuf:"bytes,3,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
	// The Code describing the type of Error that occurred
	ErrorCode string `protobuf:"bytes,5,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// A detailed description of the error, if available
	ErrorMessage *ErrorMessage `protobuf:"bytes,6,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *QueryUpdateCompleteExceptionally) Reset() {
	*x = QueryUpdateCompleteExceptionally{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryUpdateCompleteExceptionally) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryUpdateCompleteExceptionally) ProtoMessage() {}

func (x *QueryUpdateCompleteExceptionally) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryUpdateCompleteExceptionally.ProtoReflect.Descriptor instead.
func (*QueryUpdateCompleteExceptionally) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{10}
}

func (x *QueryUpdateCompleteExceptionally) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *QueryUpdateCompleteExceptionally) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

func (x *QueryUpdateCompleteExceptionally) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *QueryUpdateCompleteExceptionally) GetErrorMessage() *ErrorMessage {
	if x != nil {
		return x.ErrorMessage
	}
	return nil
}

// Message describing possible interactions for a Subscription Query
type SubscriptionQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The actual request. The Subscription Query is opened using a `subscribe`, which opens the flow of updates. Once
	// successful, the `get_initial_result` retrieves the initial result of the subscription. For the server to send
	// more updates than the initial number of permits, use the `flow_control` request to send more permits.
	//
	// Types that are assignable to Request:
	//
	//	*SubscriptionQueryRequest_Subscribe
	//	*SubscriptionQueryRequest_Unsubscribe
	//	*SubscriptionQueryRequest_GetInitialResult
	//	*SubscriptionQueryRequest_FlowControl
	Request isSubscriptionQueryRequest_Request `protobuf_oneof:"request"`
}

func (x *SubscriptionQueryRequest) Reset() {
	*x = SubscriptionQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionQueryRequest) ProtoMessage() {}

func (x *SubscriptionQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionQueryRequest.ProtoReflect.Descriptor instead.
func (*SubscriptionQueryRequest) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{11}
}

func (m *SubscriptionQueryRequest) GetRequest() isSubscriptionQueryRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *SubscriptionQueryRequest) GetSubscribe() *SubscriptionQuery {
	if x, ok := x.GetRequest().(*SubscriptionQueryRequest_Subscribe); ok {
		return x.Subscribe
	}
	return nil
}

func (x *SubscriptionQueryRequest) GetUnsubscribe() *SubscriptionQuery {
	if x, ok := x.GetRequest().(*SubscriptionQueryRequest_Unsubscribe); ok {
		return x.Unsubscribe
	}
	return nil
}

func (x *SubscriptionQueryRequest) GetGetInitialResult() *SubscriptionQuery {
	if x, ok := x.GetRequest().(*SubscriptionQueryRequest_GetInitialResult); ok {
		return x.GetInitialResult
	}
	return nil
}

func (x *SubscriptionQueryRequest) GetFlowControl() *SubscriptionQuery {
	if x, ok := x.GetRequest().(*SubscriptionQueryRequest_FlowControl); ok {
		return x.FlowControl
	}
	return nil
}

type isSubscriptionQueryRequest_Request interface {
	isSubscriptionQueryRequest_Request()
}

type SubscriptionQueryRequest_Subscribe struct {
	// Start a Subscription Query with the given details.
	Subscribe *SubscriptionQuery `protobuf:"bytes,1,opt,name=subscribe,proto3,oneof"`
}

type SubscriptionQueryRequest_Unsubscribe struct {
	// Ends a previously started Subscription Query with the given details
	Unsubscribe *SubscriptionQuery `protobuf:"bytes,2,opt,name=unsubscribe,proto3,oneof"`
}

type SubscriptionQueryRequest_GetInitialResult struct {
	// Requests the initial result of a subscription query to be sent. This should always be done after opening the
	// subscription query itself, to remove concurrency conflicts with Update messages.
	GetInitialResult *SubscriptionQuery `protobuf:"bytes,3,opt,name=get_initial_result,json=getInitialResult,proto3,oneof"`
}

type SubscriptionQueryRequest_FlowControl struct {
	// Allows the Server to provide additional Updates to be sent. Only the `number_of_permits` field needs to be
	// set on this message.
	FlowControl *SubscriptionQuery `protobuf:"bytes,4,opt,name=flow_control,json=flowControl,proto3,oneof"`
}

func (*SubscriptionQueryRequest_Subscribe) isSubscriptionQueryRequest_Request() {}

func (*SubscriptionQueryRequest_Unsubscribe) isSubscriptionQueryRequest_Request() {}

func (*SubscriptionQueryRequest_GetInitialResult) isSubscriptionQueryRequest_Request() {}

func (*SubscriptionQueryRequest_FlowControl) isSubscriptionQueryRequest_Request() {}

// Represents a Response Message for a Subscription Query
type SubscriptionQueryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier for this message
	MessageIdentifier string `protobuf:"bytes,1,opt,name=message_identifier,json=messageIdentifier,proto3" json:"message_identifier,omitempty"`
	// The identifier of the subscription query this is a response for
	SubscriptionIdentifier string `protobuf:"bytes,2,opt,name=subscription_identifier,json=subscriptionIdentifier,proto3" json:"subscription_identifier,omitempty"`
	// The actual response. The `initial_result` message is sent as a response to `get_initial_result`. An `update`
	// messages is sent for each update available for the query, even before the Initial Result is supplied. The
	// `complete` or `complete_exceptionally` are sent when the publishing side completed the Subscription Query,
	// either regularly (`complete`) or because an error occurred (`complete_exceptionally`).
	//
	// Types that are assignable to Response:
	//
	//	*SubscriptionQueryResponse_InitialResult
	//	*SubscriptionQueryResponse_Update
	//	*SubscriptionQueryResponse_Complete
	//	*SubscriptionQueryResponse_CompleteExceptionally
	Response isSubscriptionQueryResponse_Response `protobuf_oneof:"response"`
}

func (x *SubscriptionQueryResponse) Reset() {
	*x = SubscriptionQueryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriptionQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriptionQueryResponse) ProtoMessage() {}

func (x *SubscriptionQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriptionQueryResponse.ProtoReflect.Descriptor instead.
func (*SubscriptionQueryResponse) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{12}
}

func (x *SubscriptionQueryResponse) GetMessageIdentifier() string {
	if x != nil {
		return x.MessageIdentifier
	}
	return ""
}

func (x *SubscriptionQueryResponse) GetSubscriptionIdentifier() string {
	if x != nil {
		return x.SubscriptionIdentifier
	}
	return ""
}

func (m *SubscriptionQueryResponse) GetResponse() isSubscriptionQueryResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *SubscriptionQueryResponse) GetInitialResult() *QueryResponse {
	if x, ok := x.GetResponse().(*SubscriptionQueryResponse_InitialResult); ok {
		return x.InitialResult
	}
	return nil
}

func (x *SubscriptionQueryResponse) GetUpdate() *QueryUpdate {
	if x, ok := x.GetResponse().(*SubscriptionQueryResponse_Update); ok {
		return x.Update
	}
	return nil
}

func (x *SubscriptionQueryResponse) GetComplete() *QueryUpdateComplete {
	if x, ok := x.GetResponse().(*SubscriptionQueryResponse_Complete); ok {
		return x.Complete
	}
	return nil
}

func (x *SubscriptionQueryResponse) GetCompleteExceptionally() *QueryUpdateCompleteExceptionally {
	if x, ok := x.GetResponse().(*SubscriptionQueryResponse_CompleteExceptionally); ok {
		return x.CompleteExceptionally
	}
	return nil
}

type isSubscriptionQueryResponse_Response interface {
	isSubscriptionQueryResponse_Response()
}

type SubscriptionQueryResponse_InitialResult struct {
	// Provides an Initial Response
	InitialResult *QueryResponse `protobuf:"bytes,3,opt,name=initial_result,json=initialResult,proto3,oneof"`
}

type SubscriptionQueryResponse_Update struct {
	// Provides an Update Response
	Update *QueryUpdate `protobuf:"bytes,4,opt,name=update,proto3,oneof"`
}

type SubscriptionQueryResponse_Complete struct {
	// Indicates the Query is complete, and no more Updates will be sent
	Complete *QueryUpdateComplete `protobuf:"bytes,5,opt,name=complete,proto3,oneof"`
}

type SubscriptionQueryResponse_CompleteExceptionally struct {
	// Indicates the Query failed exceptionally, and no more Updates will be sent
	CompleteExceptionally *QueryUpdateCompleteExceptionally `protobuf:"bytes,6,opt,name=complete_exceptionally,json=completeExceptionally,proto3,oneof"`
}

func (*SubscriptionQueryResponse_InitialResult) isSubscriptionQueryResponse_Response() {}

func (*SubscriptionQueryResponse_Update) isSubscriptionQueryResponse_Response() {}

func (*SubscriptionQueryResponse_Complete) isSubscriptionQueryResponse_Response() {}

func (*SubscriptionQueryResponse_CompleteExceptionally) isSubscriptionQueryResponse_Response() {}

// Message containing details of a Registration of a Query Handler in a component
type QuerySubscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of this Message
	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// The name of the Query the Handler is subscribed to
	Query string `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	// The type of Result this Handler produces
	ResultName string `protobuf:"bytes,3,opt,name=result_name,json=resultName,proto3" json:"result_name,omitempty"`
	// The name of the Component containing the Query Handler
	ComponentName string `protobuf:"bytes,4,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
	// The unique identifier of the Client Instance containing the Query Handler
	ClientId string `protobuf:"bytes,5,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *QuerySubscription) Reset() {
	*x = QuerySubscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_query_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuerySubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuerySubscription) ProtoMessage() {}

func (x *QuerySubscription) ProtoReflect() protoreflect.Message {
	mi := &file_query_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuerySubscription.ProtoReflect.Descriptor instead.
func (*QuerySubscription) Descriptor() ([]byte, []int) {
	return file_query_proto_rawDescGZIP(), []int{13}
}

func (x *QuerySubscription) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *QuerySubscription) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *QuerySubscription) GetResultName() string {
	if x != nil {
		return x.ResultName
	}
	return ""
}

func (x *QuerySubscription) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

func (x *QuerySubscription) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

var File_query_proto protoreflect.FileDescriptor

var file_query_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x69,
	0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x05, 0x0a,
	0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4f, 0x75,
	0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x52, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x61,
	0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x56, 0x0a, 0x0b, 0x75, 0x6e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78,
	0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x48, 0x00, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12,
	0x57, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f,
	0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f,
	0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x7c, 0x0a, 0x1b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e,
	0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x19, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x25,
	0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x82, 0x04, 0x0a, 0x14, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x3d, 0x0a, 0x03, 0x61, 0x63, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e,
	0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x6b, 0x48, 0x00, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x12, 0x45, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f,
	0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x79, 0x0a, 0x1a, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e,
	0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x18, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x0c, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f,
	0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x12, 0x61, 0x0a, 0x12, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x48,
	0x00, 0x52, 0x10, 0x71, 0x75, 0x65, 0x72, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2f, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46,
	0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x58, 0x0a, 0x0f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e,
	0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x73, 0x22, 0xfa,
	0x04, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x45, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e,
	0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x58, 0x0a, 0x09, 0x6d, 0x65, 0x74,
	0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x69, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e,
	0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x65, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e,
	0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd4, 0x04, 0x0a, 0x0d,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61,
	0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x59, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e,
	0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x69, 0x0a, 0x17, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x65, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f,
	0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x0f,
	0x10, 0x10, 0x22, 0xab, 0x02, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x17, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x52, 0x0a,
	0x0d, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71,
	0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0c, 0x71, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x5d, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x12, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xf4, 0x03, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x45, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f,
	0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x57, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x69, 0x6f, 0x2e, 0x61,
	0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x61,
	0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x65, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61,
	0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x59, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xd3, 0x01, 0x0a, 0x20, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78,
	0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8e, 0x03, 0x0a, 0x18, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78,
	0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x09,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x56, 0x0a, 0x0b, 0x75, 0x6e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x12, 0x62, 0x0a, 0x12, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x10, 0x67, 0x65, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x57, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6f,
	0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x09,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x80, 0x04, 0x0a, 0x19, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x17, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x57, 0x0a, 0x0e, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f,
	0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x46, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78,
	0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x52, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61,
	0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x7a, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71,
	0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79, 0x48, 0x00, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x6c, 0x79,
	0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb3, 0x01, 0x0a,
	0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x4a, 0x04, 0x08, 0x06,
	0x10, 0x07, 0x32, 0x8c, 0x03, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61,
	0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x1a, 0x35, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x6a, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f,
	0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x8b, 0x01, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71,
	0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3a, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30,
	0x01, 0x42, 0x0f, 0x50, 0x01, 0x5a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_query_proto_rawDescOnce sync.Once
	file_query_proto_rawDescData = file_query_proto_rawDesc
)

func file_query_proto_rawDescGZIP() []byte {
	file_query_proto_rawDescOnce.Do(func() {
		file_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_query_proto_rawDescData)
	})
	return file_query_proto_rawDescData
}

var file_query_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_query_proto_goTypes = []interface{}{
	(*QueryProviderOutbound)(nil),            // 0: io.axoniq.axonserver.grpc.query.QueryProviderOutbound
	(*QueryProviderInbound)(nil),             // 1: io.axoniq.axonserver.grpc.query.QueryProviderInbound
	(*QueryReference)(nil),                   // 2: io.axoniq.axonserver.grpc.query.QueryReference
	(*QueryComplete)(nil),                    // 3: io.axoniq.axonserver.grpc.query.QueryComplete
	(*QueryFlowControl)(nil),                 // 4: io.axoniq.axonserver.grpc.query.QueryFlowControl
	(*QueryRequest)(nil),                     // 5: io.axoniq.axonserver.grpc.query.QueryRequest
	(*QueryResponse)(nil),                    // 6: io.axoniq.axonserver.grpc.query.QueryResponse
	(*SubscriptionQuery)(nil),                // 7: io.axoniq.axonserver.grpc.query.SubscriptionQuery
	(*QueryUpdate)(nil),                      // 8: io.axoniq.axonserver.grpc.query.QueryUpdate
	(*QueryUpdateComplete)(nil),              // 9: io.axoniq.axonserver.grpc.query.QueryUpdateComplete
	(*QueryUpdateCompleteExceptionally)(nil), // 10: io.axoniq.axonserver.grpc.query.QueryUpdateCompleteExceptionally
	(*SubscriptionQueryRequest)(nil),         // 11: io.axoniq.axonserver.grpc.query.SubscriptionQueryRequest
	(*SubscriptionQueryResponse)(nil),        // 12: io.axoniq.axonserver.grpc.query.SubscriptionQueryResponse
	(*QuerySubscription)(nil),                // 13: io.axoniq.axonserver.grpc.query.QuerySubscription
	nil,                                      // 14: io.axoniq.axonserver.grpc.query.QueryRequest.MetaDataEntry
	nil,                                      // 15: io.axoniq.axonserver.grpc.query.QueryResponse.MetaDataEntry
	nil,                                      // 16: io.axoniq.axonserver.grpc.query.QueryUpdate.MetaDataEntry
	(*FlowControl)(nil),                      // 17: io.axoniq.axonserver.grpc.FlowControl
	(*InstructionAck)(nil),                   // 18: io.axoniq.axonserver.grpc.InstructionAck
	(*SerializedObject)(nil),                 // 19: io.axoniq.axonserver.grpc.SerializedObject
	(*ProcessingInstruction)(nil),            // 20: io.axoniq.axonserver.grpc.ProcessingInstruction
	(*ErrorMessage)(nil),                     // 21: io.axoniq.axonserver.grpc.ErrorMessage
	(*MetaDataValue)(nil),                    // 22: io.axoniq.axonserver.grpc.MetaDataValue
}
var file_query_proto_depIdxs = []int32{
	13, // 0: io.axoniq.axonserver.grpc.query.QueryProviderOutbound.subscribe:type_name -> io.axoniq.axonserver.grpc.query.QuerySubscription
	13, // 1: io.axoniq.axonserver.grpc.query.QueryProviderOutbound.unsubscribe:type_name -> io.axoniq.axonserver.grpc.query.QuerySubscription
	17, // 2: io.axoniq.axonserver.grpc.query.QueryProviderOutbound.flow_control:type_name -> io.axoniq.axonserver.grpc.FlowControl
	6,  // 3: io.axoniq.axonserver.grpc.query.QueryProviderOutbound.query_response:type_name -> io.axoniq.axonserver.grpc.query.QueryResponse
	3,  // 4: io.axoniq.axonserver.grpc.query.QueryProviderOutbound.query_complete:type_name -> io.axoniq.axonserver.grpc.query.QueryComplete
	12, // 5: io.axoniq.axonserver.grpc.query.QueryProviderOutbound.subscription_query_response:type_name -> io.axoniq.axonserver.grpc.query.SubscriptionQueryResponse
	18, // 6: io.axoniq.axonserver.grpc.query.QueryProviderOutbound.ack:type_name -> io.axoniq.axonserver.grpc.InstructionAck
	18, // 7: io.axoniq.axonserver.grpc.query.QueryProviderInbound.ack:type_name -> io.axoniq.axonserver.grpc.InstructionAck
	5,  // 8: io.axoniq.axonserver.grpc.query.QueryProviderInbound.query:type_name -> io.axoniq.axonserver.grpc.query.QueryRequest
	11, // 9: io.axoniq.axonserver.grpc.query.QueryProviderInbound.subscription_query_request:type_name -> io.axoniq.axonserver.grpc.query.SubscriptionQueryRequest
	2,  // 10: io.axoniq.axonserver.grpc.query.QueryProviderInbound.query_cancel:type_name -> io.axoniq.axonserver.grpc.query.QueryReference
	4,  // 11: io.axoniq.axonserver.grpc.query.QueryProviderInbound.query_flow_control:type_name -> io.axoniq.axonserver.grpc.query.QueryFlowControl
	2,  // 12: io.axoniq.axonserver.grpc.query.QueryFlowControl.query_reference:type_name -> io.axoniq.axonserver.grpc.query.QueryReference
	19, // 13: io.axoniq.axonserver.grpc.query.QueryRequest.payload:type_name -> io.axoniq.axonserver.grpc.SerializedObject
	14, // 14: io.axoniq.axonserver.grpc.query.QueryRequest.meta_data:type_name -> io.axoniq.axonserver.grpc.query.QueryRequest.MetaDataEntry
	19, // 15: io.axoniq.axonserver.grpc.query.QueryRequest.response_type:type_name -> io.axoniq.axonserver.grpc.SerializedObject
	20, // 16: io.axoniq.axonserver.grpc.query.QueryRequest.processing_instructions:type_name -> io.axoniq.axonserver.grpc.ProcessingInstruction
	21, // 17: io.axoniq.axonserver.grpc.query.QueryResponse.error_message:type_name -> io.axoniq.axonserver.grpc.ErrorMessage
	19, // 18: io.axoniq.axonserver.grpc.query.QueryResponse.payload:type_name -> io.axoniq.axonserver.grpc.SerializedObject
	15, // 19: io.axoniq.axonserver.grpc.query.QueryResponse.meta_data:type_name -> io.axoniq.axonserver.grpc.query.QueryResponse.MetaDataEntry
	20, // 20: io.axoniq.axonserver.grpc.query.QueryResponse.processing_instructions:type_name -> io.axoniq.axonserver.grpc.ProcessingInstruction
	5,  // 21: io.axoniq.axonserver.grpc.query.SubscriptionQuery.query_request:type_name -> io.axoniq.axonserver.grpc.query.QueryRequest
	19, // 22: io.axoniq.axonserver.grpc.query.SubscriptionQuery.update_response_type:type_name -> io.axoniq.axonserver.grpc.SerializedObject
	19, // 23: io.axoniq.axonserver.grpc.query.QueryUpdate.payload:type_name -> io.axoniq.axonserver.grpc.SerializedObject
	16, // 24: io.axoniq.axonserver.grpc.query.QueryUpdate.meta_data:type_name -> io.axoniq.axonserver.grpc.query.QueryUpdate.MetaDataEntry
	21, // 25: io.axoniq.axonserver.grpc.query.QueryUpdate.error_message:type_name -> io.axoniq.axonserver.grpc.ErrorMessage
	21, // 26: io.axoniq.axonserver.grpc.query.QueryUpdateCompleteExceptionally.error_message:type_name -> io.axoniq.axonserver.grpc.ErrorMessage
	7,  // 27: io.axoniq.axonserver.grpc.query.SubscriptionQueryRequest.subscribe:type_name -> io.axoniq.axonserver.grpc.query.SubscriptionQuery
	7,  // 28: io.axoniq.axonserver.grpc.query.SubscriptionQueryRequest.unsubscribe:type_name -> io.axoniq.axonserver.grpc.query.SubscriptionQuery
	7,  // 29: io.axoniq.axonserver.grpc.query.SubscriptionQueryRequest.get_initial_result:type_name -> io.axoniq.axonserver.grpc.query.SubscriptionQuery
	7,  // 30: io.axoniq.axonserver.grpc.query.SubscriptionQueryRequest.flow_control:type_name -> io.axoniq.axonserver.grpc.query.SubscriptionQuery
	6,  // 31: io.axoniq.axonserver.grpc.query.SubscriptionQueryResponse.initial_result:type_name -> io.axoniq.axonserver.grpc.query.QueryResponse
	8,  // 32: io.axoniq.axonserver.grpc.query.SubscriptionQueryResponse.update:type_name -> io.axoniq.axonserver.grpc.query.QueryUpdate
	9,  // 33: io.axoniq.axonserver.grpc.query.SubscriptionQueryResponse.complete:type_name -> io.axoniq.axonserver.grpc.query.QueryUpdateComplete
	10, // 34: io.axoniq.axonserver.grpc.query.SubscriptionQueryResponse.complete_exceptionally:type_name -> io.axoniq.axonserver.grpc.query.QueryUpdateCompleteExceptionally
	22, // 35: io.axoniq.axonserver.grpc.query.QueryRequest.MetaDataEntry.value:type_name -> io.axoniq.axonserver.grpc.MetaDataValue
	22, // 36: io.axoniq.axonserver.grpc.query.QueryResponse.MetaDataEntry.value:type_name -> io.axoniq.axonserver.grpc.MetaDataValue
	22, // 37: io.axoniq.axonserver.grpc.query.QueryUpdate.MetaDataEntry.value:type_name -> io.axoniq.axonserver.grpc.MetaDataValue
	0,  // 38: io.axoniq.axonserver.grpc.query.QueryService.OpenStream:input_type -> io.axoniq.axonserver.grpc.query.QueryProviderOutbound
	5,  // 39: io.axoniq.axonserver.grpc.query.QueryService.Query:input_type -> io.axoniq.axonserver.grpc.query.QueryRequest
	11, // 40: io.axoniq.axonserver.grpc.query.QueryService.Subscription:input_type -> io.axoniq.axonserver.grpc.query.SubscriptionQueryRequest
	1,  // 41: io.axoniq.axonserver.grpc.query.QueryService.OpenStream:output_type -> io.axoniq.axonserver.grpc.query.QueryProviderInbound
	6,  // 42: io.axoniq.axonserver.grpc.query.QueryService.Query:output_type -> io.axoniq.axonserver.grpc.query.QueryResponse
	12, // 43: io.axoniq.axonserver.grpc.query.QueryService.Subscription:output_type -> io.axoniq.axonserver.grpc.query.SubscriptionQueryResponse
	41, // [41:44] is the sub-list for method output_type
	38, // [38:41] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_query_proto_init() }
func file_query_proto_init() {
	if File_query_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_query_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProviderOutbound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryProviderInbound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryComplete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryFlowControl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUpdateComplete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryUpdateCompleteExceptionally); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriptionQueryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_query_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuerySubscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_query_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*QueryProviderOutbound_Subscribe)(nil),
		(*QueryProviderOutbound_Unsubscribe)(nil),
		(*QueryProviderOutbound_FlowControl)(nil),
		(*QueryProviderOutbound_QueryResponse)(nil),
		(*QueryProviderOutbound_QueryComplete)(nil),
		(*QueryProviderOutbound_SubscriptionQueryResponse)(nil),
		(*QueryProviderOutbound_Ack)(nil),
	}
	file_query_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*QueryProviderInbound_Ack)(nil),
		(*QueryProviderInbound_Query)(nil),
		(*QueryProviderInbound_SubscriptionQueryRequest)(nil),
		(*QueryProviderInbound_QueryCancel)(nil),
		(*QueryProviderInbound_QueryFlowControl)(nil),
	}
	file_query_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*SubscriptionQueryRequest_Subscribe)(nil),
		(*SubscriptionQueryRequest_Unsubscribe)(nil),
		(*SubscriptionQueryRequest_GetInitialResult)(nil),
		(*SubscriptionQueryRequest_FlowControl)(nil),
	}
	file_query_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*SubscriptionQueryResponse_InitialResult)(nil),
		(*SubscriptionQueryResponse_Update)(nil),
		(*SubscriptionQueryResponse_Complete)(nil),
		(*SubscriptionQueryResponse_CompleteExceptionally)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_query_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_query_proto_goTypes,
		DependencyIndexes: file_query_proto_depIdxs,
		MessageInfos:      file_query_proto_msgTypes,
	}.Build()
	File_query_proto = out.File
	file_query_proto_rawDesc = nil
	file_query_proto_goTypes = nil
	file_query_proto_depIdxs = nil
}
