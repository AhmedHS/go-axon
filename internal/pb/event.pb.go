// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: event.proto

package pb

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The state of the transformation.
type TransformationState int32

const (
	// The transformation is opened, able to receive request to transform events, or to be applied or cancelled.
	TransformationState_ACTIVE TransformationState = 0
	// The transformation has been cancelled. This a final state.
	TransformationState_CANCELLED TransformationState = 1
	// The transformation is in progress of applying its actions to the event store.
	TransformationState_APPLYING TransformationState = 2
	// The transformation has been applied to the event store. This a final state.
	TransformationState_APPLIED TransformationState = 3
)

// Enum value maps for TransformationState.
var (
	TransformationState_name = map[int32]string{
		0: "ACTIVE",
		1: "CANCELLED",
		2: "APPLYING",
		3: "APPLIED",
	}
	TransformationState_value = map[string]int32{
		"ACTIVE":    0,
		"CANCELLED": 1,
		"APPLYING":  2,
		"APPLIED":   3,
	}
)

func (x TransformationState) Enum() *TransformationState {
	p := new(TransformationState)
	*p = x
	return p
}

func (x TransformationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransformationState) Descriptor() protoreflect.EnumDescriptor {
	return file_event_proto_enumTypes[0].Descriptor()
}

func (TransformationState) Type() protoreflect.EnumType {
	return &file_event_proto_enumTypes[0]
}

func (x TransformationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransformationState.Descriptor instead.
func (TransformationState) EnumDescriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{0}
}

// Request to compact event store.
type CompactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CompactionRequest) Reset() {
	*x = CompactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompactionRequest) ProtoMessage() {}

func (x *CompactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompactionRequest.ProtoReflect.Descriptor instead.
func (*CompactionRequest) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{0}
}

// The transformation data.
type Transformation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the transformation.
	TransformationId *TransformationId `protobuf:"bytes,1,opt,name=transformationId,proto3" json:"transformationId,omitempty"`
	// The state of the transformation
	State TransformationState `protobuf:"varint,2,opt,name=state,proto3,enum=io.axoniq.axonserver.grpc.event.TransformationState" json:"state,omitempty"`
	// The sequence of the last transformation action stored. Needed for checking sequential consistency of requests.
	Sequence int64 `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// The bounded context in which this transformation is being executed.
	Context string `protobuf:"bytes,4,opt,name=context,proto3" json:"context,omitempty"`
	// The description of the transformation.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// The timestamp at which the transformation was applied. Set to -1 if the transformation was not applied.
	AppliedAt int64 `protobuf:"varint,6,opt,name=applied_at,json=appliedAt,proto3" json:"applied_at,omitempty"`
	// The username of user who requested the transformation to be applied. Empty if the transformation was not applied.
	ApplyRequester string `protobuf:"bytes,7,opt,name=apply_requester,json=applyRequester,proto3" json:"apply_requester,omitempty"`
	// The version of the transformation. The sequence
	Version int32 `protobuf:"varint,8,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Transformation) Reset() {
	*x = Transformation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transformation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transformation) ProtoMessage() {}

func (x *Transformation) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transformation.ProtoReflect.Descriptor instead.
func (*Transformation) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{1}
}

func (x *Transformation) GetTransformationId() *TransformationId {
	if x != nil {
		return x.TransformationId
	}
	return nil
}

func (x *Transformation) GetState() TransformationState {
	if x != nil {
		return x.State
	}
	return TransformationState_ACTIVE
}

func (x *Transformation) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Transformation) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *Transformation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Transformation) GetAppliedAt() int64 {
	if x != nil {
		return x.AppliedAt
	}
	return 0
}

func (x *Transformation) GetApplyRequester() string {
	if x != nil {
		return x.ApplyRequester
	}
	return ""
}

func (x *Transformation) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// Request to start a transformation
type StartTransformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A description of the purpose of this transformation, for reference only
	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *StartTransformationRequest) Reset() {
	*x = StartTransformationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartTransformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartTransformationRequest) ProtoMessage() {}

func (x *StartTransformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartTransformationRequest.ProtoReflect.Descriptor instead.
func (*StartTransformationRequest) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{2}
}

func (x *StartTransformationRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Request to apply a transformation
type ApplyTransformationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identification of the transformation
	TransformationId *TransformationId `protobuf:"bytes,1,opt,name=transformation_id,json=transformationId,proto3" json:"transformation_id,omitempty"`
	// The sequence of the last entry in this transformation
	LastSequence int64 `protobuf:"varint,2,opt,name=last_sequence,json=lastSequence,proto3" json:"last_sequence,omitempty"`
}

func (x *ApplyTransformationRequest) Reset() {
	*x = ApplyTransformationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplyTransformationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplyTransformationRequest) ProtoMessage() {}

func (x *ApplyTransformationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplyTransformationRequest.ProtoReflect.Descriptor instead.
func (*ApplyTransformationRequest) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{3}
}

func (x *ApplyTransformationRequest) GetTransformationId() *TransformationId {
	if x != nil {
		return x.TransformationId
	}
	return nil
}

func (x *ApplyTransformationRequest) GetLastSequence() int64 {
	if x != nil {
		return x.LastSequence
	}
	return 0
}

// Message containing one event to transform within a transformation
type TransformRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identification of the transformation
	TransformationId *TransformationId `protobuf:"bytes,1,opt,name=transformation_id,json=transformationId,proto3" json:"transformation_id,omitempty"`
	// The sequence of the current transformation
	Sequence int64 `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// Types that are assignable to Request:
	//
	//	*TransformRequest_ReplaceEvent
	//	*TransformRequest_DeleteEvent
	Request isTransformRequest_Request `protobuf_oneof:"request"`
}

func (x *TransformRequest) Reset() {
	*x = TransformRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransformRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformRequest) ProtoMessage() {}

func (x *TransformRequest) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformRequest.ProtoReflect.Descriptor instead.
func (*TransformRequest) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{4}
}

func (x *TransformRequest) GetTransformationId() *TransformationId {
	if x != nil {
		return x.TransformationId
	}
	return nil
}

func (x *TransformRequest) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (m *TransformRequest) GetRequest() isTransformRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *TransformRequest) GetReplaceEvent() *TransformedEvent {
	if x, ok := x.GetRequest().(*TransformRequest_ReplaceEvent); ok {
		return x.ReplaceEvent
	}
	return nil
}

func (x *TransformRequest) GetDeleteEvent() *DeletedEvent {
	if x, ok := x.GetRequest().(*TransformRequest_DeleteEvent); ok {
		return x.DeleteEvent
	}
	return nil
}

type isTransformRequest_Request interface {
	isTransformRequest_Request()
}

type TransformRequest_ReplaceEvent struct {
	// Replaces the content of an event with the new content
	ReplaceEvent *TransformedEvent `protobuf:"bytes,3,opt,name=replace_event,json=replaceEvent,proto3,oneof"`
}

type TransformRequest_DeleteEvent struct {
	// Deletes the content of an event
	DeleteEvent *DeletedEvent `protobuf:"bytes,4,opt,name=delete_event,json=deleteEvent,proto3,oneof"`
}

func (*TransformRequest_ReplaceEvent) isTransformRequest_Request() {}

func (*TransformRequest_DeleteEvent) isTransformRequest_Request() {}

// Replaces the content of an event with the new content
type TransformedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The global index of the event to replace
	Token int64 `protobuf:"varint,1,opt,name=token,proto3" json:"token,omitempty"`
	// The new content of the event
	Event *Event `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *TransformedEvent) Reset() {
	*x = TransformedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransformedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformedEvent) ProtoMessage() {}

func (x *TransformedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformedEvent.ProtoReflect.Descriptor instead.
func (*TransformedEvent) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{5}
}

func (x *TransformedEvent) GetToken() int64 {
	if x != nil {
		return x.Token
	}
	return 0
}

func (x *TransformedEvent) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

// Deletes the content of an event
type DeletedEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The global index of the event to clear
	Token int64 `protobuf:"varint,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *DeletedEvent) Reset() {
	*x = DeletedEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletedEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletedEvent) ProtoMessage() {}

func (x *DeletedEvent) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletedEvent.ProtoReflect.Descriptor instead.
func (*DeletedEvent) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{6}
}

func (x *DeletedEvent) GetToken() int64 {
	if x != nil {
		return x.Token
	}
	return 0
}

// Uniquely identifies a transformation
type TransformationId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The value of the identifier.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TransformationId) Reset() {
	*x = TransformationId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransformationId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformationId) ProtoMessage() {}

func (x *TransformationId) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformationId.ProtoReflect.Descriptor instead.
func (*TransformationId) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{7}
}

func (x *TransformationId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Acknowledgement that event with given token has been transformed successfully
type TransformRequestAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sequence of the transformation request
	Sequence int64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (x *TransformRequestAck) Reset() {
	*x = TransformRequestAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransformRequestAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransformRequestAck) ProtoMessage() {}

func (x *TransformRequestAck) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransformRequestAck.ProtoReflect.Descriptor instead.
func (*TransformRequestAck) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{8}
}

func (x *TransformRequestAck) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

// Request message to schedule an event
type ScheduleEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// timestamp when to publish the event
	Instant int64 `protobuf:"varint,1,opt,name=instant,proto3" json:"instant,omitempty"`
	// the event to publish
	Event *Event `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *ScheduleEventRequest) Reset() {
	*x = ScheduleEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleEventRequest) ProtoMessage() {}

func (x *ScheduleEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleEventRequest.ProtoReflect.Descriptor instead.
func (*ScheduleEventRequest) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{9}
}

func (x *ScheduleEventRequest) GetInstant() int64 {
	if x != nil {
		return x.Instant
	}
	return 0
}

func (x *ScheduleEventRequest) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

// Request message to reschedule an event
type RescheduleEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// optional token of scheduled event to cancel
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// timestamp when to publish the event
	Instant int64 `protobuf:"varint,2,opt,name=instant,proto3" json:"instant,omitempty"`
	// the event to publish
	Event *Event `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *RescheduleEventRequest) Reset() {
	*x = RescheduleEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RescheduleEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RescheduleEventRequest) ProtoMessage() {}

func (x *RescheduleEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RescheduleEventRequest.ProtoReflect.Descriptor instead.
func (*RescheduleEventRequest) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{10}
}

func (x *RescheduleEventRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *RescheduleEventRequest) GetInstant() int64 {
	if x != nil {
		return x.Instant
	}
	return 0
}

func (x *RescheduleEventRequest) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

// Request message to cancel an event
type CancelScheduledEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// token of scheduled event to cancel
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *CancelScheduledEventRequest) Reset() {
	*x = CancelScheduledEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelScheduledEventRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelScheduledEventRequest) ProtoMessage() {}

func (x *CancelScheduledEventRequest) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelScheduledEventRequest.ProtoReflect.Descriptor instead.
func (*CancelScheduledEventRequest) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{11}
}

func (x *CancelScheduledEventRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// Token to manage a scheduled event
type ScheduleToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Field defining the token identifier
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ScheduleToken) Reset() {
	*x = ScheduleToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduleToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduleToken) ProtoMessage() {}

func (x *ScheduleToken) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduleToken.ProtoReflect.Descriptor instead.
func (*ScheduleToken) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{12}
}

func (x *ScheduleToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// Request message to receive the first Token (Tail Token) of the Event Stream
type GetFirstTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetFirstTokenRequest) Reset() {
	*x = GetFirstTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFirstTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFirstTokenRequest) ProtoMessage() {}

func (x *GetFirstTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFirstTokenRequest.ProtoReflect.Descriptor instead.
func (*GetFirstTokenRequest) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{13}
}

// Request message to receive the last Token (Head Token) of the Event Stream
type GetLastTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLastTokenRequest) Reset() {
	*x = GetLastTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLastTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLastTokenRequest) ProtoMessage() {}

func (x *GetLastTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLastTokenRequest.ProtoReflect.Descriptor instead.
func (*GetLastTokenRequest) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{14}
}

// Request message to receive the Token that starts streaming events from the given timestamp
type GetTokenAtRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp expressed as milliseconds since epoch
	Instant int64 `protobuf:"varint,1,opt,name=instant,proto3" json:"instant,omitempty"`
}

func (x *GetTokenAtRequest) Reset() {
	*x = GetTokenAtRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokenAtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenAtRequest) ProtoMessage() {}

func (x *GetTokenAtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenAtRequest.ProtoReflect.Descriptor instead.
func (*GetTokenAtRequest) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{15}
}

func (x *GetTokenAtRequest) GetInstant() int64 {
	if x != nil {
		return x.Instant
	}
	return 0
}

// Message containing the information necessary to track the position of events in the Event Stream
type TrackingToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The value of the Token
	Token int64 `protobuf:"varint,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *TrackingToken) Reset() {
	*x = TrackingToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackingToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackingToken) ProtoMessage() {}

func (x *TrackingToken) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackingToken.ProtoReflect.Descriptor instead.
func (*TrackingToken) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{16}
}

func (x *TrackingToken) GetToken() int64 {
	if x != nil {
		return x.Token
	}
	return 0
}

// Message wrapping an Event and a Tracking Token
type EventWithToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Token representing the position of this Event in the Stream
	Token int64 `protobuf:"varint,1,opt,name=token,proto3" json:"token,omitempty"`
	// The actual Event Message
	Event *Event `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *EventWithToken) Reset() {
	*x = EventWithToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventWithToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventWithToken) ProtoMessage() {}

func (x *EventWithToken) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventWithToken.ProtoReflect.Descriptor instead.
func (*EventWithToken) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{17}
}

func (x *EventWithToken) GetToken() int64 {
	if x != nil {
		return x.Token
	}
	return 0
}

func (x *EventWithToken) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

// Message providing the parameters for executing a Query against AxonServer.
type QueryEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The query to execute against the Event Stream
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// The number of results AxonServer may send before new permits need to be provided
	NumberOfPermits int64 `protobuf:"varint,2,opt,name=number_of_permits,json=numberOfPermits,proto3" json:"number_of_permits,omitempty"`
	// Whether to keep the query running against incoming events once the Head of the Stream is reached
	LiveEvents bool `protobuf:"varint,3,opt,name=live_events,json=liveEvents,proto3" json:"live_events,omitempty"`
	// Indicates whether to force querying events from the leader node of an Axon Server. Forcing reads from leader
	// reduces the staleness of the data read, but also puts extra burden on the leader, reducing overall scalability.
	// <p>
	// This property has no effect on connections to AxonServer SE.
	// </p>
	ForceReadFromLeader bool `protobuf:"varint,4,opt,name=force_read_from_leader,json=forceReadFromLeader,proto3" json:"force_read_from_leader,omitempty"`
	// If true, snapshots will be queried instead of events
	QuerySnapshots bool `protobuf:"varint,5,opt,name=query_snapshots,json=querySnapshots,proto3" json:"query_snapshots,omitempty"`
	// Query from this context, not from the default context of the connection
	ContextName string `protobuf:"bytes,6,opt,name=context_name,json=contextName,proto3" json:"context_name,omitempty"`
}

func (x *QueryEventsRequest) Reset() {
	*x = QueryEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryEventsRequest) ProtoMessage() {}

func (x *QueryEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryEventsRequest.ProtoReflect.Descriptor instead.
func (*QueryEventsRequest) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{18}
}

func (x *QueryEventsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *QueryEventsRequest) GetNumberOfPermits() int64 {
	if x != nil {
		return x.NumberOfPermits
	}
	return 0
}

func (x *QueryEventsRequest) GetLiveEvents() bool {
	if x != nil {
		return x.LiveEvents
	}
	return false
}

func (x *QueryEventsRequest) GetForceReadFromLeader() bool {
	if x != nil {
		return x.ForceReadFromLeader
	}
	return false
}

func (x *QueryEventsRequest) GetQuerySnapshots() bool {
	if x != nil {
		return x.QuerySnapshots
	}
	return false
}

func (x *QueryEventsRequest) GetContextName() string {
	if x != nil {
		return x.ContextName
	}
	return ""
}

// A message describing a response to a Query request
type QueryEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The actual contents of this response
	// Types that are assignable to Data:
	//
	//	*QueryEventsResponse_Columns
	//	*QueryEventsResponse_Row
	//	*QueryEventsResponse_FilesCompleted
	Data isQueryEventsResponse_Data `protobuf_oneof:"data"`
}

func (x *QueryEventsResponse) Reset() {
	*x = QueryEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryEventsResponse) ProtoMessage() {}

func (x *QueryEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryEventsResponse.ProtoReflect.Descriptor instead.
func (*QueryEventsResponse) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{19}
}

func (m *QueryEventsResponse) GetData() isQueryEventsResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *QueryEventsResponse) GetColumns() *ColumnsResponse {
	if x, ok := x.GetData().(*QueryEventsResponse_Columns); ok {
		return x.Columns
	}
	return nil
}

func (x *QueryEventsResponse) GetRow() *RowResponse {
	if x, ok := x.GetData().(*QueryEventsResponse_Row); ok {
		return x.Row
	}
	return nil
}

func (x *QueryEventsResponse) GetFilesCompleted() *Confirmation {
	if x, ok := x.GetData().(*QueryEventsResponse_FilesCompleted); ok {
		return x.FilesCompleted
	}
	return nil
}

type isQueryEventsResponse_Data interface {
	isQueryEventsResponse_Data()
}

type QueryEventsResponse_Columns struct {
	// Provided when the response contains the names of the columns the response contains. This message typically arrives first.
	Columns *ColumnsResponse `protobuf:"bytes,1,opt,name=columns,proto3,oneof"`
}

type QueryEventsResponse_Row struct {
	// Provided when the response message contains results of the Query
	Row *RowResponse `protobuf:"bytes,2,opt,name=row,proto3,oneof"`
}

type QueryEventsResponse_FilesCompleted struct {
	// Provided when all historic events have been included in the query results
	FilesCompleted *Confirmation `protobuf:"bytes,3,opt,name=files_completed,json=filesCompleted,proto3,oneof"`
}

func (*QueryEventsResponse_Columns) isQueryEventsResponse_Data() {}

func (*QueryEventsResponse_Row) isQueryEventsResponse_Data() {}

func (*QueryEventsResponse_FilesCompleted) isQueryEventsResponse_Data() {}

// Message containing the names of the columns returned in a Query
type ColumnsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The names of the columns provided in the query
	Column []string `protobuf:"bytes,1,rep,name=column,proto3" json:"column,omitempty"`
}

func (x *ColumnsResponse) Reset() {
	*x = ColumnsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ColumnsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnsResponse) ProtoMessage() {}

func (x *ColumnsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnsResponse.ProtoReflect.Descriptor instead.
func (*ColumnsResponse) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{20}
}

func (x *ColumnsResponse) GetColumn() []string {
	if x != nil {
		return x.Column
	}
	return nil
}

// Message providing Query Result data
type RowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The values which, when combined, uniquely update this row. Any previously received values with the same identifiers should be replaced with this value
	IdValues []*QueryValue `protobuf:"bytes,1,rep,name=id_values,json=idValues,proto3" json:"id_values,omitempty"`
	// The sorting values to use when sorting this response compared to the others.
	SortValues []*QueryValue `protobuf:"bytes,2,rep,name=sort_values,json=sortValues,proto3" json:"sort_values,omitempty"`
	// The actual data values for each of the columns, as a column name -> value mapping
	Values map[string]*QueryValue `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RowResponse) Reset() {
	*x = RowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RowResponse) ProtoMessage() {}

func (x *RowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RowResponse.ProtoReflect.Descriptor instead.
func (*RowResponse) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{21}
}

func (x *RowResponse) GetIdValues() []*QueryValue {
	if x != nil {
		return x.IdValues
	}
	return nil
}

func (x *RowResponse) GetSortValues() []*QueryValue {
	if x != nil {
		return x.SortValues
	}
	return nil
}

func (x *RowResponse) GetValues() map[string]*QueryValue {
	if x != nil {
		return x.Values
	}
	return nil
}

// Describes the combination of an Aggregate Identifier and first expected Sequence number when opening an Aggregate-specific Event Stream
type ReadHighestSequenceNrRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Identifier of the Aggregate for which to load events
	AggregateId string `protobuf:"bytes,1,opt,name=aggregate_id,json=aggregateId,proto3" json:"aggregate_id,omitempty"`
	// The Sequence Number of the first event expected
	FromSequenceNr int64 `protobuf:"varint,3,opt,name=from_sequence_nr,json=fromSequenceNr,proto3" json:"from_sequence_nr,omitempty"`
}

func (x *ReadHighestSequenceNrRequest) Reset() {
	*x = ReadHighestSequenceNrRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadHighestSequenceNrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadHighestSequenceNrRequest) ProtoMessage() {}

func (x *ReadHighestSequenceNrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadHighestSequenceNrRequest.ProtoReflect.Descriptor instead.
func (*ReadHighestSequenceNrRequest) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{22}
}

func (x *ReadHighestSequenceNrRequest) GetAggregateId() string {
	if x != nil {
		return x.AggregateId
	}
	return ""
}

func (x *ReadHighestSequenceNrRequest) GetFromSequenceNr() int64 {
	if x != nil {
		return x.FromSequenceNr
	}
	return 0
}

// The highest Sequence Number found for the provided request
type ReadHighestSequenceNrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sequence number of the latest event
	ToSequenceNr int64 `protobuf:"varint,1,opt,name=to_sequence_nr,json=toSequenceNr,proto3" json:"to_sequence_nr,omitempty"`
}

func (x *ReadHighestSequenceNrResponse) Reset() {
	*x = ReadHighestSequenceNrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadHighestSequenceNrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadHighestSequenceNrResponse) ProtoMessage() {}

func (x *ReadHighestSequenceNrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadHighestSequenceNrResponse.ProtoReflect.Descriptor instead.
func (*ReadHighestSequenceNrResponse) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{23}
}

func (x *ReadHighestSequenceNrResponse) GetToSequenceNr() int64 {
	if x != nil {
		return x.ToSequenceNr
	}
	return 0
}

// A confirmation to a request from the client
type Confirmation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True when successful, otherwise false
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *Confirmation) Reset() {
	*x = Confirmation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Confirmation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Confirmation) ProtoMessage() {}

func (x *Confirmation) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Confirmation.ProtoReflect.Descriptor instead.
func (*Confirmation) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{24}
}

func (x *Confirmation) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Request describing the desire to read events for a specific Aggregate
type GetAggregateEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier of the aggregate to read events for
	AggregateId string `protobuf:"bytes,1,opt,name=aggregate_id,json=aggregateId,proto3" json:"aggregate_id,omitempty"`
	// The sequence number of the first event to receive
	InitialSequence int64 `protobuf:"varint,2,opt,name=initial_sequence,json=initialSequence,proto3" json:"initial_sequence,omitempty"`
	// Whether a snapshot may be returned as first element in the stream
	AllowSnapshots bool `protobuf:"varint,3,opt,name=allow_snapshots,json=allowSnapshots,proto3" json:"allow_snapshots,omitempty"`
	// The maximum sequence number (inclusive) of the events to retrieve, 0 means up to last event
	MaxSequence int64 `protobuf:"varint,4,opt,name=max_sequence,json=maxSequence,proto3" json:"max_sequence,omitempty"`
	// Hint for a minimum token to search events from
	MinToken int64 `protobuf:"varint,5,opt,name=min_token,json=minToken,proto3" json:"min_token,omitempty"`
}

func (x *GetAggregateEventsRequest) Reset() {
	*x = GetAggregateEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAggregateEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggregateEventsRequest) ProtoMessage() {}

func (x *GetAggregateEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggregateEventsRequest.ProtoReflect.Descriptor instead.
func (*GetAggregateEventsRequest) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{25}
}

func (x *GetAggregateEventsRequest) GetAggregateId() string {
	if x != nil {
		return x.AggregateId
	}
	return ""
}

func (x *GetAggregateEventsRequest) GetInitialSequence() int64 {
	if x != nil {
		return x.InitialSequence
	}
	return 0
}

func (x *GetAggregateEventsRequest) GetAllowSnapshots() bool {
	if x != nil {
		return x.AllowSnapshots
	}
	return false
}

func (x *GetAggregateEventsRequest) GetMaxSequence() int64 {
	if x != nil {
		return x.MaxSequence
	}
	return 0
}

func (x *GetAggregateEventsRequest) GetMinToken() int64 {
	if x != nil {
		return x.MinToken
	}
	return 0
}

// Request message to retrieve Snapshot Events for a specific Aggregate instance
type GetAggregateSnapshotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The identifier to fetch the snapshots for
	AggregateId string `protobuf:"bytes,1,opt,name=aggregate_id,json=aggregateId,proto3" json:"aggregate_id,omitempty"`
	// The minimal sequence number of the snapshots to retrieve
	InitialSequence int64 `protobuf:"varint,2,opt,name=initial_sequence,json=initialSequence,proto3" json:"initial_sequence,omitempty"`
	// The maximum sequence number of the snapshots to retrieve
	MaxSequence int64 `protobuf:"varint,3,opt,name=max_sequence,json=maxSequence,proto3" json:"max_sequence,omitempty"`
	// The maximum number of results to stream
	MaxResults int32 `protobuf:"varint,4,opt,name=max_results,json=maxResults,proto3" json:"max_results,omitempty"`
}

func (x *GetAggregateSnapshotsRequest) Reset() {
	*x = GetAggregateSnapshotsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAggregateSnapshotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAggregateSnapshotsRequest) ProtoMessage() {}

func (x *GetAggregateSnapshotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAggregateSnapshotsRequest.ProtoReflect.Descriptor instead.
func (*GetAggregateSnapshotsRequest) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{26}
}

func (x *GetAggregateSnapshotsRequest) GetAggregateId() string {
	if x != nil {
		return x.AggregateId
	}
	return ""
}

func (x *GetAggregateSnapshotsRequest) GetInitialSequence() int64 {
	if x != nil {
		return x.InitialSequence
	}
	return 0
}

func (x *GetAggregateSnapshotsRequest) GetMaxSequence() int64 {
	if x != nil {
		return x.MaxSequence
	}
	return 0
}

func (x *GetAggregateSnapshotsRequest) GetMaxResults() int32 {
	if x != nil {
		return x.MaxResults
	}
	return 0
}

// Request message to open an Event Stream from the Event Store.
type GetEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The token to start streaming from
	TrackingToken int64 `protobuf:"varint,1,opt,name=tracking_token,json=trackingToken,proto3" json:"tracking_token,omitempty"`
	// The number of messages the server may send before it needs to wait for more permits
	NumberOfPermits int64 `protobuf:"varint,2,opt,name=number_of_permits,json=numberOfPermits,proto3" json:"number_of_permits,omitempty"`
	// The unique identifier of this client instance. Used for monitoring.
	ClientId string `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// The component name of this client instance. Used for monitoring.
	ComponentName string `protobuf:"bytes,4,opt,name=component_name,json=componentName,proto3" json:"component_name,omitempty"`
	// The name of the processor requesting this stream. Used for monitoring.
	Processor string `protobuf:"bytes,5,opt,name=processor,proto3" json:"processor,omitempty"`
	// An enumeration of payload types that need to be blacklisted. The Server will stop sending messages of these
	// types in order to reduce I/O. Note that the Server may occasionally send a blacklisted message to prevent
	// time-outs and stale tokens on clients.
	Blacklist []*PayloadDescription `protobuf:"bytes,6,rep,name=blacklist,proto3" json:"blacklist,omitempty"`
	// Indicates whether to force reading events from the leader node of an Axon Server. Forcing reads from leader
	// reduces the staleness of the data read, but also puts extra burden on the leader, reducing overall scalability.
	// <p>
	// This property has no effect on connections to AxonServer SE.
	// </p>
	ForceReadFromLeader bool `protobuf:"varint,7,opt,name=force_read_from_leader,json=forceReadFromLeader,proto3" json:"force_read_from_leader,omitempty"`
}

func (x *GetEventsRequest) Reset() {
	*x = GetEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventsRequest) ProtoMessage() {}

func (x *GetEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventsRequest.ProtoReflect.Descriptor instead.
func (*GetEventsRequest) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{27}
}

func (x *GetEventsRequest) GetTrackingToken() int64 {
	if x != nil {
		return x.TrackingToken
	}
	return 0
}

func (x *GetEventsRequest) GetNumberOfPermits() int64 {
	if x != nil {
		return x.NumberOfPermits
	}
	return 0
}

func (x *GetEventsRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *GetEventsRequest) GetComponentName() string {
	if x != nil {
		return x.ComponentName
	}
	return ""
}

func (x *GetEventsRequest) GetProcessor() string {
	if x != nil {
		return x.Processor
	}
	return ""
}

func (x *GetEventsRequest) GetBlacklist() []*PayloadDescription {
	if x != nil {
		return x.Blacklist
	}
	return nil
}

func (x *GetEventsRequest) GetForceReadFromLeader() bool {
	if x != nil {
		return x.ForceReadFromLeader
	}
	return false
}

// Message containing the information of an Event
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of this event
	MessageIdentifier string `protobuf:"bytes,1,opt,name=message_identifier,json=messageIdentifier,proto3" json:"message_identifier,omitempty"`
	// The identifier of the Aggregate instance that published this event, if any
	AggregateIdentifier string `protobuf:"bytes,2,opt,name=aggregate_identifier,json=aggregateIdentifier,proto3" json:"aggregate_identifier,omitempty"`
	// The sequence number of the Event in the Aggregate instance that published it, if any
	AggregateSequenceNumber int64 `protobuf:"varint,3,opt,name=aggregate_sequence_number,json=aggregateSequenceNumber,proto3" json:"aggregate_sequence_number,omitempty"`
	// The Type of the Aggregate instance that published this Event, if any
	AggregateType string `protobuf:"bytes,4,opt,name=aggregate_type,json=aggregateType,proto3" json:"aggregate_type,omitempty"`
	// The timestamp of the Event
	Timestamp int64 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The Payload of the Event
	Payload *SerializedObject `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
	// The Meta Data of the Event
	MetaData map[string]*MetaDataValue `protobuf:"bytes,7,rep,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Flag indicating whether the Event is a snapshot Event
	Snapshot bool `protobuf:"varint,8,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{28}
}

func (x *Event) GetMessageIdentifier() string {
	if x != nil {
		return x.MessageIdentifier
	}
	return ""
}

func (x *Event) GetAggregateIdentifier() string {
	if x != nil {
		return x.AggregateIdentifier
	}
	return ""
}

func (x *Event) GetAggregateSequenceNumber() int64 {
	if x != nil {
		return x.AggregateSequenceNumber
	}
	return 0
}

func (x *Event) GetAggregateType() string {
	if x != nil {
		return x.AggregateType
	}
	return ""
}

func (x *Event) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Event) GetPayload() *SerializedObject {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Event) GetMetaData() map[string]*MetaDataValue {
	if x != nil {
		return x.MetaData
	}
	return nil
}

func (x *Event) GetSnapshot() bool {
	if x != nil {
		return x.Snapshot
	}
	return false
}

// Value used in Query Responses to represent a value in its original type
type QueryValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The actual value, which can be one of string, 64 bit signed integer, boolean or 64 bits floating point
	// Types that are assignable to Data:
	//
	//	*QueryValue_TextValue
	//	*QueryValue_NumberValue
	//	*QueryValue_BooleanValue
	//	*QueryValue_DoubleValue
	Data isQueryValue_Data `protobuf_oneof:"data"`
}

func (x *QueryValue) Reset() {
	*x = QueryValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryValue) ProtoMessage() {}

func (x *QueryValue) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryValue.ProtoReflect.Descriptor instead.
func (*QueryValue) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{29}
}

func (m *QueryValue) GetData() isQueryValue_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *QueryValue) GetTextValue() string {
	if x, ok := x.GetData().(*QueryValue_TextValue); ok {
		return x.TextValue
	}
	return ""
}

func (x *QueryValue) GetNumberValue() int64 {
	if x, ok := x.GetData().(*QueryValue_NumberValue); ok {
		return x.NumberValue
	}
	return 0
}

func (x *QueryValue) GetBooleanValue() bool {
	if x, ok := x.GetData().(*QueryValue_BooleanValue); ok {
		return x.BooleanValue
	}
	return false
}

func (x *QueryValue) GetDoubleValue() float64 {
	if x, ok := x.GetData().(*QueryValue_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

type isQueryValue_Data interface {
	isQueryValue_Data()
}

type QueryValue_TextValue struct {
	// The text value
	TextValue string `protobuf:"bytes,1,opt,name=text_value,json=textValue,proto3,oneof"`
}

type QueryValue_NumberValue struct {
	// The (64 bits) integer value
	NumberValue int64 `protobuf:"zigzag64,2,opt,name=number_value,json=numberValue,proto3,oneof"`
}

type QueryValue_BooleanValue struct {
	// The boolean value
	BooleanValue bool `protobuf:"varint,3,opt,name=boolean_value,json=booleanValue,proto3,oneof"`
}

type QueryValue_DoubleValue struct {
	// The (64 bits) floating point value
	DoubleValue float64 `protobuf:"fixed64,4,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

func (*QueryValue_TextValue) isQueryValue_Data() {}

func (*QueryValue_NumberValue) isQueryValue_Data() {}

func (*QueryValue_BooleanValue) isQueryValue_Data() {}

func (*QueryValue_DoubleValue) isQueryValue_Data() {}

// Description of a Payload Type
type PayloadDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type identifier of the Payload
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// The revision of the Payload Type
	Revision string `protobuf:"bytes,2,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *PayloadDescription) Reset() {
	*x = PayloadDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayloadDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayloadDescription) ProtoMessage() {}

func (x *PayloadDescription) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayloadDescription.ProtoReflect.Descriptor instead.
func (*PayloadDescription) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{30}
}

func (x *PayloadDescription) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PayloadDescription) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

var File_event_proto protoreflect.FileDescriptor

var file_event_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x69,
	0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x13, 0x0a, 0x11, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf5,
	0x02, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x5d, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6f,
	0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x4a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x70,
	0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x0a, 0x1a, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa1, 0x01, 0x0a, 0x1a, 0x41, 0x70, 0x70, 0x6c, 0x79,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f,
	0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xc7, 0x02, 0x0a, 0x10, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5e, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x10, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x58, 0x0a, 0x0d, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61,
	0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f,
	0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x66, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3c,
	0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x24, 0x0a, 0x0c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0x22, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x31, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x6e, 0x0a, 0x14, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x86, 0x01, 0x0a, 0x16, 0x52, 0x65,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e,
	0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x22, 0x33, 0x0a, 0x1b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x25, 0x0a, 0x0d, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x16,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2d, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x22, 0x25, 0x0a, 0x0d,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x64, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3c, 0x0a, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xf8, 0x01, 0x0a, 0x12, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x46, 0x72,
	0x6f, 0x6d, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x87, 0x02, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x07,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x03, 0x72, 0x6f,
	0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f,
	0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x58, 0x0a, 0x0f,
	0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69,
	0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x29,
	0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xdf, 0x02, 0x0a, 0x0b, 0x52, 0x6f,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x69, 0x64, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x69, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78,
	0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x12, 0x50, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78,
	0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x1a, 0x66, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e,
	0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6b, 0x0a, 0x1c, 0x52,
	0x65, 0x61, 0x64, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x6e, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x72, 0x22, 0x45, 0x0a, 0x1d, 0x52, 0x65, 0x61, 0x64,
	0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x5f,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x74, 0x6f, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x72, 0x22,
	0x28, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xb0,
	0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x22, 0xcf, 0x02, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2a, 0x0a,
	0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x51, 0x0a, 0x09, 0x62,
	0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x33,
	0x0a, 0x16, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x61, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x22, 0x87, 0x04, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a,
	0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x14,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x3a, 0x0a, 0x19, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x17, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x45, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78,
	0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x51, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x1a, 0x65, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78,
	0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa6, 0x01,
	0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a,
	0x74, 0x65, 0x78, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x09, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a,
	0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x12, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x6f, 0x6f,
	0x6c, 0x65, 0x61, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x06,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x44, 0x0a, 0x12, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2a, 0x4b, 0x0a, 0x13,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x41, 0x50, 0x50, 0x4c, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x41, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x44, 0x10, 0x03, 0x32, 0xdf, 0x09, 0x0a, 0x0a, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x68, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x65,
	0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f,
	0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a,
	0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00,
	0x28, 0x01, 0x12, 0x69, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x65, 0x6e, 0x64, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x12, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71,
	0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x2d, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x7d, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71,
	0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f,
	0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x83, 0x01, 0x0a,
	0x16, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x3d, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f,
	0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e,
	0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x76, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x31, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f,
	0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e,
	0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x98, 0x01, 0x0a, 0x15, 0x52,
	0x65, 0x61, 0x64, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x4e, 0x72, 0x12, 0x3d, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71,
	0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x48, 0x69, 0x67, 0x68, 0x65,
	0x73, 0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e,
	0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x48, 0x69, 0x67, 0x68, 0x65, 0x73,
	0x74, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71,
	0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x61,
	0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x78, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x35, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e,
	0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x00, 0x12,
	0x76, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69,
	0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x41, 0x74, 0x12, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69,
	0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x41, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x61,
	0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x00, 0x32, 0x8c, 0x03, 0x0a, 0x0e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x12, 0x78,
	0x0a, 0x0d, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x35, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e,
	0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x37, 0x2e, 0x69, 0x6f,
	0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71,
	0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x3c, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b, 0x22, 0x00, 0x32, 0xbb, 0x05, 0x0a, 0x1a, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x0f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71,
	0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x30, 0x01, 0x12, 0x87, 0x01, 0x0a, 0x13, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3b, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78,
	0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f,
	0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b,
	0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x65, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x6e, 0x0a,
	0x13, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71,
	0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x59, 0x0a,
	0x07, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x12, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78,
	0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x30, 0x01, 0x42, 0x0f, 0x50, 0x01, 0x5a, 0x0b, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_event_proto_rawDescOnce sync.Once
	file_event_proto_rawDescData = file_event_proto_rawDesc
)

func file_event_proto_rawDescGZIP() []byte {
	file_event_proto_rawDescOnce.Do(func() {
		file_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_event_proto_rawDescData)
	})
	return file_event_proto_rawDescData
}

var file_event_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_event_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_event_proto_goTypes = []interface{}{
	(TransformationState)(0),              // 0: io.axoniq.axonserver.grpc.event.TransformationState
	(*CompactionRequest)(nil),             // 1: io.axoniq.axonserver.grpc.event.CompactionRequest
	(*Transformation)(nil),                // 2: io.axoniq.axonserver.grpc.event.Transformation
	(*StartTransformationRequest)(nil),    // 3: io.axoniq.axonserver.grpc.event.StartTransformationRequest
	(*ApplyTransformationRequest)(nil),    // 4: io.axoniq.axonserver.grpc.event.ApplyTransformationRequest
	(*TransformRequest)(nil),              // 5: io.axoniq.axonserver.grpc.event.TransformRequest
	(*TransformedEvent)(nil),              // 6: io.axoniq.axonserver.grpc.event.TransformedEvent
	(*DeletedEvent)(nil),                  // 7: io.axoniq.axonserver.grpc.event.DeletedEvent
	(*TransformationId)(nil),              // 8: io.axoniq.axonserver.grpc.event.TransformationId
	(*TransformRequestAck)(nil),           // 9: io.axoniq.axonserver.grpc.event.TransformRequestAck
	(*ScheduleEventRequest)(nil),          // 10: io.axoniq.axonserver.grpc.event.ScheduleEventRequest
	(*RescheduleEventRequest)(nil),        // 11: io.axoniq.axonserver.grpc.event.RescheduleEventRequest
	(*CancelScheduledEventRequest)(nil),   // 12: io.axoniq.axonserver.grpc.event.CancelScheduledEventRequest
	(*ScheduleToken)(nil),                 // 13: io.axoniq.axonserver.grpc.event.ScheduleToken
	(*GetFirstTokenRequest)(nil),          // 14: io.axoniq.axonserver.grpc.event.GetFirstTokenRequest
	(*GetLastTokenRequest)(nil),           // 15: io.axoniq.axonserver.grpc.event.GetLastTokenRequest
	(*GetTokenAtRequest)(nil),             // 16: io.axoniq.axonserver.grpc.event.GetTokenAtRequest
	(*TrackingToken)(nil),                 // 17: io.axoniq.axonserver.grpc.event.TrackingToken
	(*EventWithToken)(nil),                // 18: io.axoniq.axonserver.grpc.event.EventWithToken
	(*QueryEventsRequest)(nil),            // 19: io.axoniq.axonserver.grpc.event.QueryEventsRequest
	(*QueryEventsResponse)(nil),           // 20: io.axoniq.axonserver.grpc.event.QueryEventsResponse
	(*ColumnsResponse)(nil),               // 21: io.axoniq.axonserver.grpc.event.ColumnsResponse
	(*RowResponse)(nil),                   // 22: io.axoniq.axonserver.grpc.event.RowResponse
	(*ReadHighestSequenceNrRequest)(nil),  // 23: io.axoniq.axonserver.grpc.event.ReadHighestSequenceNrRequest
	(*ReadHighestSequenceNrResponse)(nil), // 24: io.axoniq.axonserver.grpc.event.ReadHighestSequenceNrResponse
	(*Confirmation)(nil),                  // 25: io.axoniq.axonserver.grpc.event.Confirmation
	(*GetAggregateEventsRequest)(nil),     // 26: io.axoniq.axonserver.grpc.event.GetAggregateEventsRequest
	(*GetAggregateSnapshotsRequest)(nil),  // 27: io.axoniq.axonserver.grpc.event.GetAggregateSnapshotsRequest
	(*GetEventsRequest)(nil),              // 28: io.axoniq.axonserver.grpc.event.GetEventsRequest
	(*Event)(nil),                         // 29: io.axoniq.axonserver.grpc.event.Event
	(*QueryValue)(nil),                    // 30: io.axoniq.axonserver.grpc.event.QueryValue
	(*PayloadDescription)(nil),            // 31: io.axoniq.axonserver.grpc.event.PayloadDescription
	nil,                                   // 32: io.axoniq.axonserver.grpc.event.RowResponse.ValuesEntry
	nil,                                   // 33: io.axoniq.axonserver.grpc.event.Event.MetaDataEntry
	(*SerializedObject)(nil),              // 34: io.axoniq.axonserver.grpc.SerializedObject
	(*MetaDataValue)(nil),                 // 35: io.axoniq.axonserver.grpc.MetaDataValue
	(*empty.Empty)(nil),                   // 36: google.protobuf.Empty
	(*InstructionAck)(nil),                // 37: io.axoniq.axonserver.grpc.InstructionAck
}
var file_event_proto_depIdxs = []int32{
	8,  // 0: io.axoniq.axonserver.grpc.event.Transformation.transformationId:type_name -> io.axoniq.axonserver.grpc.event.TransformationId
	0,  // 1: io.axoniq.axonserver.grpc.event.Transformation.state:type_name -> io.axoniq.axonserver.grpc.event.TransformationState
	8,  // 2: io.axoniq.axonserver.grpc.event.ApplyTransformationRequest.transformation_id:type_name -> io.axoniq.axonserver.grpc.event.TransformationId
	8,  // 3: io.axoniq.axonserver.grpc.event.TransformRequest.transformation_id:type_name -> io.axoniq.axonserver.grpc.event.TransformationId
	6,  // 4: io.axoniq.axonserver.grpc.event.TransformRequest.replace_event:type_name -> io.axoniq.axonserver.grpc.event.TransformedEvent
	7,  // 5: io.axoniq.axonserver.grpc.event.TransformRequest.delete_event:type_name -> io.axoniq.axonserver.grpc.event.DeletedEvent
	29, // 6: io.axoniq.axonserver.grpc.event.TransformedEvent.event:type_name -> io.axoniq.axonserver.grpc.event.Event
	29, // 7: io.axoniq.axonserver.grpc.event.ScheduleEventRequest.event:type_name -> io.axoniq.axonserver.grpc.event.Event
	29, // 8: io.axoniq.axonserver.grpc.event.RescheduleEventRequest.event:type_name -> io.axoniq.axonserver.grpc.event.Event
	29, // 9: io.axoniq.axonserver.grpc.event.EventWithToken.event:type_name -> io.axoniq.axonserver.grpc.event.Event
	21, // 10: io.axoniq.axonserver.grpc.event.QueryEventsResponse.columns:type_name -> io.axoniq.axonserver.grpc.event.ColumnsResponse
	22, // 11: io.axoniq.axonserver.grpc.event.QueryEventsResponse.row:type_name -> io.axoniq.axonserver.grpc.event.RowResponse
	25, // 12: io.axoniq.axonserver.grpc.event.QueryEventsResponse.files_completed:type_name -> io.axoniq.axonserver.grpc.event.Confirmation
	30, // 13: io.axoniq.axonserver.grpc.event.RowResponse.id_values:type_name -> io.axoniq.axonserver.grpc.event.QueryValue
	30, // 14: io.axoniq.axonserver.grpc.event.RowResponse.sort_values:type_name -> io.axoniq.axonserver.grpc.event.QueryValue
	32, // 15: io.axoniq.axonserver.grpc.event.RowResponse.values:type_name -> io.axoniq.axonserver.grpc.event.RowResponse.ValuesEntry
	31, // 16: io.axoniq.axonserver.grpc.event.GetEventsRequest.blacklist:type_name -> io.axoniq.axonserver.grpc.event.PayloadDescription
	34, // 17: io.axoniq.axonserver.grpc.event.Event.payload:type_name -> io.axoniq.axonserver.grpc.SerializedObject
	33, // 18: io.axoniq.axonserver.grpc.event.Event.meta_data:type_name -> io.axoniq.axonserver.grpc.event.Event.MetaDataEntry
	30, // 19: io.axoniq.axonserver.grpc.event.RowResponse.ValuesEntry.value:type_name -> io.axoniq.axonserver.grpc.event.QueryValue
	35, // 20: io.axoniq.axonserver.grpc.event.Event.MetaDataEntry.value:type_name -> io.axoniq.axonserver.grpc.MetaDataValue
	29, // 21: io.axoniq.axonserver.grpc.event.EventStore.AppendEvent:input_type -> io.axoniq.axonserver.grpc.event.Event
	29, // 22: io.axoniq.axonserver.grpc.event.EventStore.AppendSnapshot:input_type -> io.axoniq.axonserver.grpc.event.Event
	26, // 23: io.axoniq.axonserver.grpc.event.EventStore.ListAggregateEvents:input_type -> io.axoniq.axonserver.grpc.event.GetAggregateEventsRequest
	27, // 24: io.axoniq.axonserver.grpc.event.EventStore.ListAggregateSnapshots:input_type -> io.axoniq.axonserver.grpc.event.GetAggregateSnapshotsRequest
	28, // 25: io.axoniq.axonserver.grpc.event.EventStore.ListEvents:input_type -> io.axoniq.axonserver.grpc.event.GetEventsRequest
	23, // 26: io.axoniq.axonserver.grpc.event.EventStore.ReadHighestSequenceNr:input_type -> io.axoniq.axonserver.grpc.event.ReadHighestSequenceNrRequest
	19, // 27: io.axoniq.axonserver.grpc.event.EventStore.QueryEvents:input_type -> io.axoniq.axonserver.grpc.event.QueryEventsRequest
	14, // 28: io.axoniq.axonserver.grpc.event.EventStore.GetFirstToken:input_type -> io.axoniq.axonserver.grpc.event.GetFirstTokenRequest
	15, // 29: io.axoniq.axonserver.grpc.event.EventStore.GetLastToken:input_type -> io.axoniq.axonserver.grpc.event.GetLastTokenRequest
	16, // 30: io.axoniq.axonserver.grpc.event.EventStore.GetTokenAt:input_type -> io.axoniq.axonserver.grpc.event.GetTokenAtRequest
	10, // 31: io.axoniq.axonserver.grpc.event.EventScheduler.ScheduleEvent:input_type -> io.axoniq.axonserver.grpc.event.ScheduleEventRequest
	11, // 32: io.axoniq.axonserver.grpc.event.EventScheduler.RescheduleEvent:input_type -> io.axoniq.axonserver.grpc.event.RescheduleEventRequest
	12, // 33: io.axoniq.axonserver.grpc.event.EventScheduler.CancelScheduledEvent:input_type -> io.axoniq.axonserver.grpc.event.CancelScheduledEventRequest
	36, // 34: io.axoniq.axonserver.grpc.event.EventTransformationService.Transformations:input_type -> google.protobuf.Empty
	3,  // 35: io.axoniq.axonserver.grpc.event.EventTransformationService.StartTransformation:input_type -> io.axoniq.axonserver.grpc.event.StartTransformationRequest
	5,  // 36: io.axoniq.axonserver.grpc.event.EventTransformationService.TransformEvents:input_type -> io.axoniq.axonserver.grpc.event.TransformRequest
	8,  // 37: io.axoniq.axonserver.grpc.event.EventTransformationService.CancelTransformation:input_type -> io.axoniq.axonserver.grpc.event.TransformationId
	4,  // 38: io.axoniq.axonserver.grpc.event.EventTransformationService.ApplyTransformation:input_type -> io.axoniq.axonserver.grpc.event.ApplyTransformationRequest
	1,  // 39: io.axoniq.axonserver.grpc.event.EventTransformationService.Compact:input_type -> io.axoniq.axonserver.grpc.event.CompactionRequest
	25, // 40: io.axoniq.axonserver.grpc.event.EventStore.AppendEvent:output_type -> io.axoniq.axonserver.grpc.event.Confirmation
	25, // 41: io.axoniq.axonserver.grpc.event.EventStore.AppendSnapshot:output_type -> io.axoniq.axonserver.grpc.event.Confirmation
	29, // 42: io.axoniq.axonserver.grpc.event.EventStore.ListAggregateEvents:output_type -> io.axoniq.axonserver.grpc.event.Event
	29, // 43: io.axoniq.axonserver.grpc.event.EventStore.ListAggregateSnapshots:output_type -> io.axoniq.axonserver.grpc.event.Event
	18, // 44: io.axoniq.axonserver.grpc.event.EventStore.ListEvents:output_type -> io.axoniq.axonserver.grpc.event.EventWithToken
	24, // 45: io.axoniq.axonserver.grpc.event.EventStore.ReadHighestSequenceNr:output_type -> io.axoniq.axonserver.grpc.event.ReadHighestSequenceNrResponse
	20, // 46: io.axoniq.axonserver.grpc.event.EventStore.QueryEvents:output_type -> io.axoniq.axonserver.grpc.event.QueryEventsResponse
	17, // 47: io.axoniq.axonserver.grpc.event.EventStore.GetFirstToken:output_type -> io.axoniq.axonserver.grpc.event.TrackingToken
	17, // 48: io.axoniq.axonserver.grpc.event.EventStore.GetLastToken:output_type -> io.axoniq.axonserver.grpc.event.TrackingToken
	17, // 49: io.axoniq.axonserver.grpc.event.EventStore.GetTokenAt:output_type -> io.axoniq.axonserver.grpc.event.TrackingToken
	13, // 50: io.axoniq.axonserver.grpc.event.EventScheduler.ScheduleEvent:output_type -> io.axoniq.axonserver.grpc.event.ScheduleToken
	13, // 51: io.axoniq.axonserver.grpc.event.EventScheduler.RescheduleEvent:output_type -> io.axoniq.axonserver.grpc.event.ScheduleToken
	37, // 52: io.axoniq.axonserver.grpc.event.EventScheduler.CancelScheduledEvent:output_type -> io.axoniq.axonserver.grpc.InstructionAck
	2,  // 53: io.axoniq.axonserver.grpc.event.EventTransformationService.Transformations:output_type -> io.axoniq.axonserver.grpc.event.Transformation
	8,  // 54: io.axoniq.axonserver.grpc.event.EventTransformationService.StartTransformation:output_type -> io.axoniq.axonserver.grpc.event.TransformationId
	9,  // 55: io.axoniq.axonserver.grpc.event.EventTransformationService.TransformEvents:output_type -> io.axoniq.axonserver.grpc.event.TransformRequestAck
	36, // 56: io.axoniq.axonserver.grpc.event.EventTransformationService.CancelTransformation:output_type -> google.protobuf.Empty
	36, // 57: io.axoniq.axonserver.grpc.event.EventTransformationService.ApplyTransformation:output_type -> google.protobuf.Empty
	36, // 58: io.axoniq.axonserver.grpc.event.EventTransformationService.Compact:output_type -> google.protobuf.Empty
	40, // [40:59] is the sub-list for method output_type
	21, // [21:40] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_event_proto_init() }
func file_event_proto_init() {
	if File_event_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transformation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartTransformationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplyTransformationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransformRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransformedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletedEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransformationId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransformRequestAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RescheduleEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelScheduledEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduleToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFirstTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLastTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTokenAtRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackingToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventWithToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ColumnsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadHighestSequenceNrRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadHighestSequenceNrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Confirmation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAggregateEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAggregateSnapshotsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayloadDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_event_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*TransformRequest_ReplaceEvent)(nil),
		(*TransformRequest_DeleteEvent)(nil),
	}
	file_event_proto_msgTypes[19].OneofWrappers = []interface{}{
		(*QueryEventsResponse_Columns)(nil),
		(*QueryEventsResponse_Row)(nil),
		(*QueryEventsResponse_FilesCompleted)(nil),
	}
	file_event_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*QueryValue_TextValue)(nil),
		(*QueryValue_NumberValue)(nil),
		(*QueryValue_BooleanValue)(nil),
		(*QueryValue_DoubleValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_event_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_event_proto_goTypes,
		DependencyIndexes: file_event_proto_depIdxs,
		EnumInfos:         file_event_proto_enumTypes,
		MessageInfos:      file_event_proto_msgTypes,
	}.Build()
	File_event_proto = out.File
	file_event_proto_rawDesc = nil
	file_event_proto_goTypes = nil
	file_event_proto_depIdxs = nil
}
