// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: admin.proto

package pb

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ContextUpdateType int32

const (
	// new context has been created.
	ContextUpdateType_CREATED ContextUpdateType = 0
	// context has been removed
	ContextUpdateType_DELETED ContextUpdateType = 1
	// context has been updated
	ContextUpdateType_UPDATED ContextUpdateType = 2
)

// Enum value maps for ContextUpdateType.
var (
	ContextUpdateType_name = map[int32]string{
		0: "CREATED",
		1: "DELETED",
		2: "UPDATED",
	}
	ContextUpdateType_value = map[string]int32{
		"CREATED": 0,
		"DELETED": 1,
		"UPDATED": 2,
	}
)

func (x ContextUpdateType) Enum() *ContextUpdateType {
	p := new(ContextUpdateType)
	*p = x
	return p
}

func (x ContextUpdateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContextUpdateType) Descriptor() protoreflect.EnumDescriptor {
	return file_admin_proto_enumTypes[0].Descriptor()
}

func (ContextUpdateType) Type() protoreflect.EnumType {
	return &file_admin_proto_enumTypes[0]
}

func (x ContextUpdateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContextUpdateType.Descriptor instead.
func (ContextUpdateType) EnumDescriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{0}
}

type Role int32

const (
	Role_ROLE_PRIMARY        Role = 0
	Role_ROLE_ACTIVE_BACKUP  Role = 2
	Role_ROLE_PASSIVE_BACKUP Role = 3
	Role_ROLE_MESSAGING_ONLY Role = 4
	Role_ROLE_SECONDARY      Role = 5
)

// Enum value maps for Role.
var (
	Role_name = map[int32]string{
		0: "ROLE_PRIMARY",
		2: "ROLE_ACTIVE_BACKUP",
		3: "ROLE_PASSIVE_BACKUP",
		4: "ROLE_MESSAGING_ONLY",
		5: "ROLE_SECONDARY",
	}
	Role_value = map[string]int32{
		"ROLE_PRIMARY":        0,
		"ROLE_ACTIVE_BACKUP":  2,
		"ROLE_PASSIVE_BACKUP": 3,
		"ROLE_MESSAGING_ONLY": 4,
		"ROLE_SECONDARY":      5,
	}
)

func (x Role) Enum() *Role {
	p := new(Role)
	*p = x
	return p
}

func (x Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Role) Descriptor() protoreflect.EnumDescriptor {
	return file_admin_proto_enumTypes[1].Descriptor()
}

func (Role) Type() protoreflect.EnumType {
	return &file_admin_proto_enumTypes[1]
}

func (x Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Role.Descriptor instead.
func (Role) EnumDescriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{1}
}

type Result int32

const (
	// The handler confirmed that the action was executed successfully
	Result_SUCCESS Result = 0
	// The handler has accepted the result, no result will be returned
	Result_ACCEPTED Result = 1
)

// Enum value maps for Result.
var (
	Result_name = map[int32]string{
		0: "SUCCESS",
		1: "ACCEPTED",
	}
	Result_value = map[string]int32{
		"SUCCESS":  0,
		"ACCEPTED": 1,
	}
)

func (x Result) Enum() *Result {
	p := new(Result)
	*p = x
	return p
}

func (x Result) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Result) Descriptor() protoreflect.EnumDescriptor {
	return file_admin_proto_enumTypes[2].Descriptor()
}

func (Result) Type() protoreflect.EnumType {
	return &file_admin_proto_enumTypes[2]
}

func (x Result) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Result.Descriptor instead.
func (Result) EnumDescriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{2}
}

type CreateContextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ReplicationGroupName string            `protobuf:"bytes,2,opt,name=replicationGroupName,proto3" json:"replicationGroupName,omitempty"`
	MetaData             map[string]string `protobuf:"bytes,3,rep,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateContextRequest) Reset() {
	*x = CreateContextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateContextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateContextRequest) ProtoMessage() {}

func (x *CreateContextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateContextRequest.ProtoReflect.Descriptor instead.
func (*CreateContextRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{0}
}

func (x *CreateContextRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateContextRequest) GetReplicationGroupName() string {
	if x != nil {
		return x.ReplicationGroupName
	}
	return ""
}

func (x *CreateContextRequest) GetMetaData() map[string]string {
	if x != nil {
		return x.MetaData
	}
	return nil
}

type UpdateContextPropertiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MetaData map[string]string `protobuf:"bytes,3,rep,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateContextPropertiesRequest) Reset() {
	*x = UpdateContextPropertiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateContextPropertiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateContextPropertiesRequest) ProtoMessage() {}

func (x *UpdateContextPropertiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateContextPropertiesRequest.ProtoReflect.Descriptor instead.
func (*UpdateContextPropertiesRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateContextPropertiesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateContextPropertiesRequest) GetMetaData() map[string]string {
	if x != nil {
		return x.MetaData
	}
	return nil
}

type DeleteContextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PreserveEventStore bool   `protobuf:"varint,2,opt,name=preserveEventStore,proto3" json:"preserveEventStore,omitempty"`
}

func (x *DeleteContextRequest) Reset() {
	*x = DeleteContextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteContextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteContextRequest) ProtoMessage() {}

func (x *DeleteContextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteContextRequest.ProtoReflect.Descriptor instead.
func (*DeleteContextRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteContextRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteContextRequest) GetPreserveEventStore() bool {
	if x != nil {
		return x.PreserveEventStore
	}
	return false
}

type GetContextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetContextRequest) Reset() {
	*x = GetContextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetContextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetContextRequest) ProtoMessage() {}

func (x *GetContextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetContextRequest.ProtoReflect.Descriptor instead.
func (*GetContextRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{3}
}

func (x *GetContextRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ContextOverview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ReplicationGroup *ReplicationGroupOverview `protobuf:"bytes,2,opt,name=replicationGroup,proto3" json:"replicationGroup,omitempty"`
	MetaData         map[string]string         `protobuf:"bytes,3,rep,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PendingSince     int64                     `protobuf:"varint,4,opt,name=pendingSince,proto3" json:"pendingSince,omitempty"`
	ChangePending    bool                      `protobuf:"varint,5,opt,name=changePending,proto3" json:"changePending,omitempty"`
}

func (x *ContextOverview) Reset() {
	*x = ContextOverview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextOverview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextOverview) ProtoMessage() {}

func (x *ContextOverview) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextOverview.ProtoReflect.Descriptor instead.
func (*ContextOverview) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{4}
}

func (x *ContextOverview) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContextOverview) GetReplicationGroup() *ReplicationGroupOverview {
	if x != nil {
		return x.ReplicationGroup
	}
	return nil
}

func (x *ContextOverview) GetMetaData() map[string]string {
	if x != nil {
		return x.MetaData
	}
	return nil
}

func (x *ContextOverview) GetPendingSince() int64 {
	if x != nil {
		return x.PendingSince
	}
	return 0
}

func (x *ContextOverview) GetChangePending() bool {
	if x != nil {
		return x.ChangePending
	}
	return false
}

type ContextUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context string            `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Type    ContextUpdateType `protobuf:"varint,2,opt,name=type,proto3,enum=io.axoniq.axonserver.grpc.admin.ContextUpdateType" json:"type,omitempty"`
}

func (x *ContextUpdate) Reset() {
	*x = ContextUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextUpdate) ProtoMessage() {}

func (x *ContextUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextUpdate.ProtoReflect.Descriptor instead.
func (*ContextUpdate) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{5}
}

func (x *ContextUpdate) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *ContextUpdate) GetType() ContextUpdateType {
	if x != nil {
		return x.Type
	}
	return ContextUpdateType_CREATED
}

type CreateReplicationGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Members       []*ReplicationGroupMember `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
	PendingSince  int64                     `protobuf:"varint,3,opt,name=pendingSince,proto3" json:"pendingSince,omitempty"`
	ChangePending bool                      `protobuf:"varint,4,opt,name=changePending,proto3" json:"changePending,omitempty"`
}

func (x *CreateReplicationGroupRequest) Reset() {
	*x = CreateReplicationGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReplicationGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReplicationGroupRequest) ProtoMessage() {}

func (x *CreateReplicationGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReplicationGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateReplicationGroupRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{6}
}

func (x *CreateReplicationGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateReplicationGroupRequest) GetMembers() []*ReplicationGroupMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *CreateReplicationGroupRequest) GetPendingSince() int64 {
	if x != nil {
		return x.PendingSince
	}
	return 0
}

func (x *CreateReplicationGroupRequest) GetChangePending() bool {
	if x != nil {
		return x.ChangePending
	}
	return false
}

type ReplicationGroupOverview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Members       []*ReplicationGroupMember `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
	PendingSince  int64                     `protobuf:"varint,3,opt,name=pendingSince,proto3" json:"pendingSince,omitempty"`
	ChangePending bool                      `protobuf:"varint,4,opt,name=changePending,proto3" json:"changePending,omitempty"`
	Contexts      []string                  `protobuf:"bytes,5,rep,name=contexts,proto3" json:"contexts,omitempty"`
}

func (x *ReplicationGroupOverview) Reset() {
	*x = ReplicationGroupOverview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicationGroupOverview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationGroupOverview) ProtoMessage() {}

func (x *ReplicationGroupOverview) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationGroupOverview.ProtoReflect.Descriptor instead.
func (*ReplicationGroupOverview) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{7}
}

func (x *ReplicationGroupOverview) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReplicationGroupOverview) GetMembers() []*ReplicationGroupMember {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *ReplicationGroupOverview) GetPendingSince() int64 {
	if x != nil {
		return x.PendingSince
	}
	return 0
}

func (x *ReplicationGroupOverview) GetChangePending() bool {
	if x != nil {
		return x.ChangePending
	}
	return false
}

func (x *ReplicationGroupOverview) GetContexts() []string {
	if x != nil {
		return x.Contexts
	}
	return nil
}

type DeleteReplicationGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name               string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PreserveEventStore bool   `protobuf:"varint,2,opt,name=preserveEventStore,proto3" json:"preserveEventStore,omitempty"`
}

func (x *DeleteReplicationGroupRequest) Reset() {
	*x = DeleteReplicationGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReplicationGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReplicationGroupRequest) ProtoMessage() {}

func (x *DeleteReplicationGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReplicationGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteReplicationGroupRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteReplicationGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteReplicationGroupRequest) GetPreserveEventStore() bool {
	if x != nil {
		return x.PreserveEventStore
	}
	return false
}

type ReplicationGroupMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeName      string `protobuf:"bytes,1,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	Host          string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port          int32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Role          Role  `protobuf:"varint,4,opt,name=role,proto3,enum=io.axoniq.axonserver.grpc.admin.Role" json:"role,omitempty"`
	PendingDelete bool  `protobuf:"varint,5,opt,name=pendingDelete,proto3" json:"pendingDelete,omitempty"`
}

func (x *ReplicationGroupMember) Reset() {
	*x = ReplicationGroupMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicationGroupMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationGroupMember) ProtoMessage() {}

func (x *ReplicationGroupMember) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationGroupMember.ProtoReflect.Descriptor instead.
func (*ReplicationGroupMember) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{9}
}

func (x *ReplicationGroupMember) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *ReplicationGroupMember) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ReplicationGroupMember) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ReplicationGroupMember) GetRole() Role {
	if x != nil {
		return x.Role
	}
	return Role_ROLE_PRIMARY
}

func (x *ReplicationGroupMember) GetPendingDelete() bool {
	if x != nil {
		return x.PendingDelete
	}
	return false
}

type GetReplicationGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetReplicationGroupRequest) Reset() {
	*x = GetReplicationGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReplicationGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReplicationGroupRequest) ProtoMessage() {}

func (x *GetReplicationGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReplicationGroupRequest.ProtoReflect.Descriptor instead.
func (*GetReplicationGroupRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{10}
}

func (x *GetReplicationGroupRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type JoinReplicationGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicationGroupName string `protobuf:"bytes,1,opt,name=replication_group_name,json=replicationGroupName,proto3" json:"replication_group_name,omitempty"`
	NodeName string `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	Role     Role   `protobuf:"varint,3,opt,name=role,proto3,enum=io.axoniq.axonserver.grpc.admin.Role" json:"role,omitempty"`
}

func (x *JoinReplicationGroup) Reset() {
	*x = JoinReplicationGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinReplicationGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinReplicationGroup) ProtoMessage() {}

func (x *JoinReplicationGroup) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinReplicationGroup.ProtoReflect.Descriptor instead.
func (*JoinReplicationGroup) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{11}
}

func (x *JoinReplicationGroup) GetReplicationGroupName() string {
	if x != nil {
		return x.ReplicationGroupName
	}
	return ""
}

func (x *JoinReplicationGroup) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *JoinReplicationGroup) GetRole() Role {
	if x != nil {
		return x.Role
	}
	return Role_ROLE_PRIMARY
}

type LeaveReplicationGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicationGroupName string `protobuf:"bytes,1,opt,name=replication_group_name,json=replicationGroupName,proto3" json:"replication_group_name,omitempty"`
	NodeName             string `protobuf:"bytes,2,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	PreserveEventStore   bool   `protobuf:"varint,3,opt,name=preserveEventStore,proto3" json:"preserveEventStore,omitempty"`
}

func (x *LeaveReplicationGroup) Reset() {
	*x = LeaveReplicationGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveReplicationGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveReplicationGroup) ProtoMessage() {}

func (x *LeaveReplicationGroup) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveReplicationGroup.ProtoReflect.Descriptor instead.
func (*LeaveReplicationGroup) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{12}
}

func (x *LeaveReplicationGroup) GetReplicationGroupName() string {
	if x != nil {
		return x.ReplicationGroupName
	}
	return ""
}

func (x *LeaveReplicationGroup) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *LeaveReplicationGroup) GetPreserveEventStore() bool {
	if x != nil {
		return x.PreserveEventStore
	}
	return false
}

type ReplicationGroupContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplicationGroupName string            `protobuf:"bytes,1,opt,name=replication_group_name,json=replicationGroupName,proto3" json:"replication_group_name,omitempty"`
	ContextName          string            `protobuf:"bytes,2,opt,name=context_name,json=contextName,proto3" json:"context_name,omitempty"`
	MetaData             map[string]string `protobuf:"bytes,3,rep,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ReplicationGroupContext) Reset() {
	*x = ReplicationGroupContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicationGroupContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationGroupContext) ProtoMessage() {}

func (x *ReplicationGroupContext) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationGroupContext.ProtoReflect.Descriptor instead.
func (*ReplicationGroupContext) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{13}
}

func (x *ReplicationGroupContext) GetReplicationGroupName() string {
	if x != nil {
		return x.ReplicationGroupName
	}
	return ""
}

func (x *ReplicationGroupContext) GetContextName() string {
	if x != nil {
		return x.ContextName
	}
	return ""
}

func (x *ReplicationGroupContext) GetMetaData() map[string]string {
	if x != nil {
		return x.MetaData
	}
	return nil
}

type ApplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationName string                    `protobuf:"bytes,1,opt,name=applicationName,proto3" json:"applicationName,omitempty"`
	Description     string                    `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Token           string                    `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
	RolesPerContext []*ApplicationContextRole `protobuf:"bytes,4,rep,name=rolesPerContext,proto3" json:"rolesPerContext,omitempty"`
	MetaData        map[string]string         `protobuf:"bytes,5,rep,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ApplicationRequest) Reset() {
	*x = ApplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationRequest) ProtoMessage() {}

func (x *ApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationRequest.ProtoReflect.Descriptor instead.
func (*ApplicationRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{14}
}

func (x *ApplicationRequest) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *ApplicationRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ApplicationRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ApplicationRequest) GetRolesPerContext() []*ApplicationContextRole {
	if x != nil {
		return x.RolesPerContext
	}
	return nil
}

func (x *ApplicationRequest) GetMetaData() map[string]string {
	if x != nil {
		return x.MetaData
	}
	return nil
}

type ApplicationContextRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context string   `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Roles   []string `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
}

func (x *ApplicationContextRole) Reset() {
	*x = ApplicationContextRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationContextRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationContextRole) ProtoMessage() {}

func (x *ApplicationContextRole) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationContextRole.ProtoReflect.Descriptor instead.
func (*ApplicationContextRole) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{15}
}

func (x *ApplicationContextRole) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *ApplicationContextRole) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

type Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *Token) Reset() {
	*x = Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Token) ProtoMessage() {}

func (x *Token) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Token.ProtoReflect.Descriptor instead.
func (*Token) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{16}
}

func (x *Token) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ApplicationId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationName string `protobuf:"bytes,1,opt,name=applicationName,proto3" json:"applicationName,omitempty"`
}

func (x *ApplicationId) Reset() {
	*x = ApplicationId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationId) ProtoMessage() {}

func (x *ApplicationId) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationId.ProtoReflect.Descriptor instead.
func (*ApplicationId) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{17}
}

func (x *ApplicationId) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

type ApplicationOverview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationName string                    `protobuf:"bytes,1,opt,name=applicationName,proto3" json:"applicationName,omitempty"`
	Description     string                    `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	RolesPerContext []*ApplicationContextRole `protobuf:"bytes,3,rep,name=rolesPerContext,proto3" json:"rolesPerContext,omitempty"`
	MetaData        map[string]string         `protobuf:"bytes,4,rep,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ApplicationOverview) Reset() {
	*x = ApplicationOverview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationOverview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationOverview) ProtoMessage() {}

func (x *ApplicationOverview) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationOverview.ProtoReflect.Descriptor instead.
func (*ApplicationOverview) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{18}
}

func (x *ApplicationOverview) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *ApplicationOverview) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ApplicationOverview) GetRolesPerContext() []*ApplicationContextRole {
	if x != nil {
		return x.RolesPerContext
	}
	return nil
}

func (x *ApplicationOverview) GetMetaData() map[string]string {
	if x != nil {
		return x.MetaData
	}
	return nil
}

type ContextId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContextName string `protobuf:"bytes,1,opt,name=contextName,proto3" json:"contextName,omitempty"`
}

func (x *ContextId) Reset() {
	*x = ContextId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextId) ProtoMessage() {}

func (x *ContextId) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextId.ProtoReflect.Descriptor instead.
func (*ContextId) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{19}
}

func (x *ContextId) GetContextName() string {
	if x != nil {
		return x.ContextName
	}
	return ""
}

type ConnectedApplicationOverview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes        []string             `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Applications []*ClientApplication `protobuf:"bytes,2,rep,name=applications,proto3" json:"applications,omitempty"`
}

func (x *ConnectedApplicationOverview) Reset() {
	*x = ConnectedApplicationOverview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectedApplicationOverview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectedApplicationOverview) ProtoMessage() {}

func (x *ConnectedApplicationOverview) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectedApplicationOverview.ProtoReflect.Descriptor instead.
func (*ConnectedApplicationOverview) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{20}
}

func (x *ConnectedApplicationOverview) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *ConnectedApplicationOverview) GetApplications() []*ClientApplication {
	if x != nil {
		return x.Applications
	}
	return nil
}

type ClientApplication struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Clients  []*Client    `protobuf:"bytes,2,rep,name=clients,proto3" json:"clients,omitempty"`
	Commands []string     `protobuf:"bytes,3,rep,name=commands,proto3" json:"commands,omitempty"`
	Queries  []*QueryInfo `protobuf:"bytes,4,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (x *ClientApplication) Reset() {
	*x = ClientApplication{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientApplication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientApplication) ProtoMessage() {}

func (x *ClientApplication) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientApplication.ProtoReflect.Descriptor instead.
func (*ClientApplication) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{21}
}

func (x *ClientApplication) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ClientApplication) GetClients() []*Client {
	if x != nil {
		return x.Clients
	}
	return nil
}

func (x *ClientApplication) GetCommands() []string {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *ClientApplication) GetQueries() []*QueryInfo {
	if x != nil {
		return x.Queries
	}
	return nil
}

type Client struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Node       string                `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	Processors []*EventProcessorInfo `protobuf:"bytes,3,rep,name=processors,proto3" json:"processors,omitempty"`
}

func (x *Client) Reset() {
	*x = Client{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Client) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Client) ProtoMessage() {}

func (x *Client) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Client.ProtoReflect.Descriptor instead.
func (*Client) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{22}
}

func (x *Client) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Client) GetNode() string {
	if x != nil {
		return x.Node
	}
	return ""
}

func (x *Client) GetProcessors() []*EventProcessorInfo {
	if x != nil {
		return x.Processors
	}
	return nil
}

type QueryInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request       string   `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	ResponseTypes []string `protobuf:"bytes,2,rep,name=responseTypes,proto3" json:"responseTypes,omitempty"`
}

func (x *QueryInfo) Reset() {
	*x = QueryInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryInfo) ProtoMessage() {}

func (x *QueryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryInfo.ProtoReflect.Descriptor instead.
func (*QueryInfo) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{23}
}

func (x *QueryInfo) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

func (x *QueryInfo) GetResponseTypes() []string {
	if x != nil {
		return x.ResponseTypes
	}
	return nil
}

type CreateOrUpdateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName  string             `protobuf:"bytes,1,opt,name=userName,proto3" json:"userName,omitempty"`
	Password  string             `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	UserRoles []*UserRoleRequest `protobuf:"bytes,3,rep,name=userRoles,proto3" json:"userRoles,omitempty"`
}

func (x *CreateOrUpdateUserRequest) Reset() {
	*x = CreateOrUpdateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrUpdateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrUpdateUserRequest) ProtoMessage() {}

func (x *CreateOrUpdateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrUpdateUserRequest.ProtoReflect.Descriptor instead.
func (*CreateOrUpdateUserRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{24}
}

func (x *CreateOrUpdateUserRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *CreateOrUpdateUserRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateOrUpdateUserRequest) GetUserRoles() []*UserRoleRequest {
	if x != nil {
		return x.UserRoles
	}
	return nil
}

type DeleteUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName string `protobuf:"bytes,1,opt,name=userName,proto3" json:"userName,omitempty"`
}

func (x *DeleteUserRequest) Reset() {
	*x = DeleteUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserRequest) ProtoMessage() {}

func (x *DeleteUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{25}
}

func (x *DeleteUserRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

type UserRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role    string `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	Context string `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *UserRoleRequest) Reset() {
	*x = UserRoleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRoleRequest) ProtoMessage() {}

func (x *UserRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRoleRequest.ProtoReflect.Descriptor instead.
func (*UserRoleRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{26}
}

func (x *UserRoleRequest) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *UserRoleRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

type UserRoleOverview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role    string `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	Context string `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *UserRoleOverview) Reset() {
	*x = UserRoleOverview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRoleOverview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRoleOverview) ProtoMessage() {}

func (x *UserRoleOverview) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRoleOverview.ProtoReflect.Descriptor instead.
func (*UserRoleOverview) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{27}
}

func (x *UserRoleOverview) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *UserRoleOverview) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

type UserOverview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName  string              `protobuf:"bytes,1,opt,name=userName,proto3" json:"userName,omitempty"`
	Enabled   bool                `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	UserRoles []*UserRoleOverview `protobuf:"bytes,3,rep,name=userRoles,proto3" json:"userRoles,omitempty"`
}

func (x *UserOverview) Reset() {
	*x = UserOverview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserOverview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserOverview) ProtoMessage() {}

func (x *UserOverview) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserOverview.ProtoReflect.Descriptor instead.
func (*UserOverview) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{28}
}

func (x *UserOverview) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserOverview) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *UserOverview) GetUserRoles() []*UserRoleOverview {
	if x != nil {
		return x.UserRoles
	}
	return nil
}

type AdminActionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result Result `protobuf:"varint,1,opt,name=result,proto3,enum=io.axoniq.axonserver.grpc.admin.Result" json:"result,omitempty"`
}

func (x *AdminActionResult) Reset() {
	*x = AdminActionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminActionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminActionResult) ProtoMessage() {}

func (x *AdminActionResult) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminActionResult.ProtoReflect.Descriptor instead.
func (*AdminActionResult) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{29}
}

func (x *AdminActionResult) GetResult() Result {
	if x != nil {
		return x.Result
	}
	return Result_SUCCESS
}

type EventProcessorIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the name of the processor
	ProcessorName string `protobuf:"bytes,1,opt,name=processor_name,json=processorName,proto3" json:"processor_name,omitempty"`
	// the identifier of the token store this event processor is using
	TokenStoreIdentifier string `protobuf:"bytes,2,opt,name=token_store_identifier,json=tokenStoreIdentifier,proto3" json:"token_store_identifier,omitempty"`
	// optional parameter to pass in the context name to indicate where the processor is located
	ContextName string `protobuf:"bytes,3,opt,name=context_name,json=contextName,proto3" json:"context_name,omitempty"`
}

func (x *EventProcessorIdentifier) Reset() {
	*x = EventProcessorIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventProcessorIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventProcessorIdentifier) ProtoMessage() {}

func (x *EventProcessorIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventProcessorIdentifier.ProtoReflect.Descriptor instead.
func (*EventProcessorIdentifier) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{30}
}

func (x *EventProcessorIdentifier) GetProcessorName() string {
	if x != nil {
		return x.ProcessorName
	}
	return ""
}

func (x *EventProcessorIdentifier) GetTokenStoreIdentifier() string {
	if x != nil {
		return x.TokenStoreIdentifier
	}
	return ""
}

func (x *EventProcessorIdentifier) GetContextName() string {
	if x != nil {
		return x.ContextName
	}
	return ""
}

type MoveSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the identifier of the event processor
	EventProcessor *EventProcessorIdentifier `protobuf:"bytes,1,opt,name=event_processor,json=eventProcessor,proto3" json:"event_processor,omitempty"`
	// the id of the segment to move
	Segment int32 `protobuf:"varint,2,opt,name=segment,proto3" json:"segment,omitempty"`
	// the desired destination for the segment
	TargetClientId string `protobuf:"bytes,3,opt,name=target_client_id,json=targetClientId,proto3" json:"target_client_id,omitempty"`
}

func (x *MoveSegment) Reset() {
	*x = MoveSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveSegment) ProtoMessage() {}

func (x *MoveSegment) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveSegment.ProtoReflect.Descriptor instead.
func (*MoveSegment) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{31}
}

func (x *MoveSegment) GetEventProcessor() *EventProcessorIdentifier {
	if x != nil {
		return x.EventProcessor
	}
	return nil
}

func (x *MoveSegment) GetSegment() int32 {
	if x != nil {
		return x.Segment
	}
	return 0
}

func (x *MoveSegment) GetTargetClientId() string {
	if x != nil {
		return x.TargetClientId
	}
	return ""
}

type EventProcessor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the identifier of the event processor
	Identifier *EventProcessorIdentifier `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// the event processor mode (subscribing, tracking, pooled)
	Mode string `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
	// true if the event processor is streaming, false otherwise
	IsStreaming bool `protobuf:"varint,3,opt,name=isStreaming,proto3" json:"isStreaming,omitempty"`
	// client instances that subscribed the event processor
	ClientInstance []*EventProcessorInstance `protobuf:"bytes,4,rep,name=client_instance,json=clientInstance,proto3" json:"client_instance,omitempty"`
	// current load balancing strategy name for the event processor
	LoadBalancingStrategyName string `protobuf:"bytes,5,opt,name=load_balancing_strategy_name,json=loadBalancingStrategyName,proto3" json:"load_balancing_strategy_name,omitempty"`
}

func (x *EventProcessor) Reset() {
	*x = EventProcessor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventProcessor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventProcessor) ProtoMessage() {}

func (x *EventProcessor) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventProcessor.ProtoReflect.Descriptor instead.
func (*EventProcessor) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{32}
}

func (x *EventProcessor) GetIdentifier() *EventProcessorIdentifier {
	if x != nil {
		return x.Identifier
	}
	return nil
}

func (x *EventProcessor) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *EventProcessor) GetIsStreaming() bool {
	if x != nil {
		return x.IsStreaming
	}
	return false
}

func (x *EventProcessor) GetClientInstance() []*EventProcessorInstance {
	if x != nil {
		return x.ClientInstance
	}
	return nil
}

func (x *EventProcessor) GetLoadBalancingStrategyName() string {
	if x != nil {
		return x.LoadBalancingStrategyName
	}
	return ""
}

type EventProcessorInstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the client identifier
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// true if the client instance of the event processor is running, false otherwise
	IsRunning bool `protobuf:"varint,2,opt,name=isRunning,proto3" json:"isRunning,omitempty"`
	// the max number of segments that this client can claim
	MaxCapacity int32 `protobuf:"varint,3,opt,name=max_capacity,json=maxCapacity,proto3" json:"max_capacity,omitempty"`
	// status of all segments claimed by the client
	ClaimedSegment []*EventProcessorSegment `protobuf:"bytes,4,rep,name=claimed_segment,json=claimedSegment,proto3" json:"claimed_segment,omitempty"`
}

func (x *EventProcessorInstance) Reset() {
	*x = EventProcessorInstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventProcessorInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventProcessorInstance) ProtoMessage() {}

func (x *EventProcessorInstance) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventProcessorInstance.ProtoReflect.Descriptor instead.
func (*EventProcessorInstance) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{33}
}

func (x *EventProcessorInstance) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *EventProcessorInstance) GetIsRunning() bool {
	if x != nil {
		return x.IsRunning
	}
	return false
}

func (x *EventProcessorInstance) GetMaxCapacity() int32 {
	if x != nil {
		return x.MaxCapacity
	}
	return 0
}

func (x *EventProcessorInstance) GetClaimedSegment() []*EventProcessorSegment {
	if x != nil {
		return x.ClaimedSegment
	}
	return nil
}

type EventProcessorSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the identifier of the segment
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// the fractional unit representing the size of the segment
	OnePartOf int32 `protobuf:"varint,2,opt,name=one_part_of,json=onePartOf,proto3" json:"one_part_of,omitempty"`
	// the id of the client that claimed the segment
	ClaimedBy string `protobuf:"bytes,3,opt,name=claimed_by,json=claimedBy,proto3" json:"claimed_by,omitempty"`
	// true if the segment has ever reached the head of the stream since it was started, false otherwise
	IsCaughtUp bool `protobuf:"varint,4,opt,name=is_caughtUp,json=isCaughtUp,proto3" json:"is_caughtUp,omitempty"`
	// true if the segment is replaying, false otherwise
	IsReplaying bool `protobuf:"varint,5,opt,name=is_replaying,json=isReplaying,proto3" json:"is_replaying,omitempty"`
	// the approximate position of the token
	TokenPosition int64 `protobuf:"varint,6,opt,name=token_position,json=tokenPosition,proto3" json:"token_position,omitempty"`
	// true if the segment is in an error loop, false otherwise
	IsInError bool `protobuf:"varint,7,opt,name=is_in_error,json=isInError,proto3" json:"is_in_error,omitempty"`
	// the error description, if the segment is in error
	Error string `protobuf:"bytes,8,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *EventProcessorSegment) Reset() {
	*x = EventProcessorSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventProcessorSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventProcessorSegment) ProtoMessage() {}

func (x *EventProcessorSegment) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventProcessorSegment.ProtoReflect.Descriptor instead.
func (*EventProcessorSegment) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{34}
}

func (x *EventProcessorSegment) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EventProcessorSegment) GetOnePartOf() int32 {
	if x != nil {
		return x.OnePartOf
	}
	return 0
}

func (x *EventProcessorSegment) GetClaimedBy() string {
	if x != nil {
		return x.ClaimedBy
	}
	return ""
}

func (x *EventProcessorSegment) GetIsCaughtUp() bool {
	if x != nil {
		return x.IsCaughtUp
	}
	return false
}

func (x *EventProcessorSegment) GetIsReplaying() bool {
	if x != nil {
		return x.IsReplaying
	}
	return false
}

func (x *EventProcessorSegment) GetTokenPosition() int64 {
	if x != nil {
		return x.TokenPosition
	}
	return 0
}

func (x *EventProcessorSegment) GetIsInError() bool {
	if x != nil {
		return x.IsInError
	}
	return false
}

func (x *EventProcessorSegment) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type LoadBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processor *EventProcessorIdentifier `protobuf:"bytes,1,opt,name=processor,proto3" json:"processor,omitempty"`
	Strategy  string                    `protobuf:"bytes,2,opt,name=strategy,proto3" json:"strategy,omitempty"`
}

func (x *LoadBalanceRequest) Reset() {
	*x = LoadBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalanceRequest) ProtoMessage() {}

func (x *LoadBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalanceRequest.ProtoReflect.Descriptor instead.
func (*LoadBalanceRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{35}
}

func (x *LoadBalanceRequest) GetProcessor() *EventProcessorIdentifier {
	if x != nil {
		return x.Processor
	}
	return nil
}

func (x *LoadBalanceRequest) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

type LoadBalancingStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strategy string `protobuf:"bytes,1,opt,name=strategy,proto3" json:"strategy,omitempty"`
	Label    string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *LoadBalancingStrategy) Reset() {
	*x = LoadBalancingStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadBalancingStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadBalancingStrategy) ProtoMessage() {}

func (x *LoadBalancingStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadBalancingStrategy.ProtoReflect.Descriptor instead.
func (*LoadBalancingStrategy) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{36}
}

func (x *LoadBalancingStrategy) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *LoadBalancingStrategy) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

// Message containing connection information for an AxonServer Node
type NodeOverview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The host name to use when connecting to this node
	HostName string `protobuf:"bytes,1,opt,name=host_name,json=hostName,proto3" json:"host_name,omitempty"`
	// The port number for gRPC connections
	GrpcPort int32 `protobuf:"varint,2,opt,name=grpc_port,json=grpcPort,proto3" json:"grpc_port,omitempty"`
	// The port number for HTTP connections
	HttpPort int32 `protobuf:"varint,3,opt,name=http_port,json=httpPort,proto3" json:"http_port,omitempty"`
	// The unique name of the node to connect with, for purpose of debugging
	NodeName string `protobuf:"bytes,4,opt,name=node_name,json=nodeName,proto3" json:"node_name,omitempty"`
	// List of replication groups that belongs to this node
	ReplicationGroups []string `protobuf:"bytes,5,rep,name=replication_groups,json=replicationGroups,proto3" json:"replication_groups,omitempty"`
	// List of tags associated with this node
	Tags map[string]string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NodeOverview) Reset() {
	*x = NodeOverview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeOverview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeOverview) ProtoMessage() {}

func (x *NodeOverview) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeOverview.ProtoReflect.Descriptor instead.
func (*NodeOverview) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{37}
}

func (x *NodeOverview) GetHostName() string {
	if x != nil {
		return x.HostName
	}
	return ""
}

func (x *NodeOverview) GetGrpcPort() int32 {
	if x != nil {
		return x.GrpcPort
	}
	return 0
}

func (x *NodeOverview) GetHttpPort() int32 {
	if x != nil {
		return x.HttpPort
	}
	return 0
}

func (x *NodeOverview) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *NodeOverview) GetReplicationGroups() []string {
	if x != nil {
		return x.ReplicationGroups
	}
	return nil
}

func (x *NodeOverview) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type AuthenticateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName string `protobuf:"bytes,1,opt,name=userName,proto3" json:"userName,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *AuthenticateUserRequest) Reset() {
	*x = AuthenticateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthenticateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthenticateUserRequest) ProtoMessage() {}

func (x *AuthenticateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthenticateUserRequest.ProtoReflect.Descriptor instead.
func (*AuthenticateUserRequest) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{38}
}

func (x *AuthenticateUserRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *AuthenticateUserRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type ApplicationRoles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApplicationName string         `protobuf:"bytes,1,opt,name=applicationName,proto3" json:"applicationName,omitempty"`
	ApplicationRole []*ContextRole `protobuf:"bytes,2,rep,name=applicationRole,proto3" json:"applicationRole,omitempty"`
}

func (x *ApplicationRoles) Reset() {
	*x = ApplicationRoles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationRoles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationRoles) ProtoMessage() {}

func (x *ApplicationRoles) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationRoles.ProtoReflect.Descriptor instead.
func (*ApplicationRoles) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{39}
}

func (x *ApplicationRoles) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *ApplicationRoles) GetApplicationRole() []*ContextRole {
	if x != nil {
		return x.ApplicationRole
	}
	return nil
}

type ContextRole struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role    string `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	Context string `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *ContextRole) Reset() {
	*x = ContextRole{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextRole) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextRole) ProtoMessage() {}

func (x *ContextRole) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextRole.ProtoReflect.Descriptor instead.
func (*ContextRole) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{40}
}

func (x *ContextRole) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *ContextRole) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

type UserRoles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName  string         `protobuf:"bytes,1,opt,name=userName,proto3" json:"userName,omitempty"`
	UserRoles []*ContextRole `protobuf:"bytes,3,rep,name=userRoles,proto3" json:"userRoles,omitempty"`
}

func (x *UserRoles) Reset() {
	*x = UserRoles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_admin_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRoles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRoles) ProtoMessage() {}

func (x *UserRoles) ProtoReflect() protoreflect.Message {
	mi := &file_admin_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRoles.ProtoReflect.Descriptor instead.
func (*UserRoles) Descriptor() ([]byte, []int) {
	return file_admin_proto_rawDescGZIP(), []int{41}
}

func (x *UserRoles) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *UserRoles) GetUserRoles() []*ContextRole {
	if x != nil {
		return x.UserRoles
	}
	return nil
}

var File_admin_proto protoreflect.FileDescriptor

var file_admin_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x69,
	0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfd, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x60, 0x0a, 0x09, 0x6d, 0x65, 0x74,
	0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d,
	0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdd, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x6a, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61,
	0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d,
	0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5a, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x22, 0x27, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf0, 0x02,
	0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x65, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x39, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x52, 0x10, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x5b, 0x0a, 0x09,
	0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x71, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x46, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x61,
	0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x07, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x6e, 0x63, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xe7, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x76,
	0x69, 0x65, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78,
	0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73,
	0x22, 0x63, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e,
	0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x22, 0x30, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa4, 0x01, 0x0a, 0x14, 0x4a, 0x6f, 0x69,
	0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61,
	0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22,
	0x9a, 0x01, 0x0a, 0x15, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x94, 0x02, 0x0a,
	0x17, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x63, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71,
	0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xf6, 0x02, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x61, 0x0a, 0x0f,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69,
	0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0f,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x50, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x5e, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x41, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61,
	0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x1a,
	0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x48, 0x0a, 0x16,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x1d, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x39, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xe2, 0x02, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x0f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x50, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x50, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x5f, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2d, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x0c, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78,
	0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a,
	0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x44, 0x0a, 0x07,
	0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x06, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x55, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6f, 0x2e, 0x61,
	0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x22, 0x4b, 0x0a, 0x09,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xa3, 0x01, 0x0a, 0x19, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x4e, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61,
	0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x22,
	0x2f, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x3f, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x22, 0x40, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x22, 0x95, 0x01, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72,
	0x76, 0x69, 0x65, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x54, 0x0a, 0x11, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x3f, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f,
	0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x9a, 0x01, 0x0a, 0x18, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xb5,
	0x01, 0x0a, 0x0b, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x62,
	0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f,
	0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0xc4, 0x02, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x59, 0x0a, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x60, 0x0a, 0x0f, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e,
	0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0e, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x1c,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x19, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd7, 0x01,
	0x0a, 0x16, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x52, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x52, 0x75, 0x6e, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x5f, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65,
	0x64, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64,
	0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x87, 0x02, 0x0a, 0x15, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x6e, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x6e, 0x65, 0x50, 0x61, 0x72, 0x74, 0x4f,
	0x66, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x65, 0x64, 0x42, 0x79,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x75, 0x67, 0x68, 0x74, 0x55, 0x70, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x61, 0x75, 0x67, 0x68, 0x74, 0x55,
	0x70, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0b, 0x69,
	0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x69, 0x73, 0x49, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x89, 0x01, 0x0a, 0x12, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x57, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x69, 0x6f,
	0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22, 0x49, 0x0a,
	0x15, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0xb7, 0x02, 0x0a, 0x0c, 0x4e, 0x6f, 0x64,
	0x65, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x67, 0x72, 0x70, 0x63, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x74, 0x74, 0x70, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x4b, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x51, 0x0a, 0x17, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x0f, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x3b, 0x0a, 0x0b,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x73, 0x0a, 0x09, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69,
	0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x2a, 0x3a,
	0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x76, 0x0a, 0x04, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41,
	0x52, 0x59, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55, 0x50, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13,
	0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x49, 0x56, 0x45, 0x5f, 0x42, 0x41, 0x43,
	0x4b, 0x55, 0x50, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x04, 0x12, 0x12,
	0x0a, 0x0e, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x41, 0x52, 0x59,
	0x10, 0x05, 0x2a, 0x23, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a, 0x07,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x43, 0x43,
	0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x01, 0x32, 0x83, 0x05, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x60, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x35, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f,
	0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x30,
	0x01, 0x12, 0x74, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x30, 0x01, 0x12, 0x60, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x35, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78,
	0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x30, 0x01, 0x12, 0x72, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f,
	0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x69, 0x6f,
	0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x59, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x30, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71,
	0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4f, 0x76,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x30, 0x01, 0x12, 0x63, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2e, 0x2e, 0x69, 0x6f,
	0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x30, 0x01, 0x32, 0xbc, 0x06,
	0x0a, 0x1c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55,
	0x0a, 0x08, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61,
	0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x22, 0x00, 0x30, 0x01, 0x12, 0x72, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x3e, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x30, 0x01, 0x12, 0x6b, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x39, 0x2e, 0x69, 0x6f, 0x2e, 0x61,
	0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x76, 0x65, 0x72,
	0x76, 0x69, 0x65, 0x77, 0x30, 0x01, 0x12, 0x8d, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3b,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x69, 0x6f,
	0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x76,
	0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x72, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x3e, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f,
	0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x30, 0x01, 0x12, 0x6c, 0x0a, 0x19, 0x41, 0x64,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x35, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f,
	0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x30, 0x01, 0x12, 0x72, 0x0a, 0x1e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x36, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x30, 0x01, 0x32, 0xc6, 0x05, 0x0a,
	0x17, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x78, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69,
	0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x5d, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f,
	0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x30,
	0x01, 0x12, 0x76, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e,
	0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x1a, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e,
	0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x12, 0x61, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x34, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71,
	0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x30, 0x01, 0x12, 0x66, 0x0a, 0x0c,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2e, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x26, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x8e, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x42, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x2a, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x49, 0x64, 0x1a, 0x3d, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e,
	0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x76, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x32, 0xaf, 0x02, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6a, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x3a, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f,
	0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x30, 0x01, 0x12, 0x5a, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71,
	0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x30, 0x01, 0x12, 0x53, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2d, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e,
	0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x76, 0x65,
	0x72, 0x76, 0x69, 0x65, 0x77, 0x30, 0x01, 0x32, 0xd5, 0x09, 0x0a, 0x1a, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x13, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x39,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x61,
	0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x84, 0x01,
	0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x39, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69,
	0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x1a, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f,
	0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x84, 0x01, 0x0a, 0x13, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x39, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f,
	0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x84, 0x01, 0x0a, 0x13,
	0x4d, 0x65, 0x72, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x12, 0x39, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e,
	0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x6f, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x32,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x7d, 0x0a, 0x19, 0x4d, 0x6f, 0x76, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x2c, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x32, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x62, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61,
	0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x30, 0x01, 0x12, 0x78, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e,
	0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x1a, 0x2f, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x30, 0x01, 0x12,
	0x65, 0x0a, 0x14, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f,
	0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x30, 0x01, 0x12, 0x6b, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x41, 0x75, 0x74,
	0x6f, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71,
	0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x30, 0x01, 0x12, 0x6a, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65, 0x73, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69,
	0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x30, 0x01, 0x32,
	0x81, 0x02, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x78, 0x0a, 0x10, 0x41, 0x75, 0x74,
	0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x38, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f,
	0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x73, 0x12, 0x6e, 0x0a, 0x11, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x26, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78,
	0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x1a, 0x31, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f,
	0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x6f,
	0x6c, 0x65, 0x73, 0x42, 0x19, 0x50, 0x01, 0x5a, 0x15, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f,
	0x67, 0x65, 0x6e, 0x2f, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_admin_proto_rawDescOnce sync.Once
	file_admin_proto_rawDescData = file_admin_proto_rawDesc
)

func file_admin_proto_rawDescGZIP() []byte {
	file_admin_proto_rawDescOnce.Do(func() {
		file_admin_proto_rawDescData = protoimpl.X.CompressGZIP(file_admin_proto_rawDescData)
	})
	return file_admin_proto_rawDescData
}

var file_admin_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_admin_proto_msgTypes = make([]protoimpl.MessageInfo, 49)
var file_admin_proto_goTypes = []interface{}{
	(ContextUpdateType)(0),                 // 0: io.axoniq.axonserver.grpc.admin.ContextUpdateType
	(Role)(0),                              // 1: io.axoniq.axonserver.grpc.admin.Role
	(Result)(0),                            // 2: io.axoniq.axonserver.grpc.admin.Result
	(*CreateContextRequest)(nil),           // 3: io.axoniq.axonserver.grpc.admin.CreateContextRequest
	(*UpdateContextPropertiesRequest)(nil), // 4: io.axoniq.axonserver.grpc.admin.UpdateContextPropertiesRequest
	(*DeleteContextRequest)(nil),           // 5: io.axoniq.axonserver.grpc.admin.DeleteContextRequest
	(*GetContextRequest)(nil),              // 6: io.axoniq.axonserver.grpc.admin.GetContextRequest
	(*ContextOverview)(nil),                // 7: io.axoniq.axonserver.grpc.admin.ContextOverview
	(*ContextUpdate)(nil),                  // 8: io.axoniq.axonserver.grpc.admin.ContextUpdate
	(*CreateReplicationGroupRequest)(nil),  // 9: io.axoniq.axonserver.grpc.admin.CreateReplicationGroupRequest
	(*ReplicationGroupOverview)(nil),       // 10: io.axoniq.axonserver.grpc.admin.ReplicationGroupOverview
	(*DeleteReplicationGroupRequest)(nil),  // 11: io.axoniq.axonserver.grpc.admin.DeleteReplicationGroupRequest
	(*ReplicationGroupMember)(nil),         // 12: io.axoniq.axonserver.grpc.admin.ReplicationGroupMember
	(*GetReplicationGroupRequest)(nil),     // 13: io.axoniq.axonserver.grpc.admin.GetReplicationGroupRequest
	(*JoinReplicationGroup)(nil),           // 14: io.axoniq.axonserver.grpc.admin.JoinReplicationGroup
	(*LeaveReplicationGroup)(nil),          // 15: io.axoniq.axonserver.grpc.admin.LeaveReplicationGroup
	(*ReplicationGroupContext)(nil),        // 16: io.axoniq.axonserver.grpc.admin.ReplicationGroupContext
	(*ApplicationRequest)(nil),             // 17: io.axoniq.axonserver.grpc.admin.ApplicationRequest
	(*ApplicationContextRole)(nil),         // 18: io.axoniq.axonserver.grpc.admin.ApplicationContextRole
	(*Token)(nil),                          // 19: io.axoniq.axonserver.grpc.admin.Token
	(*ApplicationId)(nil),                  // 20: io.axoniq.axonserver.grpc.admin.ApplicationId
	(*ApplicationOverview)(nil),            // 21: io.axoniq.axonserver.grpc.admin.ApplicationOverview
	(*ContextId)(nil),                      // 22: io.axoniq.axonserver.grpc.admin.ContextId
	(*ConnectedApplicationOverview)(nil),   // 23: io.axoniq.axonserver.grpc.admin.ConnectedApplicationOverview
	(*ClientApplication)(nil),              // 24: io.axoniq.axonserver.grpc.admin.ClientApplication
	(*Client)(nil),                         // 25: io.axoniq.axonserver.grpc.admin.Client
	(*QueryInfo)(nil),                      // 26: io.axoniq.axonserver.grpc.admin.QueryInfo
	(*CreateOrUpdateUserRequest)(nil),      // 27: io.axoniq.axonserver.grpc.admin.CreateOrUpdateUserRequest
	(*DeleteUserRequest)(nil),              // 28: io.axoniq.axonserver.grpc.admin.DeleteUserRequest
	(*UserRoleRequest)(nil),                // 29: io.axoniq.axonserver.grpc.admin.UserRoleRequest
	(*UserRoleOverview)(nil),               // 30: io.axoniq.axonserver.grpc.admin.UserRoleOverview
	(*UserOverview)(nil),                   // 31: io.axoniq.axonserver.grpc.admin.UserOverview
	(*AdminActionResult)(nil),              // 32: io.axoniq.axonserver.grpc.admin.AdminActionResult
	(*EventProcessorIdentifier)(nil),       // 33: io.axoniq.axonserver.grpc.admin.EventProcessorIdentifier
	(*MoveSegment)(nil),                    // 34: io.axoniq.axonserver.grpc.admin.MoveSegment
	(*EventProcessor)(nil),                 // 35: io.axoniq.axonserver.grpc.admin.EventProcessor
	(*EventProcessorInstance)(nil),         // 36: io.axoniq.axonserver.grpc.admin.EventProcessorInstance
	(*EventProcessorSegment)(nil),          // 37: io.axoniq.axonserver.grpc.admin.EventProcessorSegment
	(*LoadBalanceRequest)(nil),             // 38: io.axoniq.axonserver.grpc.admin.LoadBalanceRequest
	(*LoadBalancingStrategy)(nil),          // 39: io.axoniq.axonserver.grpc.admin.LoadBalancingStrategy
	(*NodeOverview)(nil),                   // 40: io.axoniq.axonserver.grpc.admin.NodeOverview
	(*AuthenticateUserRequest)(nil),        // 41: io.axoniq.axonserver.grpc.admin.AuthenticateUserRequest
	(*ApplicationRoles)(nil),               // 42: io.axoniq.axonserver.grpc.admin.ApplicationRoles
	(*ContextRole)(nil),                    // 43: io.axoniq.axonserver.grpc.admin.ContextRole
	(*UserRoles)(nil),                      // 44: io.axoniq.axonserver.grpc.admin.UserRoles
	nil,                                    // 45: io.axoniq.axonserver.grpc.admin.CreateContextRequest.MetaDataEntry
	nil,                                    // 46: io.axoniq.axonserver.grpc.admin.UpdateContextPropertiesRequest.MetaDataEntry
	nil,                                    // 47: io.axoniq.axonserver.grpc.admin.ContextOverview.MetaDataEntry
	nil,                                    // 48: io.axoniq.axonserver.grpc.admin.ReplicationGroupContext.MetaDataEntry
	nil,                                    // 49: io.axoniq.axonserver.grpc.admin.ApplicationRequest.MetaDataEntry
	nil,                                    // 50: io.axoniq.axonserver.grpc.admin.ApplicationOverview.MetaDataEntry
	nil,                                    // 51: io.axoniq.axonserver.grpc.admin.NodeOverview.TagsEntry
	(*EventProcessorInfo)(nil),             // 52: io.axoniq.axonserver.grpc.control.EventProcessorInfo
	(*empty.Empty)(nil),                    // 53: google.protobuf.Empty
	(*Component)(nil),                      // 54: io.axoniq.axonserver.grpc.Component
}
var file_admin_proto_depIdxs = []int32{
	45, // 0: io.axoniq.axonserver.grpc.admin.CreateContextRequest.meta_data:type_name -> io.axoniq.axonserver.grpc.admin.CreateContextRequest.MetaDataEntry
	46, // 1: io.axoniq.axonserver.grpc.admin.UpdateContextPropertiesRequest.meta_data:type_name -> io.axoniq.axonserver.grpc.admin.UpdateContextPropertiesRequest.MetaDataEntry
	10, // 2: io.axoniq.axonserver.grpc.admin.ContextOverview.replicationGroup:type_name -> io.axoniq.axonserver.grpc.admin.ReplicationGroupOverview
	47, // 3: io.axoniq.axonserver.grpc.admin.ContextOverview.meta_data:type_name -> io.axoniq.axonserver.grpc.admin.ContextOverview.MetaDataEntry
	0,  // 4: io.axoniq.axonserver.grpc.admin.ContextUpdate.type:type_name -> io.axoniq.axonserver.grpc.admin.ContextUpdateType
	12, // 5: io.axoniq.axonserver.grpc.admin.CreateReplicationGroupRequest.members:type_name -> io.axoniq.axonserver.grpc.admin.ReplicationGroupMember
	12, // 6: io.axoniq.axonserver.grpc.admin.ReplicationGroupOverview.members:type_name -> io.axoniq.axonserver.grpc.admin.ReplicationGroupMember
	1,  // 7: io.axoniq.axonserver.grpc.admin.ReplicationGroupMember.role:type_name -> io.axoniq.axonserver.grpc.admin.Role
	1,  // 8: io.axoniq.axonserver.grpc.admin.JoinReplicationGroup.role:type_name -> io.axoniq.axonserver.grpc.admin.Role
	48, // 9: io.axoniq.axonserver.grpc.admin.ReplicationGroupContext.meta_data:type_name -> io.axoniq.axonserver.grpc.admin.ReplicationGroupContext.MetaDataEntry
	18, // 10: io.axoniq.axonserver.grpc.admin.ApplicationRequest.rolesPerContext:type_name -> io.axoniq.axonserver.grpc.admin.ApplicationContextRole
	49, // 11: io.axoniq.axonserver.grpc.admin.ApplicationRequest.meta_data:type_name -> io.axoniq.axonserver.grpc.admin.ApplicationRequest.MetaDataEntry
	18, // 12: io.axoniq.axonserver.grpc.admin.ApplicationOverview.rolesPerContext:type_name -> io.axoniq.axonserver.grpc.admin.ApplicationContextRole
	50, // 13: io.axoniq.axonserver.grpc.admin.ApplicationOverview.meta_data:type_name -> io.axoniq.axonserver.grpc.admin.ApplicationOverview.MetaDataEntry
	24, // 14: io.axoniq.axonserver.grpc.admin.ConnectedApplicationOverview.applications:type_name -> io.axoniq.axonserver.grpc.admin.ClientApplication
	25, // 15: io.axoniq.axonserver.grpc.admin.ClientApplication.clients:type_name -> io.axoniq.axonserver.grpc.admin.Client
	26, // 16: io.axoniq.axonserver.grpc.admin.ClientApplication.queries:type_name -> io.axoniq.axonserver.grpc.admin.QueryInfo
	52, // 17: io.axoniq.axonserver.grpc.admin.Client.processors:type_name -> io.axoniq.axonserver.grpc.control.EventProcessorInfo
	29, // 18: io.axoniq.axonserver.grpc.admin.CreateOrUpdateUserRequest.userRoles:type_name -> io.axoniq.axonserver.grpc.admin.UserRoleRequest
	30, // 19: io.axoniq.axonserver.grpc.admin.UserOverview.userRoles:type_name -> io.axoniq.axonserver.grpc.admin.UserRoleOverview
	2,  // 20: io.axoniq.axonserver.grpc.admin.AdminActionResult.result:type_name -> io.axoniq.axonserver.grpc.admin.Result
	33, // 21: io.axoniq.axonserver.grpc.admin.MoveSegment.event_processor:type_name -> io.axoniq.axonserver.grpc.admin.EventProcessorIdentifier
	33, // 22: io.axoniq.axonserver.grpc.admin.EventProcessor.identifier:type_name -> io.axoniq.axonserver.grpc.admin.EventProcessorIdentifier
	36, // 23: io.axoniq.axonserver.grpc.admin.EventProcessor.client_instance:type_name -> io.axoniq.axonserver.grpc.admin.EventProcessorInstance
	37, // 24: io.axoniq.axonserver.grpc.admin.EventProcessorInstance.claimed_segment:type_name -> io.axoniq.axonserver.grpc.admin.EventProcessorSegment
	33, // 25: io.axoniq.axonserver.grpc.admin.LoadBalanceRequest.processor:type_name -> io.axoniq.axonserver.grpc.admin.EventProcessorIdentifier
	51, // 26: io.axoniq.axonserver.grpc.admin.NodeOverview.tags:type_name -> io.axoniq.axonserver.grpc.admin.NodeOverview.TagsEntry
	43, // 27: io.axoniq.axonserver.grpc.admin.ApplicationRoles.applicationRole:type_name -> io.axoniq.axonserver.grpc.admin.ContextRole
	43, // 28: io.axoniq.axonserver.grpc.admin.UserRoles.userRoles:type_name -> io.axoniq.axonserver.grpc.admin.ContextRole
	3,  // 29: io.axoniq.axonserver.grpc.admin.ContextAdminService.CreateContext:input_type -> io.axoniq.axonserver.grpc.admin.CreateContextRequest
	4,  // 30: io.axoniq.axonserver.grpc.admin.ContextAdminService.UpdateContextProperties:input_type -> io.axoniq.axonserver.grpc.admin.UpdateContextPropertiesRequest
	5,  // 31: io.axoniq.axonserver.grpc.admin.ContextAdminService.DeleteContext:input_type -> io.axoniq.axonserver.grpc.admin.DeleteContextRequest
	6,  // 32: io.axoniq.axonserver.grpc.admin.ContextAdminService.GetContext:input_type -> io.axoniq.axonserver.grpc.admin.GetContextRequest
	53, // 33: io.axoniq.axonserver.grpc.admin.ContextAdminService.GetContexts:input_type -> google.protobuf.Empty
	53, // 34: io.axoniq.axonserver.grpc.admin.ContextAdminService.SubscribeContextUpdates:input_type -> google.protobuf.Empty
	53, // 35: io.axoniq.axonserver.grpc.admin.ReplicationGroupAdminService.GetNodes:input_type -> google.protobuf.Empty
	9,  // 36: io.axoniq.axonserver.grpc.admin.ReplicationGroupAdminService.CreateReplicationGroup:input_type -> io.axoniq.axonserver.grpc.admin.CreateReplicationGroupRequest
	53, // 37: io.axoniq.axonserver.grpc.admin.ReplicationGroupAdminService.GetReplicationGroups:input_type -> google.protobuf.Empty
	13, // 38: io.axoniq.axonserver.grpc.admin.ReplicationGroupAdminService.GetReplicationGroup:input_type -> io.axoniq.axonserver.grpc.admin.GetReplicationGroupRequest
	11, // 39: io.axoniq.axonserver.grpc.admin.ReplicationGroupAdminService.DeleteReplicationGroup:input_type -> io.axoniq.axonserver.grpc.admin.DeleteReplicationGroupRequest
	14, // 40: io.axoniq.axonserver.grpc.admin.ReplicationGroupAdminService.AddNodeToReplicationGroup:input_type -> io.axoniq.axonserver.grpc.admin.JoinReplicationGroup
	15, // 41: io.axoniq.axonserver.grpc.admin.ReplicationGroupAdminService.RemoveNodeFromReplicationGroup:input_type -> io.axoniq.axonserver.grpc.admin.LeaveReplicationGroup
	17, // 42: io.axoniq.axonserver.grpc.admin.ApplicationAdminService.CreateOrUpdateApplication:input_type -> io.axoniq.axonserver.grpc.admin.ApplicationRequest
	20, // 43: io.axoniq.axonserver.grpc.admin.ApplicationAdminService.DeleteApplication:input_type -> io.axoniq.axonserver.grpc.admin.ApplicationId
	20, // 44: io.axoniq.axonserver.grpc.admin.ApplicationAdminService.GetApplication:input_type -> io.axoniq.axonserver.grpc.admin.ApplicationId
	53, // 45: io.axoniq.axonserver.grpc.admin.ApplicationAdminService.GetApplications:input_type -> google.protobuf.Empty
	20, // 46: io.axoniq.axonserver.grpc.admin.ApplicationAdminService.RefreshToken:input_type -> io.axoniq.axonserver.grpc.admin.ApplicationId
	22, // 47: io.axoniq.axonserver.grpc.admin.ApplicationAdminService.GetConnectedApplicationsByContext:input_type -> io.axoniq.axonserver.grpc.admin.ContextId
	27, // 48: io.axoniq.axonserver.grpc.admin.UserAdminService.CreateOrUpdateUser:input_type -> io.axoniq.axonserver.grpc.admin.CreateOrUpdateUserRequest
	28, // 49: io.axoniq.axonserver.grpc.admin.UserAdminService.DeleteUser:input_type -> io.axoniq.axonserver.grpc.admin.DeleteUserRequest
	53, // 50: io.axoniq.axonserver.grpc.admin.UserAdminService.GetUsers:input_type -> google.protobuf.Empty
	33, // 51: io.axoniq.axonserver.grpc.admin.EventProcessorAdminService.PauseEventProcessor:input_type -> io.axoniq.axonserver.grpc.admin.EventProcessorIdentifier
	33, // 52: io.axoniq.axonserver.grpc.admin.EventProcessorAdminService.StartEventProcessor:input_type -> io.axoniq.axonserver.grpc.admin.EventProcessorIdentifier
	33, // 53: io.axoniq.axonserver.grpc.admin.EventProcessorAdminService.SplitEventProcessor:input_type -> io.axoniq.axonserver.grpc.admin.EventProcessorIdentifier
	33, // 54: io.axoniq.axonserver.grpc.admin.EventProcessorAdminService.MergeEventProcessor:input_type -> io.axoniq.axonserver.grpc.admin.EventProcessorIdentifier
	34, // 55: io.axoniq.axonserver.grpc.admin.EventProcessorAdminService.MoveEventProcessorSegment:input_type -> io.axoniq.axonserver.grpc.admin.MoveSegment
	53, // 56: io.axoniq.axonserver.grpc.admin.EventProcessorAdminService.GetAllEventProcessors:input_type -> google.protobuf.Empty
	54, // 57: io.axoniq.axonserver.grpc.admin.EventProcessorAdminService.GetEventProcessorsByComponent:input_type -> io.axoniq.axonserver.grpc.Component
	38, // 58: io.axoniq.axonserver.grpc.admin.EventProcessorAdminService.LoadBalanceProcessor:input_type -> io.axoniq.axonserver.grpc.admin.LoadBalanceRequest
	38, // 59: io.axoniq.axonserver.grpc.admin.EventProcessorAdminService.SetAutoLoadBalanceStrategy:input_type -> io.axoniq.axonserver.grpc.admin.LoadBalanceRequest
	53, // 60: io.axoniq.axonserver.grpc.admin.EventProcessorAdminService.GetBalancingStrategies:input_type -> google.protobuf.Empty
	41, // 61: io.axoniq.axonserver.grpc.admin.AuthenticationService.AuthenticateUser:input_type -> io.axoniq.axonserver.grpc.admin.AuthenticateUserRequest
	19, // 62: io.axoniq.axonserver.grpc.admin.AuthenticationService.AuthenticateToken:input_type -> io.axoniq.axonserver.grpc.admin.Token
	53, // 63: io.axoniq.axonserver.grpc.admin.ContextAdminService.CreateContext:output_type -> google.protobuf.Empty
	53, // 64: io.axoniq.axonserver.grpc.admin.ContextAdminService.UpdateContextProperties:output_type -> google.protobuf.Empty
	53, // 65: io.axoniq.axonserver.grpc.admin.ContextAdminService.DeleteContext:output_type -> google.protobuf.Empty
	7,  // 66: io.axoniq.axonserver.grpc.admin.ContextAdminService.GetContext:output_type -> io.axoniq.axonserver.grpc.admin.ContextOverview
	7,  // 67: io.axoniq.axonserver.grpc.admin.ContextAdminService.GetContexts:output_type -> io.axoniq.axonserver.grpc.admin.ContextOverview
	8,  // 68: io.axoniq.axonserver.grpc.admin.ContextAdminService.SubscribeContextUpdates:output_type -> io.axoniq.axonserver.grpc.admin.ContextUpdate
	40, // 69: io.axoniq.axonserver.grpc.admin.ReplicationGroupAdminService.GetNodes:output_type -> io.axoniq.axonserver.grpc.admin.NodeOverview
	53, // 70: io.axoniq.axonserver.grpc.admin.ReplicationGroupAdminService.CreateReplicationGroup:output_type -> google.protobuf.Empty
	10, // 71: io.axoniq.axonserver.grpc.admin.ReplicationGroupAdminService.GetReplicationGroups:output_type -> io.axoniq.axonserver.grpc.admin.ReplicationGroupOverview
	10, // 72: io.axoniq.axonserver.grpc.admin.ReplicationGroupAdminService.GetReplicationGroup:output_type -> io.axoniq.axonserver.grpc.admin.ReplicationGroupOverview
	53, // 73: io.axoniq.axonserver.grpc.admin.ReplicationGroupAdminService.DeleteReplicationGroup:output_type -> google.protobuf.Empty
	53, // 74: io.axoniq.axonserver.grpc.admin.ReplicationGroupAdminService.AddNodeToReplicationGroup:output_type -> google.protobuf.Empty
	53, // 75: io.axoniq.axonserver.grpc.admin.ReplicationGroupAdminService.RemoveNodeFromReplicationGroup:output_type -> google.protobuf.Empty
	19, // 76: io.axoniq.axonserver.grpc.admin.ApplicationAdminService.CreateOrUpdateApplication:output_type -> io.axoniq.axonserver.grpc.admin.Token
	53, // 77: io.axoniq.axonserver.grpc.admin.ApplicationAdminService.DeleteApplication:output_type -> google.protobuf.Empty
	21, // 78: io.axoniq.axonserver.grpc.admin.ApplicationAdminService.GetApplication:output_type -> io.axoniq.axonserver.grpc.admin.ApplicationOverview
	21, // 79: io.axoniq.axonserver.grpc.admin.ApplicationAdminService.GetApplications:output_type -> io.axoniq.axonserver.grpc.admin.ApplicationOverview
	19, // 80: io.axoniq.axonserver.grpc.admin.ApplicationAdminService.RefreshToken:output_type -> io.axoniq.axonserver.grpc.admin.Token
	23, // 81: io.axoniq.axonserver.grpc.admin.ApplicationAdminService.GetConnectedApplicationsByContext:output_type -> io.axoniq.axonserver.grpc.admin.ConnectedApplicationOverview
	53, // 82: io.axoniq.axonserver.grpc.admin.UserAdminService.CreateOrUpdateUser:output_type -> google.protobuf.Empty
	53, // 83: io.axoniq.axonserver.grpc.admin.UserAdminService.DeleteUser:output_type -> google.protobuf.Empty
	31, // 84: io.axoniq.axonserver.grpc.admin.UserAdminService.GetUsers:output_type -> io.axoniq.axonserver.grpc.admin.UserOverview
	32, // 85: io.axoniq.axonserver.grpc.admin.EventProcessorAdminService.PauseEventProcessor:output_type -> io.axoniq.axonserver.grpc.admin.AdminActionResult
	32, // 86: io.axoniq.axonserver.grpc.admin.EventProcessorAdminService.StartEventProcessor:output_type -> io.axoniq.axonserver.grpc.admin.AdminActionResult
	32, // 87: io.axoniq.axonserver.grpc.admin.EventProcessorAdminService.SplitEventProcessor:output_type -> io.axoniq.axonserver.grpc.admin.AdminActionResult
	32, // 88: io.axoniq.axonserver.grpc.admin.EventProcessorAdminService.MergeEventProcessor:output_type -> io.axoniq.axonserver.grpc.admin.AdminActionResult
	32, // 89: io.axoniq.axonserver.grpc.admin.EventProcessorAdminService.MoveEventProcessorSegment:output_type -> io.axoniq.axonserver.grpc.admin.AdminActionResult
	35, // 90: io.axoniq.axonserver.grpc.admin.EventProcessorAdminService.GetAllEventProcessors:output_type -> io.axoniq.axonserver.grpc.admin.EventProcessor
	35, // 91: io.axoniq.axonserver.grpc.admin.EventProcessorAdminService.GetEventProcessorsByComponent:output_type -> io.axoniq.axonserver.grpc.admin.EventProcessor
	53, // 92: io.axoniq.axonserver.grpc.admin.EventProcessorAdminService.LoadBalanceProcessor:output_type -> google.protobuf.Empty
	53, // 93: io.axoniq.axonserver.grpc.admin.EventProcessorAdminService.SetAutoLoadBalanceStrategy:output_type -> google.protobuf.Empty
	39, // 94: io.axoniq.axonserver.grpc.admin.EventProcessorAdminService.GetBalancingStrategies:output_type -> io.axoniq.axonserver.grpc.admin.LoadBalancingStrategy
	44, // 95: io.axoniq.axonserver.grpc.admin.AuthenticationService.AuthenticateUser:output_type -> io.axoniq.axonserver.grpc.admin.UserRoles
	42, // 96: io.axoniq.axonserver.grpc.admin.AuthenticationService.AuthenticateToken:output_type -> io.axoniq.axonserver.grpc.admin.ApplicationRoles
	63, // [63:97] is the sub-list for method output_type
	29, // [29:63] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_admin_proto_init() }
func file_admin_proto_init() {
	if File_admin_proto != nil {
		return
	}
	file_common_proto_init()
	file_control_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_admin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateContextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateContextPropertiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteContextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetContextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContextOverview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContextUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReplicationGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicationGroupOverview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReplicationGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicationGroupMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReplicationGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinReplicationGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveReplicationGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicationGroupContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationContextRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationOverview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContextId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectedApplicationOverview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientApplication); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Client); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrUpdateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRoleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRoleOverview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserOverview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminActionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventProcessorIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventProcessor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventProcessorInstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventProcessorSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadBalancingStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeOverview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthenticateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationRoles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContextRole); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_admin_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRoles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_admin_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   49,
			NumExtensions: 0,
			NumServices:   6,
		},
		GoTypes:           file_admin_proto_goTypes,
		DependencyIndexes: file_admin_proto_depIdxs,
		EnumInfos:         file_admin_proto_enumTypes,
		MessageInfos:      file_admin_proto_msgTypes,
	}.Build()
	File_admin_proto = out.File
	file_admin_proto_rawDesc = nil
	file_admin_proto_goTypes = nil
	file_admin_proto_depIdxs = nil
}
