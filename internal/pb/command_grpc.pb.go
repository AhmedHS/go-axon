// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: command.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommandServiceClient is the client API for CommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandServiceClient interface {
	// Opens a stream allowing clients to register command handlers and receive commands.
	OpenStream(ctx context.Context, opts ...grpc.CallOption) (CommandService_OpenStreamClient, error)
	// Dispatches the given command, returning the result of command execution
	Dispatch(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandResponse, error)
}

type commandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandServiceClient(cc grpc.ClientConnInterface) CommandServiceClient {
	return &commandServiceClient{cc}
}

func (c *commandServiceClient) OpenStream(ctx context.Context, opts ...grpc.CallOption) (CommandService_OpenStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &CommandService_ServiceDesc.Streams[0], "/io.axoniq.axonserver.grpc.command.CommandService/OpenStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &commandServiceOpenStreamClient{stream}
	return x, nil
}

type CommandService_OpenStreamClient interface {
	Send(*CommandProviderOutbound) error
	Recv() (*CommandProviderInbound, error)
	grpc.ClientStream
}

type commandServiceOpenStreamClient struct {
	grpc.ClientStream
}

func (x *commandServiceOpenStreamClient) Send(m *CommandProviderOutbound) error {
	return x.ClientStream.SendMsg(m)
}

func (x *commandServiceOpenStreamClient) Recv() (*CommandProviderInbound, error) {
	m := new(CommandProviderInbound)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *commandServiceClient) Dispatch(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, "/io.axoniq.axonserver.grpc.command.CommandService/Dispatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommandServiceServer is the server API for CommandService service.
// All implementations must embed UnimplementedCommandServiceServer
// for forward compatibility
type CommandServiceServer interface {
	// Opens a stream allowing clients to register command handlers and receive commands.
	OpenStream(CommandService_OpenStreamServer) error
	// Dispatches the given command, returning the result of command execution
	Dispatch(context.Context, *Command) (*CommandResponse, error)
	mustEmbedUnimplementedCommandServiceServer()
}

// UnimplementedCommandServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommandServiceServer struct {
}

func (UnimplementedCommandServiceServer) OpenStream(CommandService_OpenStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method OpenStream not implemented")
}
func (UnimplementedCommandServiceServer) Dispatch(context.Context, *Command) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dispatch not implemented")
}
func (UnimplementedCommandServiceServer) mustEmbedUnimplementedCommandServiceServer() {}

// UnsafeCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandServiceServer will
// result in compilation errors.
type UnsafeCommandServiceServer interface {
	mustEmbedUnimplementedCommandServiceServer()
}

func RegisterCommandServiceServer(s grpc.ServiceRegistrar, srv CommandServiceServer) {
	s.RegisterService(&CommandService_ServiceDesc, srv)
}

func _CommandService_OpenStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CommandServiceServer).OpenStream(&commandServiceOpenStreamServer{stream})
}

type CommandService_OpenStreamServer interface {
	Send(*CommandProviderInbound) error
	Recv() (*CommandProviderOutbound, error)
	grpc.ServerStream
}

type commandServiceOpenStreamServer struct {
	grpc.ServerStream
}

func (x *commandServiceOpenStreamServer) Send(m *CommandProviderInbound) error {
	return x.ServerStream.SendMsg(m)
}

func (x *commandServiceOpenStreamServer) Recv() (*CommandProviderOutbound, error) {
	m := new(CommandProviderOutbound)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CommandService_Dispatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandServiceServer).Dispatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.axoniq.axonserver.grpc.command.CommandService/Dispatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandServiceServer).Dispatch(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

// CommandService_ServiceDesc is the grpc.ServiceDesc for CommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.axoniq.axonserver.grpc.command.CommandService",
	HandlerType: (*CommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Dispatch",
			Handler:    _CommandService_Dispatch_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpenStream",
			Handler:       _CommandService_OpenStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "command.proto",
}
