// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: persistent-streams.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PersistentStreamServiceClient is the client API for PersistentStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersistentStreamServiceClient interface {
	// Creates a persistent stream if it does not exist.
	CreateStream(ctx context.Context, in *CreateStreamRequest, opts ...grpc.CallOption) (*CreateStreamResponse, error)
	// Open a persistent event stream connection from a client. Creates the stream if it does not exist.
	OpenStream(ctx context.Context, opts ...grpc.CallOption) (PersistentStreamService_OpenStreamClient, error)
	// Deletes a persistent event stream. All existing connections to the stream are closed.
	DeleteStream(ctx context.Context, in *DeleteStreamRequest, opts ...grpc.CallOption) (PersistentStreamService_DeleteStreamClient, error)
	// Change properties of a persistent event stream.
	UpdateStream(ctx context.Context, in *UpdateStreamRequest, opts ...grpc.CallOption) (PersistentStreamService_UpdateStreamClient, error)
	// Returns a list of all persistent event streams defined (for the context). For each event stream it returns
	// the progress per segment.
	ListStreams(ctx context.Context, in *ListStreamsRequest, opts ...grpc.CallOption) (PersistentStreamService_ListStreamsClient, error)
	// Resets the position of a persistent stream.
	ResetStream(ctx context.Context, in *ResetStreamRequest, opts ...grpc.CallOption) (PersistentStreamService_ResetStreamClient, error)
}

type persistentStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPersistentStreamServiceClient(cc grpc.ClientConnInterface) PersistentStreamServiceClient {
	return &persistentStreamServiceClient{cc}
}

func (c *persistentStreamServiceClient) CreateStream(ctx context.Context, in *CreateStreamRequest, opts ...grpc.CallOption) (*CreateStreamResponse, error) {
	out := new(CreateStreamResponse)
	err := c.cc.Invoke(ctx, "/io.axoniq.axonserver.grpc.streams.PersistentStreamService/CreateStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *persistentStreamServiceClient) OpenStream(ctx context.Context, opts ...grpc.CallOption) (PersistentStreamService_OpenStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &PersistentStreamService_ServiceDesc.Streams[0], "/io.axoniq.axonserver.grpc.streams.PersistentStreamService/OpenStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &persistentStreamServiceOpenStreamClient{stream}
	return x, nil
}

type PersistentStreamService_OpenStreamClient interface {
	Send(*StreamRequest) error
	Recv() (*StreamSignal, error)
	grpc.ClientStream
}

type persistentStreamServiceOpenStreamClient struct {
	grpc.ClientStream
}

func (x *persistentStreamServiceOpenStreamClient) Send(m *StreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *persistentStreamServiceOpenStreamClient) Recv() (*StreamSignal, error) {
	m := new(StreamSignal)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *persistentStreamServiceClient) DeleteStream(ctx context.Context, in *DeleteStreamRequest, opts ...grpc.CallOption) (PersistentStreamService_DeleteStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &PersistentStreamService_ServiceDesc.Streams[1], "/io.axoniq.axonserver.grpc.streams.PersistentStreamService/DeleteStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &persistentStreamServiceDeleteStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PersistentStreamService_DeleteStreamClient interface {
	Recv() (*empty.Empty, error)
	grpc.ClientStream
}

type persistentStreamServiceDeleteStreamClient struct {
	grpc.ClientStream
}

func (x *persistentStreamServiceDeleteStreamClient) Recv() (*empty.Empty, error) {
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *persistentStreamServiceClient) UpdateStream(ctx context.Context, in *UpdateStreamRequest, opts ...grpc.CallOption) (PersistentStreamService_UpdateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &PersistentStreamService_ServiceDesc.Streams[2], "/io.axoniq.axonserver.grpc.streams.PersistentStreamService/UpdateStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &persistentStreamServiceUpdateStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PersistentStreamService_UpdateStreamClient interface {
	Recv() (*empty.Empty, error)
	grpc.ClientStream
}

type persistentStreamServiceUpdateStreamClient struct {
	grpc.ClientStream
}

func (x *persistentStreamServiceUpdateStreamClient) Recv() (*empty.Empty, error) {
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *persistentStreamServiceClient) ListStreams(ctx context.Context, in *ListStreamsRequest, opts ...grpc.CallOption) (PersistentStreamService_ListStreamsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PersistentStreamService_ServiceDesc.Streams[3], "/io.axoniq.axonserver.grpc.streams.PersistentStreamService/ListStreams", opts...)
	if err != nil {
		return nil, err
	}
	x := &persistentStreamServiceListStreamsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PersistentStreamService_ListStreamsClient interface {
	Recv() (*StreamStatus, error)
	grpc.ClientStream
}

type persistentStreamServiceListStreamsClient struct {
	grpc.ClientStream
}

func (x *persistentStreamServiceListStreamsClient) Recv() (*StreamStatus, error) {
	m := new(StreamStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *persistentStreamServiceClient) ResetStream(ctx context.Context, in *ResetStreamRequest, opts ...grpc.CallOption) (PersistentStreamService_ResetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &PersistentStreamService_ServiceDesc.Streams[4], "/io.axoniq.axonserver.grpc.streams.PersistentStreamService/ResetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &persistentStreamServiceResetStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PersistentStreamService_ResetStreamClient interface {
	Recv() (*empty.Empty, error)
	grpc.ClientStream
}

type persistentStreamServiceResetStreamClient struct {
	grpc.ClientStream
}

func (x *persistentStreamServiceResetStreamClient) Recv() (*empty.Empty, error) {
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PersistentStreamServiceServer is the server API for PersistentStreamService service.
// All implementations must embed UnimplementedPersistentStreamServiceServer
// for forward compatibility
type PersistentStreamServiceServer interface {
	// Creates a persistent stream if it does not exist.
	CreateStream(context.Context, *CreateStreamRequest) (*CreateStreamResponse, error)
	// Open a persistent event stream connection from a client. Creates the stream if it does not exist.
	OpenStream(PersistentStreamService_OpenStreamServer) error
	// Deletes a persistent event stream. All existing connections to the stream are closed.
	DeleteStream(*DeleteStreamRequest, PersistentStreamService_DeleteStreamServer) error
	// Change properties of a persistent event stream.
	UpdateStream(*UpdateStreamRequest, PersistentStreamService_UpdateStreamServer) error
	// Returns a list of all persistent event streams defined (for the context). For each event stream it returns
	// the progress per segment.
	ListStreams(*ListStreamsRequest, PersistentStreamService_ListStreamsServer) error
	// Resets the position of a persistent stream.
	ResetStream(*ResetStreamRequest, PersistentStreamService_ResetStreamServer) error
	mustEmbedUnimplementedPersistentStreamServiceServer()
}

// UnimplementedPersistentStreamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPersistentStreamServiceServer struct {
}

func (UnimplementedPersistentStreamServiceServer) CreateStream(context.Context, *CreateStreamRequest) (*CreateStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStream not implemented")
}
func (UnimplementedPersistentStreamServiceServer) OpenStream(PersistentStreamService_OpenStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method OpenStream not implemented")
}
func (UnimplementedPersistentStreamServiceServer) DeleteStream(*DeleteStreamRequest, PersistentStreamService_DeleteStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteStream not implemented")
}
func (UnimplementedPersistentStreamServiceServer) UpdateStream(*UpdateStreamRequest, PersistentStreamService_UpdateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateStream not implemented")
}
func (UnimplementedPersistentStreamServiceServer) ListStreams(*ListStreamsRequest, PersistentStreamService_ListStreamsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListStreams not implemented")
}
func (UnimplementedPersistentStreamServiceServer) ResetStream(*ResetStreamRequest, PersistentStreamService_ResetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ResetStream not implemented")
}
func (UnimplementedPersistentStreamServiceServer) mustEmbedUnimplementedPersistentStreamServiceServer() {
}

// UnsafePersistentStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersistentStreamServiceServer will
// result in compilation errors.
type UnsafePersistentStreamServiceServer interface {
	mustEmbedUnimplementedPersistentStreamServiceServer()
}

func RegisterPersistentStreamServiceServer(s grpc.ServiceRegistrar, srv PersistentStreamServiceServer) {
	s.RegisterService(&PersistentStreamService_ServiceDesc, srv)
}

func _PersistentStreamService_CreateStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersistentStreamServiceServer).CreateStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.axoniq.axonserver.grpc.streams.PersistentStreamService/CreateStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersistentStreamServiceServer).CreateStream(ctx, req.(*CreateStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersistentStreamService_OpenStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersistentStreamServiceServer).OpenStream(&persistentStreamServiceOpenStreamServer{stream})
}

type PersistentStreamService_OpenStreamServer interface {
	Send(*StreamSignal) error
	Recv() (*StreamRequest, error)
	grpc.ServerStream
}

type persistentStreamServiceOpenStreamServer struct {
	grpc.ServerStream
}

func (x *persistentStreamServiceOpenStreamServer) Send(m *StreamSignal) error {
	return x.ServerStream.SendMsg(m)
}

func (x *persistentStreamServiceOpenStreamServer) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PersistentStreamService_DeleteStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeleteStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PersistentStreamServiceServer).DeleteStream(m, &persistentStreamServiceDeleteStreamServer{stream})
}

type PersistentStreamService_DeleteStreamServer interface {
	Send(*empty.Empty) error
	grpc.ServerStream
}

type persistentStreamServiceDeleteStreamServer struct {
	grpc.ServerStream
}

func (x *persistentStreamServiceDeleteStreamServer) Send(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func _PersistentStreamService_UpdateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PersistentStreamServiceServer).UpdateStream(m, &persistentStreamServiceUpdateStreamServer{stream})
}

type PersistentStreamService_UpdateStreamServer interface {
	Send(*empty.Empty) error
	grpc.ServerStream
}

type persistentStreamServiceUpdateStreamServer struct {
	grpc.ServerStream
}

func (x *persistentStreamServiceUpdateStreamServer) Send(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func _PersistentStreamService_ListStreams_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListStreamsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PersistentStreamServiceServer).ListStreams(m, &persistentStreamServiceListStreamsServer{stream})
}

type PersistentStreamService_ListStreamsServer interface {
	Send(*StreamStatus) error
	grpc.ServerStream
}

type persistentStreamServiceListStreamsServer struct {
	grpc.ServerStream
}

func (x *persistentStreamServiceListStreamsServer) Send(m *StreamStatus) error {
	return x.ServerStream.SendMsg(m)
}

func _PersistentStreamService_ResetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ResetStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PersistentStreamServiceServer).ResetStream(m, &persistentStreamServiceResetStreamServer{stream})
}

type PersistentStreamService_ResetStreamServer interface {
	Send(*empty.Empty) error
	grpc.ServerStream
}

type persistentStreamServiceResetStreamServer struct {
	grpc.ServerStream
}

func (x *persistentStreamServiceResetStreamServer) Send(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

// PersistentStreamService_ServiceDesc is the grpc.ServiceDesc for PersistentStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersistentStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.axoniq.axonserver.grpc.streams.PersistentStreamService",
	HandlerType: (*PersistentStreamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStream",
			Handler:    _PersistentStreamService_CreateStream_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OpenStream",
			Handler:       _PersistentStreamService_OpenStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DeleteStream",
			Handler:       _PersistentStreamService_DeleteStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateStream",
			Handler:       _PersistentStreamService_UpdateStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListStreams",
			Handler:       _PersistentStreamService_ListStreams_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ResetStream",
			Handler:       _PersistentStreamService_ResetStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "persistent-streams.proto",
}
