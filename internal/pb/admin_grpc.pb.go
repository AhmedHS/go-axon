// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: admin.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContextAdminServiceClient is the client API for ContextAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContextAdminServiceClient interface {
	CreateContext(ctx context.Context, in *CreateContextRequest, opts ...grpc.CallOption) (ContextAdminService_CreateContextClient, error)
	UpdateContextProperties(ctx context.Context, in *UpdateContextPropertiesRequest, opts ...grpc.CallOption) (ContextAdminService_UpdateContextPropertiesClient, error)
	DeleteContext(ctx context.Context, in *DeleteContextRequest, opts ...grpc.CallOption) (ContextAdminService_DeleteContextClient, error)
	GetContext(ctx context.Context, in *GetContextRequest, opts ...grpc.CallOption) (*ContextOverview, error)
	GetContexts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ContextAdminService_GetContextsClient, error)
	SubscribeContextUpdates(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ContextAdminService_SubscribeContextUpdatesClient, error)
}

type contextAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContextAdminServiceClient(cc grpc.ClientConnInterface) ContextAdminServiceClient {
	return &contextAdminServiceClient{cc}
}

func (c *contextAdminServiceClient) CreateContext(ctx context.Context, in *CreateContextRequest, opts ...grpc.CallOption) (ContextAdminService_CreateContextClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContextAdminService_ServiceDesc.Streams[0], "/io.axoniq.axonserver.grpc.admin.ContextAdminService/CreateContext", opts...)
	if err != nil {
		return nil, err
	}
	x := &contextAdminServiceCreateContextClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContextAdminService_CreateContextClient interface {
	Recv() (*empty.Empty, error)
	grpc.ClientStream
}

type contextAdminServiceCreateContextClient struct {
	grpc.ClientStream
}

func (x *contextAdminServiceCreateContextClient) Recv() (*empty.Empty, error) {
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contextAdminServiceClient) UpdateContextProperties(ctx context.Context, in *UpdateContextPropertiesRequest, opts ...grpc.CallOption) (ContextAdminService_UpdateContextPropertiesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContextAdminService_ServiceDesc.Streams[1], "/io.axoniq.axonserver.grpc.admin.ContextAdminService/UpdateContextProperties", opts...)
	if err != nil {
		return nil, err
	}
	x := &contextAdminServiceUpdateContextPropertiesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContextAdminService_UpdateContextPropertiesClient interface {
	Recv() (*empty.Empty, error)
	grpc.ClientStream
}

type contextAdminServiceUpdateContextPropertiesClient struct {
	grpc.ClientStream
}

func (x *contextAdminServiceUpdateContextPropertiesClient) Recv() (*empty.Empty, error) {
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contextAdminServiceClient) DeleteContext(ctx context.Context, in *DeleteContextRequest, opts ...grpc.CallOption) (ContextAdminService_DeleteContextClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContextAdminService_ServiceDesc.Streams[2], "/io.axoniq.axonserver.grpc.admin.ContextAdminService/DeleteContext", opts...)
	if err != nil {
		return nil, err
	}
	x := &contextAdminServiceDeleteContextClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContextAdminService_DeleteContextClient interface {
	Recv() (*empty.Empty, error)
	grpc.ClientStream
}

type contextAdminServiceDeleteContextClient struct {
	grpc.ClientStream
}

func (x *contextAdminServiceDeleteContextClient) Recv() (*empty.Empty, error) {
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contextAdminServiceClient) GetContext(ctx context.Context, in *GetContextRequest, opts ...grpc.CallOption) (*ContextOverview, error) {
	out := new(ContextOverview)
	err := c.cc.Invoke(ctx, "/io.axoniq.axonserver.grpc.admin.ContextAdminService/GetContext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contextAdminServiceClient) GetContexts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ContextAdminService_GetContextsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContextAdminService_ServiceDesc.Streams[3], "/io.axoniq.axonserver.grpc.admin.ContextAdminService/GetContexts", opts...)
	if err != nil {
		return nil, err
	}
	x := &contextAdminServiceGetContextsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContextAdminService_GetContextsClient interface {
	Recv() (*ContextOverview, error)
	grpc.ClientStream
}

type contextAdminServiceGetContextsClient struct {
	grpc.ClientStream
}

func (x *contextAdminServiceGetContextsClient) Recv() (*ContextOverview, error) {
	m := new(ContextOverview)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contextAdminServiceClient) SubscribeContextUpdates(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ContextAdminService_SubscribeContextUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContextAdminService_ServiceDesc.Streams[4], "/io.axoniq.axonserver.grpc.admin.ContextAdminService/SubscribeContextUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &contextAdminServiceSubscribeContextUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContextAdminService_SubscribeContextUpdatesClient interface {
	Recv() (*ContextUpdate, error)
	grpc.ClientStream
}

type contextAdminServiceSubscribeContextUpdatesClient struct {
	grpc.ClientStream
}

func (x *contextAdminServiceSubscribeContextUpdatesClient) Recv() (*ContextUpdate, error) {
	m := new(ContextUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ContextAdminServiceServer is the server API for ContextAdminService service.
// All implementations must embed UnimplementedContextAdminServiceServer
// for forward compatibility
type ContextAdminServiceServer interface {
	CreateContext(*CreateContextRequest, ContextAdminService_CreateContextServer) error
	UpdateContextProperties(*UpdateContextPropertiesRequest, ContextAdminService_UpdateContextPropertiesServer) error
	DeleteContext(*DeleteContextRequest, ContextAdminService_DeleteContextServer) error
	GetContext(context.Context, *GetContextRequest) (*ContextOverview, error)
	GetContexts(*empty.Empty, ContextAdminService_GetContextsServer) error
	SubscribeContextUpdates(*empty.Empty, ContextAdminService_SubscribeContextUpdatesServer) error
	mustEmbedUnimplementedContextAdminServiceServer()
}

// UnimplementedContextAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContextAdminServiceServer struct {
}

func (UnimplementedContextAdminServiceServer) CreateContext(*CreateContextRequest, ContextAdminService_CreateContextServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateContext not implemented")
}
func (UnimplementedContextAdminServiceServer) UpdateContextProperties(*UpdateContextPropertiesRequest, ContextAdminService_UpdateContextPropertiesServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateContextProperties not implemented")
}
func (UnimplementedContextAdminServiceServer) DeleteContext(*DeleteContextRequest, ContextAdminService_DeleteContextServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteContext not implemented")
}
func (UnimplementedContextAdminServiceServer) GetContext(context.Context, *GetContextRequest) (*ContextOverview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContext not implemented")
}
func (UnimplementedContextAdminServiceServer) GetContexts(*empty.Empty, ContextAdminService_GetContextsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetContexts not implemented")
}
func (UnimplementedContextAdminServiceServer) SubscribeContextUpdates(*empty.Empty, ContextAdminService_SubscribeContextUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeContextUpdates not implemented")
}
func (UnimplementedContextAdminServiceServer) mustEmbedUnimplementedContextAdminServiceServer() {}

// UnsafeContextAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContextAdminServiceServer will
// result in compilation errors.
type UnsafeContextAdminServiceServer interface {
	mustEmbedUnimplementedContextAdminServiceServer()
}

func RegisterContextAdminServiceServer(s grpc.ServiceRegistrar, srv ContextAdminServiceServer) {
	s.RegisterService(&ContextAdminService_ServiceDesc, srv)
}

func _ContextAdminService_CreateContext_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateContextRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContextAdminServiceServer).CreateContext(m, &contextAdminServiceCreateContextServer{stream})
}

type ContextAdminService_CreateContextServer interface {
	Send(*empty.Empty) error
	grpc.ServerStream
}

type contextAdminServiceCreateContextServer struct {
	grpc.ServerStream
}

func (x *contextAdminServiceCreateContextServer) Send(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func _ContextAdminService_UpdateContextProperties_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateContextPropertiesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContextAdminServiceServer).UpdateContextProperties(m, &contextAdminServiceUpdateContextPropertiesServer{stream})
}

type ContextAdminService_UpdateContextPropertiesServer interface {
	Send(*empty.Empty) error
	grpc.ServerStream
}

type contextAdminServiceUpdateContextPropertiesServer struct {
	grpc.ServerStream
}

func (x *contextAdminServiceUpdateContextPropertiesServer) Send(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func _ContextAdminService_DeleteContext_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeleteContextRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContextAdminServiceServer).DeleteContext(m, &contextAdminServiceDeleteContextServer{stream})
}

type ContextAdminService_DeleteContextServer interface {
	Send(*empty.Empty) error
	grpc.ServerStream
}

type contextAdminServiceDeleteContextServer struct {
	grpc.ServerStream
}

func (x *contextAdminServiceDeleteContextServer) Send(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func _ContextAdminService_GetContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContextAdminServiceServer).GetContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.axoniq.axonserver.grpc.admin.ContextAdminService/GetContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContextAdminServiceServer).GetContext(ctx, req.(*GetContextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContextAdminService_GetContexts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContextAdminServiceServer).GetContexts(m, &contextAdminServiceGetContextsServer{stream})
}

type ContextAdminService_GetContextsServer interface {
	Send(*ContextOverview) error
	grpc.ServerStream
}

type contextAdminServiceGetContextsServer struct {
	grpc.ServerStream
}

func (x *contextAdminServiceGetContextsServer) Send(m *ContextOverview) error {
	return x.ServerStream.SendMsg(m)
}

func _ContextAdminService_SubscribeContextUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContextAdminServiceServer).SubscribeContextUpdates(m, &contextAdminServiceSubscribeContextUpdatesServer{stream})
}

type ContextAdminService_SubscribeContextUpdatesServer interface {
	Send(*ContextUpdate) error
	grpc.ServerStream
}

type contextAdminServiceSubscribeContextUpdatesServer struct {
	grpc.ServerStream
}

func (x *contextAdminServiceSubscribeContextUpdatesServer) Send(m *ContextUpdate) error {
	return x.ServerStream.SendMsg(m)
}

// ContextAdminService_ServiceDesc is the grpc.ServiceDesc for ContextAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContextAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.axoniq.axonserver.grpc.admin.ContextAdminService",
	HandlerType: (*ContextAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetContext",
			Handler:    _ContextAdminService_GetContext_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateContext",
			Handler:       _ContextAdminService_CreateContext_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpdateContextProperties",
			Handler:       _ContextAdminService_UpdateContextProperties_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteContext",
			Handler:       _ContextAdminService_DeleteContext_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetContexts",
			Handler:       _ContextAdminService_GetContexts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeContextUpdates",
			Handler:       _ContextAdminService_SubscribeContextUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "admin.proto",
}

// ReplicationGroupAdminServiceClient is the client API for ReplicationGroupAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReplicationGroupAdminServiceClient interface {
	GetNodes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ReplicationGroupAdminService_GetNodesClient, error)
	CreateReplicationGroup(ctx context.Context, in *CreateReplicationGroupRequest, opts ...grpc.CallOption) (ReplicationGroupAdminService_CreateReplicationGroupClient, error)
	GetReplicationGroups(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ReplicationGroupAdminService_GetReplicationGroupsClient, error)
	GetReplicationGroup(ctx context.Context, in *GetReplicationGroupRequest, opts ...grpc.CallOption) (*ReplicationGroupOverview, error)
	DeleteReplicationGroup(ctx context.Context, in *DeleteReplicationGroupRequest, opts ...grpc.CallOption) (ReplicationGroupAdminService_DeleteReplicationGroupClient, error)
	AddNodeToReplicationGroup(ctx context.Context, in *JoinReplicationGroup, opts ...grpc.CallOption) (ReplicationGroupAdminService_AddNodeToReplicationGroupClient, error)
	RemoveNodeFromReplicationGroup(ctx context.Context, in *LeaveReplicationGroup, opts ...grpc.CallOption) (ReplicationGroupAdminService_RemoveNodeFromReplicationGroupClient, error)
}

type replicationGroupAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReplicationGroupAdminServiceClient(cc grpc.ClientConnInterface) ReplicationGroupAdminServiceClient {
	return &replicationGroupAdminServiceClient{cc}
}

func (c *replicationGroupAdminServiceClient) GetNodes(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ReplicationGroupAdminService_GetNodesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReplicationGroupAdminService_ServiceDesc.Streams[0], "/io.axoniq.axonserver.grpc.admin.ReplicationGroupAdminService/GetNodes", opts...)
	if err != nil {
		return nil, err
	}
	x := &replicationGroupAdminServiceGetNodesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReplicationGroupAdminService_GetNodesClient interface {
	Recv() (*NodeOverview, error)
	grpc.ClientStream
}

type replicationGroupAdminServiceGetNodesClient struct {
	grpc.ClientStream
}

func (x *replicationGroupAdminServiceGetNodesClient) Recv() (*NodeOverview, error) {
	m := new(NodeOverview)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replicationGroupAdminServiceClient) CreateReplicationGroup(ctx context.Context, in *CreateReplicationGroupRequest, opts ...grpc.CallOption) (ReplicationGroupAdminService_CreateReplicationGroupClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReplicationGroupAdminService_ServiceDesc.Streams[1], "/io.axoniq.axonserver.grpc.admin.ReplicationGroupAdminService/CreateReplicationGroup", opts...)
	if err != nil {
		return nil, err
	}
	x := &replicationGroupAdminServiceCreateReplicationGroupClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReplicationGroupAdminService_CreateReplicationGroupClient interface {
	Recv() (*empty.Empty, error)
	grpc.ClientStream
}

type replicationGroupAdminServiceCreateReplicationGroupClient struct {
	grpc.ClientStream
}

func (x *replicationGroupAdminServiceCreateReplicationGroupClient) Recv() (*empty.Empty, error) {
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replicationGroupAdminServiceClient) GetReplicationGroups(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ReplicationGroupAdminService_GetReplicationGroupsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReplicationGroupAdminService_ServiceDesc.Streams[2], "/io.axoniq.axonserver.grpc.admin.ReplicationGroupAdminService/GetReplicationGroups", opts...)
	if err != nil {
		return nil, err
	}
	x := &replicationGroupAdminServiceGetReplicationGroupsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReplicationGroupAdminService_GetReplicationGroupsClient interface {
	Recv() (*ReplicationGroupOverview, error)
	grpc.ClientStream
}

type replicationGroupAdminServiceGetReplicationGroupsClient struct {
	grpc.ClientStream
}

func (x *replicationGroupAdminServiceGetReplicationGroupsClient) Recv() (*ReplicationGroupOverview, error) {
	m := new(ReplicationGroupOverview)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replicationGroupAdminServiceClient) GetReplicationGroup(ctx context.Context, in *GetReplicationGroupRequest, opts ...grpc.CallOption) (*ReplicationGroupOverview, error) {
	out := new(ReplicationGroupOverview)
	err := c.cc.Invoke(ctx, "/io.axoniq.axonserver.grpc.admin.ReplicationGroupAdminService/GetReplicationGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *replicationGroupAdminServiceClient) DeleteReplicationGroup(ctx context.Context, in *DeleteReplicationGroupRequest, opts ...grpc.CallOption) (ReplicationGroupAdminService_DeleteReplicationGroupClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReplicationGroupAdminService_ServiceDesc.Streams[3], "/io.axoniq.axonserver.grpc.admin.ReplicationGroupAdminService/DeleteReplicationGroup", opts...)
	if err != nil {
		return nil, err
	}
	x := &replicationGroupAdminServiceDeleteReplicationGroupClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReplicationGroupAdminService_DeleteReplicationGroupClient interface {
	Recv() (*empty.Empty, error)
	grpc.ClientStream
}

type replicationGroupAdminServiceDeleteReplicationGroupClient struct {
	grpc.ClientStream
}

func (x *replicationGroupAdminServiceDeleteReplicationGroupClient) Recv() (*empty.Empty, error) {
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replicationGroupAdminServiceClient) AddNodeToReplicationGroup(ctx context.Context, in *JoinReplicationGroup, opts ...grpc.CallOption) (ReplicationGroupAdminService_AddNodeToReplicationGroupClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReplicationGroupAdminService_ServiceDesc.Streams[4], "/io.axoniq.axonserver.grpc.admin.ReplicationGroupAdminService/AddNodeToReplicationGroup", opts...)
	if err != nil {
		return nil, err
	}
	x := &replicationGroupAdminServiceAddNodeToReplicationGroupClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReplicationGroupAdminService_AddNodeToReplicationGroupClient interface {
	Recv() (*empty.Empty, error)
	grpc.ClientStream
}

type replicationGroupAdminServiceAddNodeToReplicationGroupClient struct {
	grpc.ClientStream
}

func (x *replicationGroupAdminServiceAddNodeToReplicationGroupClient) Recv() (*empty.Empty, error) {
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *replicationGroupAdminServiceClient) RemoveNodeFromReplicationGroup(ctx context.Context, in *LeaveReplicationGroup, opts ...grpc.CallOption) (ReplicationGroupAdminService_RemoveNodeFromReplicationGroupClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReplicationGroupAdminService_ServiceDesc.Streams[5], "/io.axoniq.axonserver.grpc.admin.ReplicationGroupAdminService/RemoveNodeFromReplicationGroup", opts...)
	if err != nil {
		return nil, err
	}
	x := &replicationGroupAdminServiceRemoveNodeFromReplicationGroupClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ReplicationGroupAdminService_RemoveNodeFromReplicationGroupClient interface {
	Recv() (*empty.Empty, error)
	grpc.ClientStream
}

type replicationGroupAdminServiceRemoveNodeFromReplicationGroupClient struct {
	grpc.ClientStream
}

func (x *replicationGroupAdminServiceRemoveNodeFromReplicationGroupClient) Recv() (*empty.Empty, error) {
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReplicationGroupAdminServiceServer is the server API for ReplicationGroupAdminService service.
// All implementations must embed UnimplementedReplicationGroupAdminServiceServer
// for forward compatibility
type ReplicationGroupAdminServiceServer interface {
	GetNodes(*empty.Empty, ReplicationGroupAdminService_GetNodesServer) error
	CreateReplicationGroup(*CreateReplicationGroupRequest, ReplicationGroupAdminService_CreateReplicationGroupServer) error
	GetReplicationGroups(*empty.Empty, ReplicationGroupAdminService_GetReplicationGroupsServer) error
	GetReplicationGroup(context.Context, *GetReplicationGroupRequest) (*ReplicationGroupOverview, error)
	DeleteReplicationGroup(*DeleteReplicationGroupRequest, ReplicationGroupAdminService_DeleteReplicationGroupServer) error
	AddNodeToReplicationGroup(*JoinReplicationGroup, ReplicationGroupAdminService_AddNodeToReplicationGroupServer) error
	RemoveNodeFromReplicationGroup(*LeaveReplicationGroup, ReplicationGroupAdminService_RemoveNodeFromReplicationGroupServer) error
	mustEmbedUnimplementedReplicationGroupAdminServiceServer()
}

// UnimplementedReplicationGroupAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReplicationGroupAdminServiceServer struct {
}

func (UnimplementedReplicationGroupAdminServiceServer) GetNodes(*empty.Empty, ReplicationGroupAdminService_GetNodesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (UnimplementedReplicationGroupAdminServiceServer) CreateReplicationGroup(*CreateReplicationGroupRequest, ReplicationGroupAdminService_CreateReplicationGroupServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateReplicationGroup not implemented")
}
func (UnimplementedReplicationGroupAdminServiceServer) GetReplicationGroups(*empty.Empty, ReplicationGroupAdminService_GetReplicationGroupsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetReplicationGroups not implemented")
}
func (UnimplementedReplicationGroupAdminServiceServer) GetReplicationGroup(context.Context, *GetReplicationGroupRequest) (*ReplicationGroupOverview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplicationGroup not implemented")
}
func (UnimplementedReplicationGroupAdminServiceServer) DeleteReplicationGroup(*DeleteReplicationGroupRequest, ReplicationGroupAdminService_DeleteReplicationGroupServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteReplicationGroup not implemented")
}
func (UnimplementedReplicationGroupAdminServiceServer) AddNodeToReplicationGroup(*JoinReplicationGroup, ReplicationGroupAdminService_AddNodeToReplicationGroupServer) error {
	return status.Errorf(codes.Unimplemented, "method AddNodeToReplicationGroup not implemented")
}
func (UnimplementedReplicationGroupAdminServiceServer) RemoveNodeFromReplicationGroup(*LeaveReplicationGroup, ReplicationGroupAdminService_RemoveNodeFromReplicationGroupServer) error {
	return status.Errorf(codes.Unimplemented, "method RemoveNodeFromReplicationGroup not implemented")
}
func (UnimplementedReplicationGroupAdminServiceServer) mustEmbedUnimplementedReplicationGroupAdminServiceServer() {
}

// UnsafeReplicationGroupAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReplicationGroupAdminServiceServer will
// result in compilation errors.
type UnsafeReplicationGroupAdminServiceServer interface {
	mustEmbedUnimplementedReplicationGroupAdminServiceServer()
}

func RegisterReplicationGroupAdminServiceServer(s grpc.ServiceRegistrar, srv ReplicationGroupAdminServiceServer) {
	s.RegisterService(&ReplicationGroupAdminService_ServiceDesc, srv)
}

func _ReplicationGroupAdminService_GetNodes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReplicationGroupAdminServiceServer).GetNodes(m, &replicationGroupAdminServiceGetNodesServer{stream})
}

type ReplicationGroupAdminService_GetNodesServer interface {
	Send(*NodeOverview) error
	grpc.ServerStream
}

type replicationGroupAdminServiceGetNodesServer struct {
	grpc.ServerStream
}

func (x *replicationGroupAdminServiceGetNodesServer) Send(m *NodeOverview) error {
	return x.ServerStream.SendMsg(m)
}

func _ReplicationGroupAdminService_CreateReplicationGroup_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateReplicationGroupRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReplicationGroupAdminServiceServer).CreateReplicationGroup(m, &replicationGroupAdminServiceCreateReplicationGroupServer{stream})
}

type ReplicationGroupAdminService_CreateReplicationGroupServer interface {
	Send(*empty.Empty) error
	grpc.ServerStream
}

type replicationGroupAdminServiceCreateReplicationGroupServer struct {
	grpc.ServerStream
}

func (x *replicationGroupAdminServiceCreateReplicationGroupServer) Send(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func _ReplicationGroupAdminService_GetReplicationGroups_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReplicationGroupAdminServiceServer).GetReplicationGroups(m, &replicationGroupAdminServiceGetReplicationGroupsServer{stream})
}

type ReplicationGroupAdminService_GetReplicationGroupsServer interface {
	Send(*ReplicationGroupOverview) error
	grpc.ServerStream
}

type replicationGroupAdminServiceGetReplicationGroupsServer struct {
	grpc.ServerStream
}

func (x *replicationGroupAdminServiceGetReplicationGroupsServer) Send(m *ReplicationGroupOverview) error {
	return x.ServerStream.SendMsg(m)
}

func _ReplicationGroupAdminService_GetReplicationGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReplicationGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReplicationGroupAdminServiceServer).GetReplicationGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.axoniq.axonserver.grpc.admin.ReplicationGroupAdminService/GetReplicationGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReplicationGroupAdminServiceServer).GetReplicationGroup(ctx, req.(*GetReplicationGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReplicationGroupAdminService_DeleteReplicationGroup_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeleteReplicationGroupRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReplicationGroupAdminServiceServer).DeleteReplicationGroup(m, &replicationGroupAdminServiceDeleteReplicationGroupServer{stream})
}

type ReplicationGroupAdminService_DeleteReplicationGroupServer interface {
	Send(*empty.Empty) error
	grpc.ServerStream
}

type replicationGroupAdminServiceDeleteReplicationGroupServer struct {
	grpc.ServerStream
}

func (x *replicationGroupAdminServiceDeleteReplicationGroupServer) Send(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func _ReplicationGroupAdminService_AddNodeToReplicationGroup_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JoinReplicationGroup)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReplicationGroupAdminServiceServer).AddNodeToReplicationGroup(m, &replicationGroupAdminServiceAddNodeToReplicationGroupServer{stream})
}

type ReplicationGroupAdminService_AddNodeToReplicationGroupServer interface {
	Send(*empty.Empty) error
	grpc.ServerStream
}

type replicationGroupAdminServiceAddNodeToReplicationGroupServer struct {
	grpc.ServerStream
}

func (x *replicationGroupAdminServiceAddNodeToReplicationGroupServer) Send(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func _ReplicationGroupAdminService_RemoveNodeFromReplicationGroup_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LeaveReplicationGroup)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReplicationGroupAdminServiceServer).RemoveNodeFromReplicationGroup(m, &replicationGroupAdminServiceRemoveNodeFromReplicationGroupServer{stream})
}

type ReplicationGroupAdminService_RemoveNodeFromReplicationGroupServer interface {
	Send(*empty.Empty) error
	grpc.ServerStream
}

type replicationGroupAdminServiceRemoveNodeFromReplicationGroupServer struct {
	grpc.ServerStream
}

func (x *replicationGroupAdminServiceRemoveNodeFromReplicationGroupServer) Send(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

// ReplicationGroupAdminService_ServiceDesc is the grpc.ServiceDesc for ReplicationGroupAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReplicationGroupAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.axoniq.axonserver.grpc.admin.ReplicationGroupAdminService",
	HandlerType: (*ReplicationGroupAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReplicationGroup",
			Handler:    _ReplicationGroupAdminService_GetReplicationGroup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetNodes",
			Handler:       _ReplicationGroupAdminService_GetNodes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateReplicationGroup",
			Handler:       _ReplicationGroupAdminService_CreateReplicationGroup_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetReplicationGroups",
			Handler:       _ReplicationGroupAdminService_GetReplicationGroups_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteReplicationGroup",
			Handler:       _ReplicationGroupAdminService_DeleteReplicationGroup_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddNodeToReplicationGroup",
			Handler:       _ReplicationGroupAdminService_AddNodeToReplicationGroup_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RemoveNodeFromReplicationGroup",
			Handler:       _ReplicationGroupAdminService_RemoveNodeFromReplicationGroup_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "admin.proto",
}

// ApplicationAdminServiceClient is the client API for ApplicationAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationAdminServiceClient interface {
	CreateOrUpdateApplication(ctx context.Context, in *ApplicationRequest, opts ...grpc.CallOption) (*Token, error)
	DeleteApplication(ctx context.Context, in *ApplicationId, opts ...grpc.CallOption) (ApplicationAdminService_DeleteApplicationClient, error)
	GetApplication(ctx context.Context, in *ApplicationId, opts ...grpc.CallOption) (*ApplicationOverview, error)
	GetApplications(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ApplicationAdminService_GetApplicationsClient, error)
	RefreshToken(ctx context.Context, in *ApplicationId, opts ...grpc.CallOption) (*Token, error)
	GetConnectedApplicationsByContext(ctx context.Context, in *ContextId, opts ...grpc.CallOption) (*ConnectedApplicationOverview, error)
}

type applicationAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationAdminServiceClient(cc grpc.ClientConnInterface) ApplicationAdminServiceClient {
	return &applicationAdminServiceClient{cc}
}

func (c *applicationAdminServiceClient) CreateOrUpdateApplication(ctx context.Context, in *ApplicationRequest, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/io.axoniq.axonserver.grpc.admin.ApplicationAdminService/CreateOrUpdateApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationAdminServiceClient) DeleteApplication(ctx context.Context, in *ApplicationId, opts ...grpc.CallOption) (ApplicationAdminService_DeleteApplicationClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApplicationAdminService_ServiceDesc.Streams[0], "/io.axoniq.axonserver.grpc.admin.ApplicationAdminService/DeleteApplication", opts...)
	if err != nil {
		return nil, err
	}
	x := &applicationAdminServiceDeleteApplicationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApplicationAdminService_DeleteApplicationClient interface {
	Recv() (*empty.Empty, error)
	grpc.ClientStream
}

type applicationAdminServiceDeleteApplicationClient struct {
	grpc.ClientStream
}

func (x *applicationAdminServiceDeleteApplicationClient) Recv() (*empty.Empty, error) {
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *applicationAdminServiceClient) GetApplication(ctx context.Context, in *ApplicationId, opts ...grpc.CallOption) (*ApplicationOverview, error) {
	out := new(ApplicationOverview)
	err := c.cc.Invoke(ctx, "/io.axoniq.axonserver.grpc.admin.ApplicationAdminService/GetApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationAdminServiceClient) GetApplications(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (ApplicationAdminService_GetApplicationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApplicationAdminService_ServiceDesc.Streams[1], "/io.axoniq.axonserver.grpc.admin.ApplicationAdminService/GetApplications", opts...)
	if err != nil {
		return nil, err
	}
	x := &applicationAdminServiceGetApplicationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApplicationAdminService_GetApplicationsClient interface {
	Recv() (*ApplicationOverview, error)
	grpc.ClientStream
}

type applicationAdminServiceGetApplicationsClient struct {
	grpc.ClientStream
}

func (x *applicationAdminServiceGetApplicationsClient) Recv() (*ApplicationOverview, error) {
	m := new(ApplicationOverview)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *applicationAdminServiceClient) RefreshToken(ctx context.Context, in *ApplicationId, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/io.axoniq.axonserver.grpc.admin.ApplicationAdminService/RefreshToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationAdminServiceClient) GetConnectedApplicationsByContext(ctx context.Context, in *ContextId, opts ...grpc.CallOption) (*ConnectedApplicationOverview, error) {
	out := new(ConnectedApplicationOverview)
	err := c.cc.Invoke(ctx, "/io.axoniq.axonserver.grpc.admin.ApplicationAdminService/GetConnectedApplicationsByContext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationAdminServiceServer is the server API for ApplicationAdminService service.
// All implementations must embed UnimplementedApplicationAdminServiceServer
// for forward compatibility
type ApplicationAdminServiceServer interface {
	CreateOrUpdateApplication(context.Context, *ApplicationRequest) (*Token, error)
	DeleteApplication(*ApplicationId, ApplicationAdminService_DeleteApplicationServer) error
	GetApplication(context.Context, *ApplicationId) (*ApplicationOverview, error)
	GetApplications(*empty.Empty, ApplicationAdminService_GetApplicationsServer) error
	RefreshToken(context.Context, *ApplicationId) (*Token, error)
	GetConnectedApplicationsByContext(context.Context, *ContextId) (*ConnectedApplicationOverview, error)
	mustEmbedUnimplementedApplicationAdminServiceServer()
}

// UnimplementedApplicationAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationAdminServiceServer struct {
}

func (UnimplementedApplicationAdminServiceServer) CreateOrUpdateApplication(context.Context, *ApplicationRequest) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateApplication not implemented")
}
func (UnimplementedApplicationAdminServiceServer) DeleteApplication(*ApplicationId, ApplicationAdminService_DeleteApplicationServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteApplication not implemented")
}
func (UnimplementedApplicationAdminServiceServer) GetApplication(context.Context, *ApplicationId) (*ApplicationOverview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplication not implemented")
}
func (UnimplementedApplicationAdminServiceServer) GetApplications(*empty.Empty, ApplicationAdminService_GetApplicationsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetApplications not implemented")
}
func (UnimplementedApplicationAdminServiceServer) RefreshToken(context.Context, *ApplicationId) (*Token, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedApplicationAdminServiceServer) GetConnectedApplicationsByContext(context.Context, *ContextId) (*ConnectedApplicationOverview, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectedApplicationsByContext not implemented")
}
func (UnimplementedApplicationAdminServiceServer) mustEmbedUnimplementedApplicationAdminServiceServer() {
}

// UnsafeApplicationAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationAdminServiceServer will
// result in compilation errors.
type UnsafeApplicationAdminServiceServer interface {
	mustEmbedUnimplementedApplicationAdminServiceServer()
}

func RegisterApplicationAdminServiceServer(s grpc.ServiceRegistrar, srv ApplicationAdminServiceServer) {
	s.RegisterService(&ApplicationAdminService_ServiceDesc, srv)
}

func _ApplicationAdminService_CreateOrUpdateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationAdminServiceServer).CreateOrUpdateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.axoniq.axonserver.grpc.admin.ApplicationAdminService/CreateOrUpdateApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationAdminServiceServer).CreateOrUpdateApplication(ctx, req.(*ApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationAdminService_DeleteApplication_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ApplicationId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApplicationAdminServiceServer).DeleteApplication(m, &applicationAdminServiceDeleteApplicationServer{stream})
}

type ApplicationAdminService_DeleteApplicationServer interface {
	Send(*empty.Empty) error
	grpc.ServerStream
}

type applicationAdminServiceDeleteApplicationServer struct {
	grpc.ServerStream
}

func (x *applicationAdminServiceDeleteApplicationServer) Send(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func _ApplicationAdminService_GetApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationAdminServiceServer).GetApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.axoniq.axonserver.grpc.admin.ApplicationAdminService/GetApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationAdminServiceServer).GetApplication(ctx, req.(*ApplicationId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationAdminService_GetApplications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApplicationAdminServiceServer).GetApplications(m, &applicationAdminServiceGetApplicationsServer{stream})
}

type ApplicationAdminService_GetApplicationsServer interface {
	Send(*ApplicationOverview) error
	grpc.ServerStream
}

type applicationAdminServiceGetApplicationsServer struct {
	grpc.ServerStream
}

func (x *applicationAdminServiceGetApplicationsServer) Send(m *ApplicationOverview) error {
	return x.ServerStream.SendMsg(m)
}

func _ApplicationAdminService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationAdminServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.axoniq.axonserver.grpc.admin.ApplicationAdminService/RefreshToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationAdminServiceServer).RefreshToken(ctx, req.(*ApplicationId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationAdminService_GetConnectedApplicationsByContext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContextId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationAdminServiceServer).GetConnectedApplicationsByContext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.axoniq.axonserver.grpc.admin.ApplicationAdminService/GetConnectedApplicationsByContext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationAdminServiceServer).GetConnectedApplicationsByContext(ctx, req.(*ContextId))
	}
	return interceptor(ctx, in, info, handler)
}

// ApplicationAdminService_ServiceDesc is the grpc.ServiceDesc for ApplicationAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApplicationAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.axoniq.axonserver.grpc.admin.ApplicationAdminService",
	HandlerType: (*ApplicationAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrUpdateApplication",
			Handler:    _ApplicationAdminService_CreateOrUpdateApplication_Handler,
		},
		{
			MethodName: "GetApplication",
			Handler:    _ApplicationAdminService_GetApplication_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _ApplicationAdminService_RefreshToken_Handler,
		},
		{
			MethodName: "GetConnectedApplicationsByContext",
			Handler:    _ApplicationAdminService_GetConnectedApplicationsByContext_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DeleteApplication",
			Handler:       _ApplicationAdminService_DeleteApplication_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetApplications",
			Handler:       _ApplicationAdminService_GetApplications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "admin.proto",
}

// UserAdminServiceClient is the client API for UserAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAdminServiceClient interface {
	CreateOrUpdateUser(ctx context.Context, in *CreateOrUpdateUserRequest, opts ...grpc.CallOption) (UserAdminService_CreateOrUpdateUserClient, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (UserAdminService_DeleteUserClient, error)
	GetUsers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (UserAdminService_GetUsersClient, error)
}

type userAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAdminServiceClient(cc grpc.ClientConnInterface) UserAdminServiceClient {
	return &userAdminServiceClient{cc}
}

func (c *userAdminServiceClient) CreateOrUpdateUser(ctx context.Context, in *CreateOrUpdateUserRequest, opts ...grpc.CallOption) (UserAdminService_CreateOrUpdateUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserAdminService_ServiceDesc.Streams[0], "/io.axoniq.axonserver.grpc.admin.UserAdminService/CreateOrUpdateUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &userAdminServiceCreateOrUpdateUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserAdminService_CreateOrUpdateUserClient interface {
	Recv() (*empty.Empty, error)
	grpc.ClientStream
}

type userAdminServiceCreateOrUpdateUserClient struct {
	grpc.ClientStream
}

func (x *userAdminServiceCreateOrUpdateUserClient) Recv() (*empty.Empty, error) {
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userAdminServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (UserAdminService_DeleteUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserAdminService_ServiceDesc.Streams[1], "/io.axoniq.axonserver.grpc.admin.UserAdminService/DeleteUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &userAdminServiceDeleteUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserAdminService_DeleteUserClient interface {
	Recv() (*empty.Empty, error)
	grpc.ClientStream
}

type userAdminServiceDeleteUserClient struct {
	grpc.ClientStream
}

func (x *userAdminServiceDeleteUserClient) Recv() (*empty.Empty, error) {
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userAdminServiceClient) GetUsers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (UserAdminService_GetUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserAdminService_ServiceDesc.Streams[2], "/io.axoniq.axonserver.grpc.admin.UserAdminService/GetUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &userAdminServiceGetUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserAdminService_GetUsersClient interface {
	Recv() (*UserOverview, error)
	grpc.ClientStream
}

type userAdminServiceGetUsersClient struct {
	grpc.ClientStream
}

func (x *userAdminServiceGetUsersClient) Recv() (*UserOverview, error) {
	m := new(UserOverview)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserAdminServiceServer is the server API for UserAdminService service.
// All implementations must embed UnimplementedUserAdminServiceServer
// for forward compatibility
type UserAdminServiceServer interface {
	CreateOrUpdateUser(*CreateOrUpdateUserRequest, UserAdminService_CreateOrUpdateUserServer) error
	DeleteUser(*DeleteUserRequest, UserAdminService_DeleteUserServer) error
	GetUsers(*empty.Empty, UserAdminService_GetUsersServer) error
	mustEmbedUnimplementedUserAdminServiceServer()
}

// UnimplementedUserAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserAdminServiceServer struct {
}

func (UnimplementedUserAdminServiceServer) CreateOrUpdateUser(*CreateOrUpdateUserRequest, UserAdminService_CreateOrUpdateUserServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateOrUpdateUser not implemented")
}
func (UnimplementedUserAdminServiceServer) DeleteUser(*DeleteUserRequest, UserAdminService_DeleteUserServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserAdminServiceServer) GetUsers(*empty.Empty, UserAdminService_GetUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedUserAdminServiceServer) mustEmbedUnimplementedUserAdminServiceServer() {}

// UnsafeUserAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAdminServiceServer will
// result in compilation errors.
type UnsafeUserAdminServiceServer interface {
	mustEmbedUnimplementedUserAdminServiceServer()
}

func RegisterUserAdminServiceServer(s grpc.ServiceRegistrar, srv UserAdminServiceServer) {
	s.RegisterService(&UserAdminService_ServiceDesc, srv)
}

func _UserAdminService_CreateOrUpdateUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateOrUpdateUserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserAdminServiceServer).CreateOrUpdateUser(m, &userAdminServiceCreateOrUpdateUserServer{stream})
}

type UserAdminService_CreateOrUpdateUserServer interface {
	Send(*empty.Empty) error
	grpc.ServerStream
}

type userAdminServiceCreateOrUpdateUserServer struct {
	grpc.ServerStream
}

func (x *userAdminServiceCreateOrUpdateUserServer) Send(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func _UserAdminService_DeleteUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeleteUserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserAdminServiceServer).DeleteUser(m, &userAdminServiceDeleteUserServer{stream})
}

type UserAdminService_DeleteUserServer interface {
	Send(*empty.Empty) error
	grpc.ServerStream
}

type userAdminServiceDeleteUserServer struct {
	grpc.ServerStream
}

func (x *userAdminServiceDeleteUserServer) Send(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func _UserAdminService_GetUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserAdminServiceServer).GetUsers(m, &userAdminServiceGetUsersServer{stream})
}

type UserAdminService_GetUsersServer interface {
	Send(*UserOverview) error
	grpc.ServerStream
}

type userAdminServiceGetUsersServer struct {
	grpc.ServerStream
}

func (x *userAdminServiceGetUsersServer) Send(m *UserOverview) error {
	return x.ServerStream.SendMsg(m)
}

// UserAdminService_ServiceDesc is the grpc.ServiceDesc for UserAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.axoniq.axonserver.grpc.admin.UserAdminService",
	HandlerType: (*UserAdminServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateOrUpdateUser",
			Handler:       _UserAdminService_CreateOrUpdateUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteUser",
			Handler:       _UserAdminService_DeleteUser_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUsers",
			Handler:       _UserAdminService_GetUsers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "admin.proto",
}

// EventProcessorAdminServiceClient is the client API for EventProcessorAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventProcessorAdminServiceClient interface {
	// Request to pause an event processor
	PauseEventProcessor(ctx context.Context, in *EventProcessorIdentifier, opts ...grpc.CallOption) (*AdminActionResult, error)
	// Request to start an event processor
	StartEventProcessor(ctx context.Context, in *EventProcessorIdentifier, opts ...grpc.CallOption) (*AdminActionResult, error)
	// Request to split the largest segment of a streaming event processor
	SplitEventProcessor(ctx context.Context, in *EventProcessorIdentifier, opts ...grpc.CallOption) (*AdminActionResult, error)
	// Request to merge the smallest two segments of a streaming event processor
	MergeEventProcessor(ctx context.Context, in *EventProcessorIdentifier, opts ...grpc.CallOption) (*AdminActionResult, error)
	// Request to move the specified segment of a streaming event processor to the desired destination
	MoveEventProcessorSegment(ctx context.Context, in *MoveSegment, opts ...grpc.CallOption) (*AdminActionResult, error)
	// Retrieves all event processors registered in an Axon Server cluster
	GetAllEventProcessors(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (EventProcessorAdminService_GetAllEventProcessorsClient, error)
	// Retrieves all event processors registered in an Axon Server cluster for the specified component
	GetEventProcessorsByComponent(ctx context.Context, in *Component, opts ...grpc.CallOption) (EventProcessorAdminService_GetEventProcessorsByComponentClient, error)
	LoadBalanceProcessor(ctx context.Context, in *LoadBalanceRequest, opts ...grpc.CallOption) (EventProcessorAdminService_LoadBalanceProcessorClient, error)
	SetAutoLoadBalanceStrategy(ctx context.Context, in *LoadBalanceRequest, opts ...grpc.CallOption) (EventProcessorAdminService_SetAutoLoadBalanceStrategyClient, error)
	GetBalancingStrategies(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (EventProcessorAdminService_GetBalancingStrategiesClient, error)
}

type eventProcessorAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventProcessorAdminServiceClient(cc grpc.ClientConnInterface) EventProcessorAdminServiceClient {
	return &eventProcessorAdminServiceClient{cc}
}

func (c *eventProcessorAdminServiceClient) PauseEventProcessor(ctx context.Context, in *EventProcessorIdentifier, opts ...grpc.CallOption) (*AdminActionResult, error) {
	out := new(AdminActionResult)
	err := c.cc.Invoke(ctx, "/io.axoniq.axonserver.grpc.admin.EventProcessorAdminService/PauseEventProcessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventProcessorAdminServiceClient) StartEventProcessor(ctx context.Context, in *EventProcessorIdentifier, opts ...grpc.CallOption) (*AdminActionResult, error) {
	out := new(AdminActionResult)
	err := c.cc.Invoke(ctx, "/io.axoniq.axonserver.grpc.admin.EventProcessorAdminService/StartEventProcessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventProcessorAdminServiceClient) SplitEventProcessor(ctx context.Context, in *EventProcessorIdentifier, opts ...grpc.CallOption) (*AdminActionResult, error) {
	out := new(AdminActionResult)
	err := c.cc.Invoke(ctx, "/io.axoniq.axonserver.grpc.admin.EventProcessorAdminService/SplitEventProcessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventProcessorAdminServiceClient) MergeEventProcessor(ctx context.Context, in *EventProcessorIdentifier, opts ...grpc.CallOption) (*AdminActionResult, error) {
	out := new(AdminActionResult)
	err := c.cc.Invoke(ctx, "/io.axoniq.axonserver.grpc.admin.EventProcessorAdminService/MergeEventProcessor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventProcessorAdminServiceClient) MoveEventProcessorSegment(ctx context.Context, in *MoveSegment, opts ...grpc.CallOption) (*AdminActionResult, error) {
	out := new(AdminActionResult)
	err := c.cc.Invoke(ctx, "/io.axoniq.axonserver.grpc.admin.EventProcessorAdminService/MoveEventProcessorSegment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventProcessorAdminServiceClient) GetAllEventProcessors(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (EventProcessorAdminService_GetAllEventProcessorsClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventProcessorAdminService_ServiceDesc.Streams[0], "/io.axoniq.axonserver.grpc.admin.EventProcessorAdminService/GetAllEventProcessors", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventProcessorAdminServiceGetAllEventProcessorsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventProcessorAdminService_GetAllEventProcessorsClient interface {
	Recv() (*EventProcessor, error)
	grpc.ClientStream
}

type eventProcessorAdminServiceGetAllEventProcessorsClient struct {
	grpc.ClientStream
}

func (x *eventProcessorAdminServiceGetAllEventProcessorsClient) Recv() (*EventProcessor, error) {
	m := new(EventProcessor)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventProcessorAdminServiceClient) GetEventProcessorsByComponent(ctx context.Context, in *Component, opts ...grpc.CallOption) (EventProcessorAdminService_GetEventProcessorsByComponentClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventProcessorAdminService_ServiceDesc.Streams[1], "/io.axoniq.axonserver.grpc.admin.EventProcessorAdminService/GetEventProcessorsByComponent", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventProcessorAdminServiceGetEventProcessorsByComponentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventProcessorAdminService_GetEventProcessorsByComponentClient interface {
	Recv() (*EventProcessor, error)
	grpc.ClientStream
}

type eventProcessorAdminServiceGetEventProcessorsByComponentClient struct {
	grpc.ClientStream
}

func (x *eventProcessorAdminServiceGetEventProcessorsByComponentClient) Recv() (*EventProcessor, error) {
	m := new(EventProcessor)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventProcessorAdminServiceClient) LoadBalanceProcessor(ctx context.Context, in *LoadBalanceRequest, opts ...grpc.CallOption) (EventProcessorAdminService_LoadBalanceProcessorClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventProcessorAdminService_ServiceDesc.Streams[2], "/io.axoniq.axonserver.grpc.admin.EventProcessorAdminService/LoadBalanceProcessor", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventProcessorAdminServiceLoadBalanceProcessorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventProcessorAdminService_LoadBalanceProcessorClient interface {
	Recv() (*empty.Empty, error)
	grpc.ClientStream
}

type eventProcessorAdminServiceLoadBalanceProcessorClient struct {
	grpc.ClientStream
}

func (x *eventProcessorAdminServiceLoadBalanceProcessorClient) Recv() (*empty.Empty, error) {
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventProcessorAdminServiceClient) SetAutoLoadBalanceStrategy(ctx context.Context, in *LoadBalanceRequest, opts ...grpc.CallOption) (EventProcessorAdminService_SetAutoLoadBalanceStrategyClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventProcessorAdminService_ServiceDesc.Streams[3], "/io.axoniq.axonserver.grpc.admin.EventProcessorAdminService/SetAutoLoadBalanceStrategy", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventProcessorAdminServiceSetAutoLoadBalanceStrategyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventProcessorAdminService_SetAutoLoadBalanceStrategyClient interface {
	Recv() (*empty.Empty, error)
	grpc.ClientStream
}

type eventProcessorAdminServiceSetAutoLoadBalanceStrategyClient struct {
	grpc.ClientStream
}

func (x *eventProcessorAdminServiceSetAutoLoadBalanceStrategyClient) Recv() (*empty.Empty, error) {
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *eventProcessorAdminServiceClient) GetBalancingStrategies(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (EventProcessorAdminService_GetBalancingStrategiesClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventProcessorAdminService_ServiceDesc.Streams[4], "/io.axoniq.axonserver.grpc.admin.EventProcessorAdminService/GetBalancingStrategies", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventProcessorAdminServiceGetBalancingStrategiesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EventProcessorAdminService_GetBalancingStrategiesClient interface {
	Recv() (*LoadBalancingStrategy, error)
	grpc.ClientStream
}

type eventProcessorAdminServiceGetBalancingStrategiesClient struct {
	grpc.ClientStream
}

func (x *eventProcessorAdminServiceGetBalancingStrategiesClient) Recv() (*LoadBalancingStrategy, error) {
	m := new(LoadBalancingStrategy)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventProcessorAdminServiceServer is the server API for EventProcessorAdminService service.
// All implementations must embed UnimplementedEventProcessorAdminServiceServer
// for forward compatibility
type EventProcessorAdminServiceServer interface {
	// Request to pause an event processor
	PauseEventProcessor(context.Context, *EventProcessorIdentifier) (*AdminActionResult, error)
	// Request to start an event processor
	StartEventProcessor(context.Context, *EventProcessorIdentifier) (*AdminActionResult, error)
	// Request to split the largest segment of a streaming event processor
	SplitEventProcessor(context.Context, *EventProcessorIdentifier) (*AdminActionResult, error)
	// Request to merge the smallest two segments of a streaming event processor
	MergeEventProcessor(context.Context, *EventProcessorIdentifier) (*AdminActionResult, error)
	// Request to move the specified segment of a streaming event processor to the desired destination
	MoveEventProcessorSegment(context.Context, *MoveSegment) (*AdminActionResult, error)
	// Retrieves all event processors registered in an Axon Server cluster
	GetAllEventProcessors(*empty.Empty, EventProcessorAdminService_GetAllEventProcessorsServer) error
	// Retrieves all event processors registered in an Axon Server cluster for the specified component
	GetEventProcessorsByComponent(*Component, EventProcessorAdminService_GetEventProcessorsByComponentServer) error
	LoadBalanceProcessor(*LoadBalanceRequest, EventProcessorAdminService_LoadBalanceProcessorServer) error
	SetAutoLoadBalanceStrategy(*LoadBalanceRequest, EventProcessorAdminService_SetAutoLoadBalanceStrategyServer) error
	GetBalancingStrategies(*empty.Empty, EventProcessorAdminService_GetBalancingStrategiesServer) error
	mustEmbedUnimplementedEventProcessorAdminServiceServer()
}

// UnimplementedEventProcessorAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventProcessorAdminServiceServer struct {
}

func (UnimplementedEventProcessorAdminServiceServer) PauseEventProcessor(context.Context, *EventProcessorIdentifier) (*AdminActionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseEventProcessor not implemented")
}
func (UnimplementedEventProcessorAdminServiceServer) StartEventProcessor(context.Context, *EventProcessorIdentifier) (*AdminActionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartEventProcessor not implemented")
}
func (UnimplementedEventProcessorAdminServiceServer) SplitEventProcessor(context.Context, *EventProcessorIdentifier) (*AdminActionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SplitEventProcessor not implemented")
}
func (UnimplementedEventProcessorAdminServiceServer) MergeEventProcessor(context.Context, *EventProcessorIdentifier) (*AdminActionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeEventProcessor not implemented")
}
func (UnimplementedEventProcessorAdminServiceServer) MoveEventProcessorSegment(context.Context, *MoveSegment) (*AdminActionResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveEventProcessorSegment not implemented")
}
func (UnimplementedEventProcessorAdminServiceServer) GetAllEventProcessors(*empty.Empty, EventProcessorAdminService_GetAllEventProcessorsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllEventProcessors not implemented")
}
func (UnimplementedEventProcessorAdminServiceServer) GetEventProcessorsByComponent(*Component, EventProcessorAdminService_GetEventProcessorsByComponentServer) error {
	return status.Errorf(codes.Unimplemented, "method GetEventProcessorsByComponent not implemented")
}
func (UnimplementedEventProcessorAdminServiceServer) LoadBalanceProcessor(*LoadBalanceRequest, EventProcessorAdminService_LoadBalanceProcessorServer) error {
	return status.Errorf(codes.Unimplemented, "method LoadBalanceProcessor not implemented")
}
func (UnimplementedEventProcessorAdminServiceServer) SetAutoLoadBalanceStrategy(*LoadBalanceRequest, EventProcessorAdminService_SetAutoLoadBalanceStrategyServer) error {
	return status.Errorf(codes.Unimplemented, "method SetAutoLoadBalanceStrategy not implemented")
}
func (UnimplementedEventProcessorAdminServiceServer) GetBalancingStrategies(*empty.Empty, EventProcessorAdminService_GetBalancingStrategiesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBalancingStrategies not implemented")
}
func (UnimplementedEventProcessorAdminServiceServer) mustEmbedUnimplementedEventProcessorAdminServiceServer() {
}

// UnsafeEventProcessorAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventProcessorAdminServiceServer will
// result in compilation errors.
type UnsafeEventProcessorAdminServiceServer interface {
	mustEmbedUnimplementedEventProcessorAdminServiceServer()
}

func RegisterEventProcessorAdminServiceServer(s grpc.ServiceRegistrar, srv EventProcessorAdminServiceServer) {
	s.RegisterService(&EventProcessorAdminService_ServiceDesc, srv)
}

func _EventProcessorAdminService_PauseEventProcessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventProcessorIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventProcessorAdminServiceServer).PauseEventProcessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.axoniq.axonserver.grpc.admin.EventProcessorAdminService/PauseEventProcessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventProcessorAdminServiceServer).PauseEventProcessor(ctx, req.(*EventProcessorIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventProcessorAdminService_StartEventProcessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventProcessorIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventProcessorAdminServiceServer).StartEventProcessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.axoniq.axonserver.grpc.admin.EventProcessorAdminService/StartEventProcessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventProcessorAdminServiceServer).StartEventProcessor(ctx, req.(*EventProcessorIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventProcessorAdminService_SplitEventProcessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventProcessorIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventProcessorAdminServiceServer).SplitEventProcessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.axoniq.axonserver.grpc.admin.EventProcessorAdminService/SplitEventProcessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventProcessorAdminServiceServer).SplitEventProcessor(ctx, req.(*EventProcessorIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventProcessorAdminService_MergeEventProcessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventProcessorIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventProcessorAdminServiceServer).MergeEventProcessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.axoniq.axonserver.grpc.admin.EventProcessorAdminService/MergeEventProcessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventProcessorAdminServiceServer).MergeEventProcessor(ctx, req.(*EventProcessorIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventProcessorAdminService_MoveEventProcessorSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveSegment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventProcessorAdminServiceServer).MoveEventProcessorSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.axoniq.axonserver.grpc.admin.EventProcessorAdminService/MoveEventProcessorSegment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventProcessorAdminServiceServer).MoveEventProcessorSegment(ctx, req.(*MoveSegment))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventProcessorAdminService_GetAllEventProcessors_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventProcessorAdminServiceServer).GetAllEventProcessors(m, &eventProcessorAdminServiceGetAllEventProcessorsServer{stream})
}

type EventProcessorAdminService_GetAllEventProcessorsServer interface {
	Send(*EventProcessor) error
	grpc.ServerStream
}

type eventProcessorAdminServiceGetAllEventProcessorsServer struct {
	grpc.ServerStream
}

func (x *eventProcessorAdminServiceGetAllEventProcessorsServer) Send(m *EventProcessor) error {
	return x.ServerStream.SendMsg(m)
}

func _EventProcessorAdminService_GetEventProcessorsByComponent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Component)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventProcessorAdminServiceServer).GetEventProcessorsByComponent(m, &eventProcessorAdminServiceGetEventProcessorsByComponentServer{stream})
}

type EventProcessorAdminService_GetEventProcessorsByComponentServer interface {
	Send(*EventProcessor) error
	grpc.ServerStream
}

type eventProcessorAdminServiceGetEventProcessorsByComponentServer struct {
	grpc.ServerStream
}

func (x *eventProcessorAdminServiceGetEventProcessorsByComponentServer) Send(m *EventProcessor) error {
	return x.ServerStream.SendMsg(m)
}

func _EventProcessorAdminService_LoadBalanceProcessor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LoadBalanceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventProcessorAdminServiceServer).LoadBalanceProcessor(m, &eventProcessorAdminServiceLoadBalanceProcessorServer{stream})
}

type EventProcessorAdminService_LoadBalanceProcessorServer interface {
	Send(*empty.Empty) error
	grpc.ServerStream
}

type eventProcessorAdminServiceLoadBalanceProcessorServer struct {
	grpc.ServerStream
}

func (x *eventProcessorAdminServiceLoadBalanceProcessorServer) Send(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func _EventProcessorAdminService_SetAutoLoadBalanceStrategy_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LoadBalanceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventProcessorAdminServiceServer).SetAutoLoadBalanceStrategy(m, &eventProcessorAdminServiceSetAutoLoadBalanceStrategyServer{stream})
}

type EventProcessorAdminService_SetAutoLoadBalanceStrategyServer interface {
	Send(*empty.Empty) error
	grpc.ServerStream
}

type eventProcessorAdminServiceSetAutoLoadBalanceStrategyServer struct {
	grpc.ServerStream
}

func (x *eventProcessorAdminServiceSetAutoLoadBalanceStrategyServer) Send(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func _EventProcessorAdminService_GetBalancingStrategies_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EventProcessorAdminServiceServer).GetBalancingStrategies(m, &eventProcessorAdminServiceGetBalancingStrategiesServer{stream})
}

type EventProcessorAdminService_GetBalancingStrategiesServer interface {
	Send(*LoadBalancingStrategy) error
	grpc.ServerStream
}

type eventProcessorAdminServiceGetBalancingStrategiesServer struct {
	grpc.ServerStream
}

func (x *eventProcessorAdminServiceGetBalancingStrategiesServer) Send(m *LoadBalancingStrategy) error {
	return x.ServerStream.SendMsg(m)
}

// EventProcessorAdminService_ServiceDesc is the grpc.ServiceDesc for EventProcessorAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventProcessorAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.axoniq.axonserver.grpc.admin.EventProcessorAdminService",
	HandlerType: (*EventProcessorAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PauseEventProcessor",
			Handler:    _EventProcessorAdminService_PauseEventProcessor_Handler,
		},
		{
			MethodName: "StartEventProcessor",
			Handler:    _EventProcessorAdminService_StartEventProcessor_Handler,
		},
		{
			MethodName: "SplitEventProcessor",
			Handler:    _EventProcessorAdminService_SplitEventProcessor_Handler,
		},
		{
			MethodName: "MergeEventProcessor",
			Handler:    _EventProcessorAdminService_MergeEventProcessor_Handler,
		},
		{
			MethodName: "MoveEventProcessorSegment",
			Handler:    _EventProcessorAdminService_MoveEventProcessorSegment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllEventProcessors",
			Handler:       _EventProcessorAdminService_GetAllEventProcessors_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetEventProcessorsByComponent",
			Handler:       _EventProcessorAdminService_GetEventProcessorsByComponent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "LoadBalanceProcessor",
			Handler:       _EventProcessorAdminService_LoadBalanceProcessor_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetAutoLoadBalanceStrategy",
			Handler:       _EventProcessorAdminService_SetAutoLoadBalanceStrategy_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetBalancingStrategies",
			Handler:       _EventProcessorAdminService_GetBalancingStrategies_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "admin.proto",
}

// AuthenticationServiceClient is the client API for AuthenticationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticationServiceClient interface {
	// Authenticate a user, returns the user's roles
	AuthenticateUser(ctx context.Context, in *AuthenticateUserRequest, opts ...grpc.CallOption) (*UserRoles, error)
	// Authenticate based on an application token, returns the application's roles
	AuthenticateToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*ApplicationRoles, error)
}

type authenticationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticationServiceClient(cc grpc.ClientConnInterface) AuthenticationServiceClient {
	return &authenticationServiceClient{cc}
}

func (c *authenticationServiceClient) AuthenticateUser(ctx context.Context, in *AuthenticateUserRequest, opts ...grpc.CallOption) (*UserRoles, error) {
	out := new(UserRoles)
	err := c.cc.Invoke(ctx, "/io.axoniq.axonserver.grpc.admin.AuthenticationService/AuthenticateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticationServiceClient) AuthenticateToken(ctx context.Context, in *Token, opts ...grpc.CallOption) (*ApplicationRoles, error) {
	out := new(ApplicationRoles)
	err := c.cc.Invoke(ctx, "/io.axoniq.axonserver.grpc.admin.AuthenticationService/AuthenticateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticationServiceServer is the server API for AuthenticationService service.
// All implementations must embed UnimplementedAuthenticationServiceServer
// for forward compatibility
type AuthenticationServiceServer interface {
	// Authenticate a user, returns the user's roles
	AuthenticateUser(context.Context, *AuthenticateUserRequest) (*UserRoles, error)
	// Authenticate based on an application token, returns the application's roles
	AuthenticateToken(context.Context, *Token) (*ApplicationRoles, error)
	mustEmbedUnimplementedAuthenticationServiceServer()
}

// UnimplementedAuthenticationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthenticationServiceServer struct {
}

func (UnimplementedAuthenticationServiceServer) AuthenticateUser(context.Context, *AuthenticateUserRequest) (*UserRoles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateUser not implemented")
}
func (UnimplementedAuthenticationServiceServer) AuthenticateToken(context.Context, *Token) (*ApplicationRoles, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateToken not implemented")
}
func (UnimplementedAuthenticationServiceServer) mustEmbedUnimplementedAuthenticationServiceServer() {}

// UnsafeAuthenticationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticationServiceServer will
// result in compilation errors.
type UnsafeAuthenticationServiceServer interface {
	mustEmbedUnimplementedAuthenticationServiceServer()
}

func RegisterAuthenticationServiceServer(s grpc.ServiceRegistrar, srv AuthenticationServiceServer) {
	s.RegisterService(&AuthenticationService_ServiceDesc, srv)
}

func _AuthenticationService_AuthenticateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).AuthenticateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.axoniq.axonserver.grpc.admin.AuthenticationService/AuthenticateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).AuthenticateUser(ctx, req.(*AuthenticateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticationService_AuthenticateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticationServiceServer).AuthenticateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.axoniq.axonserver.grpc.admin.AuthenticationService/AuthenticateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticationServiceServer).AuthenticateToken(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthenticationService_ServiceDesc is the grpc.ServiceDesc for AuthenticationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthenticationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.axoniq.axonserver.grpc.admin.AuthenticationService",
	HandlerType: (*AuthenticationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthenticateUser",
			Handler:    _AuthenticationService_AuthenticateUser_Handler,
		},
		{
			MethodName: "AuthenticateToken",
			Handler:    _AuthenticationService_AuthenticateToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin.proto",
}
