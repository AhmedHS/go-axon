// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: persistent-streams.proto

package pb

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// result of create stream
type CreateResult int32

const (
	CreateResult_created        CreateResult = 0
	CreateResult_already_exists CreateResult = 1
)

// Enum value maps for CreateResult.
var (
	CreateResult_name = map[int32]string{
		0: "created",
		1: "already_exists",
	}
	CreateResult_value = map[string]int32{
		"created":        0,
		"already_exists": 1,
	}
)

func (x CreateResult) Enum() *CreateResult {
	p := new(CreateResult)
	*p = x
	return p
}

func (x CreateResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateResult) Descriptor() protoreflect.EnumDescriptor {
	return file_persistent_streams_proto_enumTypes[0].Descriptor()
}

func (CreateResult) Type() protoreflect.EnumType {
	return &file_persistent_streams_proto_enumTypes[0]
}

func (x CreateResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateResult.Descriptor instead.
func (CreateResult) EnumDescriptor() ([]byte, []int) {
	return file_persistent_streams_proto_rawDescGZIP(), []int{0}
}

// request to list the persistent streams for a context
type ListStreamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListStreamsRequest) Reset() {
	*x = ListStreamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_streams_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListStreamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListStreamsRequest) ProtoMessage() {}

func (x *ListStreamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_streams_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListStreamsRequest.ProtoReflect.Descriptor instead.
func (*ListStreamsRequest) Descriptor() ([]byte, []int) {
	return file_persistent_streams_proto_rawDescGZIP(), []int{0}
}

// Contains the current status of a persistent stream
type StreamStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId         string             `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`                         // the unique identification of the persistent stream
	StreamName       string             `protobuf:"bytes,2,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`                   // a name for the persistent stream
	SequencingPolicy *SequencingPolicy  `protobuf:"bytes,3,opt,name=sequencing_policy,json=sequencingPolicy,proto3" json:"sequencing_policy,omitempty"` // the policy used to distribute events across segments.
	Filter           string             `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`                                             // an expression to filter events, same syntax as used for ad-hoc queries on the event store
	Segments         []*SegmentPosition `protobuf:"bytes,5,rep,name=segments,proto3" json:"segments,omitempty"`                                         // the last confirmed position per segment
}

func (x *StreamStatus) Reset() {
	*x = StreamStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_streams_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamStatus) ProtoMessage() {}

func (x *StreamStatus) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_streams_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamStatus.ProtoReflect.Descriptor instead.
func (*StreamStatus) Descriptor() ([]byte, []int) {
	return file_persistent_streams_proto_rawDescGZIP(), []int{1}
}

func (x *StreamStatus) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *StreamStatus) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

func (x *StreamStatus) GetSequencingPolicy() *SequencingPolicy {
	if x != nil {
		return x.SequencingPolicy
	}
	return nil
}

func (x *StreamStatus) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *StreamStatus) GetSegments() []*SegmentPosition {
	if x != nil {
		return x.Segments
	}
	return nil
}

// Contains the position per segment
type SegmentPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Segment  int32  `protobuf:"varint,1,opt,name=segment,proto3" json:"segment,omitempty"`                  // the segment number
	Position int64  `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`                // the last confirmed position
	ClientId string `protobuf:"bytes,3,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"` // the connected client, empty if there is no client connected to this segment
	Error    string `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`                       // optional error reported by the client for this segment
}

func (x *SegmentPosition) Reset() {
	*x = SegmentPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_streams_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentPosition) ProtoMessage() {}

func (x *SegmentPosition) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_streams_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentPosition.ProtoReflect.Descriptor instead.
func (*SegmentPosition) Descriptor() ([]byte, []int) {
	return file_persistent_streams_proto_rawDescGZIP(), []int{2}
}

func (x *SegmentPosition) GetSegment() int32 {
	if x != nil {
		return x.Segment
	}
	return 0
}

func (x *SegmentPosition) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *SegmentPosition) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *SegmentPosition) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Request to set up a connection to a stream. Clients should first submit an OpenRequest on this connection
// to connect to a stream and can then submit Acknowledgement messages to report progress.
type StreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*StreamRequest_Open
	//	*StreamRequest_AcknowledgeProgress
	//	*StreamRequest_Requests
	//	*StreamRequest_Error
	Request isStreamRequest_Request `protobuf_oneof:"request"`
}

func (x *StreamRequest) Reset() {
	*x = StreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_streams_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRequest) ProtoMessage() {}

func (x *StreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_streams_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRequest.ProtoReflect.Descriptor instead.
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return file_persistent_streams_proto_rawDescGZIP(), []int{3}
}

func (m *StreamRequest) GetRequest() isStreamRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *StreamRequest) GetOpen() *Open {
	if x, ok := x.GetRequest().(*StreamRequest_Open); ok {
		return x.Open
	}
	return nil
}

func (x *StreamRequest) GetAcknowledgeProgress() *ProgressAcknowledgement {
	if x, ok := x.GetRequest().(*StreamRequest_AcknowledgeProgress); ok {
		return x.AcknowledgeProgress
	}
	return nil
}

func (x *StreamRequest) GetRequests() *Requests {
	if x, ok := x.GetRequest().(*StreamRequest_Requests); ok {
		return x.Requests
	}
	return nil
}

func (x *StreamRequest) GetError() *SegmentError {
	if x, ok := x.GetRequest().(*StreamRequest_Error); ok {
		return x.Error
	}
	return nil
}

type isStreamRequest_Request interface {
	isStreamRequest_Request()
}

type StreamRequest_Open struct {
	Open *Open `protobuf:"bytes,1,opt,name=open,proto3,oneof"` // the initial message to connect to a stream
}

type StreamRequest_AcknowledgeProgress struct {
	AcknowledgeProgress *ProgressAcknowledgement `protobuf:"bytes,2,opt,name=acknowledgeProgress,proto3,oneof"` // sends progress in processing events to Axon Server
}

type StreamRequest_Requests struct {
	Requests *Requests `protobuf:"bytes,3,opt,name=requests,proto3,oneof"` // request a number of messages for a segment
}

type StreamRequest_Error struct {
	Error *SegmentError `protobuf:"bytes,4,opt,name=error,proto3,oneof"` // notifies an error
}

func (*StreamRequest_Open) isStreamRequest_Request() {}

func (*StreamRequest_AcknowledgeProgress) isStreamRequest_Request() {}

func (*StreamRequest_Requests) isStreamRequest_Request() {}

func (*StreamRequest_Error) isStreamRequest_Request() {}

// Request to create a persistent stream
type CreateStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId                 string                    `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`                                                 // the unique identification of the stream
	InitializationProperties *InitializationProperties `protobuf:"bytes,2,opt,name=initialization_properties,json=initializationProperties,proto3" json:"initialization_properties,omitempty"` // properties to create the stream if it does not exist
}

func (x *CreateStreamRequest) Reset() {
	*x = CreateStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_streams_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStreamRequest) ProtoMessage() {}

func (x *CreateStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_streams_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStreamRequest.ProtoReflect.Descriptor instead.
func (*CreateStreamRequest) Descriptor() ([]byte, []int) {
	return file_persistent_streams_proto_rawDescGZIP(), []int{4}
}

func (x *CreateStreamRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *CreateStreamRequest) GetInitializationProperties() *InitializationProperties {
	if x != nil {
		return x.InitializationProperties
	}
	return nil
}

// Response for a create stream request
type CreateStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result CreateResult `protobuf:"varint,1,opt,name=result,proto3,enum=io.axoniq.axonserver.grpc.streams.CreateResult" json:"result,omitempty"` // the result (created or already existing)
}

func (x *CreateStreamResponse) Reset() {
	*x = CreateStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_streams_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStreamResponse) ProtoMessage() {}

func (x *CreateStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_streams_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStreamResponse.ProtoReflect.Descriptor instead.
func (*CreateStreamResponse) Descriptor() ([]byte, []int) {
	return file_persistent_streams_proto_rawDescGZIP(), []int{5}
}

func (x *CreateStreamResponse) GetResult() CreateResult {
	if x != nil {
		return x.Result
	}
	return CreateResult_created
}

// Request to notify Axon Server of an error on a persistent stream segment
type SegmentError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Segment int32  `protobuf:"varint,1,opt,name=segment,proto3" json:"segment,omitempty"` // the segment number
	Error   string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`      // the error that occurred while processing the events for this segment
}

func (x *SegmentError) Reset() {
	*x = SegmentError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_streams_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SegmentError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SegmentError) ProtoMessage() {}

func (x *SegmentError) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_streams_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SegmentError.ProtoReflect.Descriptor instead.
func (*SegmentError) Descriptor() ([]byte, []int) {
	return file_persistent_streams_proto_rawDescGZIP(), []int{6}
}

func (x *SegmentError) GetSegment() int32 {
	if x != nil {
		return x.Segment
	}
	return 0
}

func (x *SegmentError) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Request to delete a persistent stream
type DeleteStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId string `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"` // the unique identification of the stream
}

func (x *DeleteStreamRequest) Reset() {
	*x = DeleteStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_streams_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStreamRequest) ProtoMessage() {}

func (x *DeleteStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_streams_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStreamRequest.ProtoReflect.Descriptor instead.
func (*DeleteStreamRequest) Descriptor() ([]byte, []int) {
	return file_persistent_streams_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteStreamRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

type ResetStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId string                    `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"` // the unique identification of the stream
	Options  *ResetStreamConfiguration `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *ResetStreamRequest) Reset() {
	*x = ResetStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_streams_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetStreamRequest) ProtoMessage() {}

func (x *ResetStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_streams_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetStreamRequest.ProtoReflect.Descriptor instead.
func (*ResetStreamRequest) Descriptor() ([]byte, []int) {
	return file_persistent_streams_proto_rawDescGZIP(), []int{8}
}

func (x *ResetStreamRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *ResetStreamRequest) GetOptions() *ResetStreamConfiguration {
	if x != nil {
		return x.Options
	}
	return nil
}

// Request to update the properties of a persistent stream
type UpdateStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId   string `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`       // the unique identification of the stream
	Segments   int32  `protobuf:"varint,2,opt,name=segments,proto3" json:"segments,omitempty"`                      // Request to change the number of segments
	StreamName string `protobuf:"bytes,3,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"` // Request to change the name of the stream
}

func (x *UpdateStreamRequest) Reset() {
	*x = UpdateStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_streams_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStreamRequest) ProtoMessage() {}

func (x *UpdateStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_streams_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStreamRequest.ProtoReflect.Descriptor instead.
func (*UpdateStreamRequest) Descriptor() ([]byte, []int) {
	return file_persistent_streams_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateStreamRequest) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *UpdateStreamRequest) GetSegments() int32 {
	if x != nil {
		return x.Segments
	}
	return 0
}

func (x *UpdateStreamRequest) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

// Request to open a connection to a persistent stream
type Open struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId                 string                    `protobuf:"bytes,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`                                                 // the unique identification of the stream
	ClientId                 string                    `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`                                                 // the unique identification of the client
	InitializationProperties *InitializationProperties `protobuf:"bytes,3,opt,name=initialization_properties,json=initializationProperties,proto3" json:"initialization_properties,omitempty"` // properties to create the stream if it does not exist
}

func (x *Open) Reset() {
	*x = Open{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_streams_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Open) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Open) ProtoMessage() {}

func (x *Open) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_streams_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Open.ProtoReflect.Descriptor instead.
func (*Open) Descriptor() ([]byte, []int) {
	return file_persistent_streams_proto_rawDescGZIP(), []int{10}
}

func (x *Open) GetStreamId() string {
	if x != nil {
		return x.StreamId
	}
	return ""
}

func (x *Open) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *Open) GetInitializationProperties() *InitializationProperties {
	if x != nil {
		return x.InitializationProperties
	}
	return nil
}

// Properties to create the stream if it does not exist
type InitializationProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Segments         int32             `protobuf:"varint,1,opt,name=segments,proto3" json:"segments,omitempty"`                                        // the initial number of segments
	InitialPosition  int64             `protobuf:"varint,2,opt,name=initial_position,json=initialPosition,proto3" json:"initial_position,omitempty"`   // the position in the event store to start reading from
	SequencingPolicy *SequencingPolicy `protobuf:"bytes,3,opt,name=sequencing_policy,json=sequencingPolicy,proto3" json:"sequencing_policy,omitempty"` // the sequencing policy
	Filter           string            `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`                                             // an expression to filter events, same syntax as used for ad-hoc queries on the event store
	StreamName       string            `protobuf:"bytes,5,opt,name=stream_name,json=streamName,proto3" json:"stream_name,omitempty"`                   // a name for the persistent stream
}

func (x *InitializationProperties) Reset() {
	*x = InitializationProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_streams_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializationProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializationProperties) ProtoMessage() {}

func (x *InitializationProperties) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_streams_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializationProperties.ProtoReflect.Descriptor instead.
func (*InitializationProperties) Descriptor() ([]byte, []int) {
	return file_persistent_streams_proto_rawDescGZIP(), []int{11}
}

func (x *InitializationProperties) GetSegments() int32 {
	if x != nil {
		return x.Segments
	}
	return 0
}

func (x *InitializationProperties) GetInitialPosition() int64 {
	if x != nil {
		return x.InitialPosition
	}
	return 0
}

func (x *InitializationProperties) GetSequencingPolicy() *SequencingPolicy {
	if x != nil {
		return x.SequencingPolicy
	}
	return nil
}

func (x *InitializationProperties) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *InitializationProperties) GetStreamName() string {
	if x != nil {
		return x.StreamName
	}
	return ""
}

// Defines the policy used to distribute events across segments. The policy name must be known on the server.
type SequencingPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyName string   `protobuf:"bytes,1,opt,name=policy_name,json=policyName,proto3" json:"policy_name,omitempty"` // the name of the sequencing policy
	Parameter  []string `protobuf:"bytes,2,rep,name=parameter,proto3" json:"parameter,omitempty"`                     // optional list of parameters used by the sequencing policy
}

func (x *SequencingPolicy) Reset() {
	*x = SequencingPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_streams_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SequencingPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequencingPolicy) ProtoMessage() {}

func (x *SequencingPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_streams_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequencingPolicy.ProtoReflect.Descriptor instead.
func (*SequencingPolicy) Descriptor() ([]byte, []int) {
	return file_persistent_streams_proto_rawDescGZIP(), []int{12}
}

func (x *SequencingPolicy) GetPolicyName() string {
	if x != nil {
		return x.PolicyName
	}
	return ""
}

func (x *SequencingPolicy) GetParameter() []string {
	if x != nil {
		return x.Parameter
	}
	return nil
}

// Message to report progress of event processing for a specific segment in a stream
type ProgressAcknowledgement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Segment  int32 `protobuf:"varint,1,opt,name=segment,proto3" json:"segment,omitempty"`   // the segment number
	Position int64 `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"` // the position of the last processed event
}

func (x *ProgressAcknowledgement) Reset() {
	*x = ProgressAcknowledgement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_streams_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProgressAcknowledgement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProgressAcknowledgement) ProtoMessage() {}

func (x *ProgressAcknowledgement) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_streams_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProgressAcknowledgement.ProtoReflect.Descriptor instead.
func (*ProgressAcknowledgement) Descriptor() ([]byte, []int) {
	return file_persistent_streams_proto_rawDescGZIP(), []int{13}
}

func (x *ProgressAcknowledgement) GetSegment() int32 {
	if x != nil {
		return x.Segment
	}
	return 0
}

func (x *ProgressAcknowledgement) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

type Requests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Segment  int32 `protobuf:"varint,1,opt,name=segment,proto3" json:"segment,omitempty"`   // the segment number
	Requests int32 `protobuf:"varint,2,opt,name=requests,proto3" json:"requests,omitempty"` // the number of messages to request
}

func (x *Requests) Reset() {
	*x = Requests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_streams_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Requests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Requests) ProtoMessage() {}

func (x *Requests) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_streams_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Requests.ProtoReflect.Descriptor instead.
func (*Requests) Descriptor() ([]byte, []int) {
	return file_persistent_streams_proto_rawDescGZIP(), []int{14}
}

func (x *Requests) GetSegment() int32 {
	if x != nil {
		return x.Segment
	}
	return 0
}

func (x *Requests) GetRequests() int32 {
	if x != nil {
		return x.Requests
	}
	return 0
}

// Message sent by Axon Server to the client stream connection
type StreamSignal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Segment int32 `protobuf:"varint,1,opt,name=segment,proto3" json:"segment,omitempty"` // the segment number
	// Types that are assignable to Type:
	//
	//	*StreamSignal_Event
	//	*StreamSignal_Closed
	//	*StreamSignal_Open
	Type isStreamSignal_Type `protobuf_oneof:"type"`
}

func (x *StreamSignal) Reset() {
	*x = StreamSignal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_streams_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamSignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamSignal) ProtoMessage() {}

func (x *StreamSignal) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_streams_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamSignal.ProtoReflect.Descriptor instead.
func (*StreamSignal) Descriptor() ([]byte, []int) {
	return file_persistent_streams_proto_rawDescGZIP(), []int{15}
}

func (x *StreamSignal) GetSegment() int32 {
	if x != nil {
		return x.Segment
	}
	return 0
}

func (m *StreamSignal) GetType() isStreamSignal_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *StreamSignal) GetEvent() *PersistentStreamEvent {
	if x, ok := x.GetType().(*StreamSignal_Event); ok {
		return x.Event
	}
	return nil
}

func (x *StreamSignal) GetClosed() bool {
	if x, ok := x.GetType().(*StreamSignal_Closed); ok {
		return x.Closed
	}
	return false
}

func (x *StreamSignal) GetOpen() *OpenSegment {
	if x, ok := x.GetType().(*StreamSignal_Open); ok {
		return x.Open
	}
	return nil
}

type isStreamSignal_Type interface {
	isStreamSignal_Type()
}

type StreamSignal_Event struct {
	Event *PersistentStreamEvent `protobuf:"bytes,2,opt,name=event,proto3,oneof"` // an event to process in the client
}

type StreamSignal_Closed struct {
	Closed bool `protobuf:"varint,3,opt,name=closed,proto3,oneof"` // indicates that the segment is closed by Axon Server
}

type StreamSignal_Open struct {
	Open *OpenSegment `protobuf:"bytes,4,opt,name=open,proto3,oneof"` // segment assigned to the client
}

func (*StreamSignal_Event) isStreamSignal_Type() {}

func (*StreamSignal_Closed) isStreamSignal_Type() {}

func (*StreamSignal_Open) isStreamSignal_Type() {}

// Event sent on a persistent stream segment
type PersistentStreamEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Event  *EventWithToken `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`    // an event to process in the client
	Replay bool            `protobuf:"varint,2,opt,name=replay,proto3" json:"replay,omitempty"` // indicates that the event is sent again after a reset stream
}

func (x *PersistentStreamEvent) Reset() {
	*x = PersistentStreamEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_streams_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PersistentStreamEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PersistentStreamEvent) ProtoMessage() {}

func (x *PersistentStreamEvent) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_streams_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PersistentStreamEvent.ProtoReflect.Descriptor instead.
func (*PersistentStreamEvent) Descriptor() ([]byte, []int) {
	return file_persistent_streams_proto_rawDescGZIP(), []int{16}
}

func (x *PersistentStreamEvent) GetEvent() *EventWithToken {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *PersistentStreamEvent) GetReplay() bool {
	if x != nil {
		return x.Replay
	}
	return false
}

// Message to prepare client for events on a specific segment
type OpenSegment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *OpenSegment) Reset() {
	*x = OpenSegment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_streams_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenSegment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenSegment) ProtoMessage() {}

func (x *OpenSegment) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_streams_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenSegment.ProtoReflect.Descriptor instead.
func (*OpenSegment) Descriptor() ([]byte, []int) {
	return file_persistent_streams_proto_rawDescGZIP(), []int{17}
}

// Message to provide parameters for resetting a persistent stream
type ResetStreamConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*ResetStreamConfiguration_Head
	//	*ResetStreamConfiguration_Tail
	//	*ResetStreamConfiguration_Datetime
	//	*ResetStreamConfiguration_Position
	Type isResetStreamConfiguration_Type `protobuf_oneof:"type"`
}

func (x *ResetStreamConfiguration) Reset() {
	*x = ResetStreamConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_persistent_streams_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetStreamConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetStreamConfiguration) ProtoMessage() {}

func (x *ResetStreamConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_persistent_streams_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetStreamConfiguration.ProtoReflect.Descriptor instead.
func (*ResetStreamConfiguration) Descriptor() ([]byte, []int) {
	return file_persistent_streams_proto_rawDescGZIP(), []int{18}
}

func (m *ResetStreamConfiguration) GetType() isResetStreamConfiguration_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ResetStreamConfiguration) GetHead() *empty.Empty {
	if x, ok := x.GetType().(*ResetStreamConfiguration_Head); ok {
		return x.Head
	}
	return nil
}

func (x *ResetStreamConfiguration) GetTail() *empty.Empty {
	if x, ok := x.GetType().(*ResetStreamConfiguration_Tail); ok {
		return x.Tail
	}
	return nil
}

func (x *ResetStreamConfiguration) GetDatetime() int64 {
	if x, ok := x.GetType().(*ResetStreamConfiguration_Datetime); ok {
		return x.Datetime
	}
	return 0
}

func (x *ResetStreamConfiguration) GetPosition() int64 {
	if x, ok := x.GetType().(*ResetStreamConfiguration_Position); ok {
		return x.Position
	}
	return 0
}

type isResetStreamConfiguration_Type interface {
	isResetStreamConfiguration_Type()
}

type ResetStreamConfiguration_Head struct {
	Head *empty.Empty `protobuf:"bytes,1,opt,name=head,proto3,oneof"` // indicates reset to head
}

type ResetStreamConfiguration_Tail struct {
	Tail *empty.Empty `protobuf:"bytes,2,opt,name=tail,proto3,oneof"` // indicates reset to tail
}

type ResetStreamConfiguration_Datetime struct {
	Datetime int64 `protobuf:"varint,3,opt,name=datetime,proto3,oneof"` // timestamp in epoch milliseconds
}

type ResetStreamConfiguration_Position struct {
	Position int64 `protobuf:"varint,4,opt,name=position,proto3,oneof"` // global index (inclusive)
}

func (*ResetStreamConfiguration_Head) isResetStreamConfiguration_Type() {}

func (*ResetStreamConfiguration_Tail) isResetStreamConfiguration_Type() {}

func (*ResetStreamConfiguration_Datetime) isResetStreamConfiguration_Type() {}

func (*ResetStreamConfiguration_Position) isResetStreamConfiguration_Type() {}

var File_persistent_streams_proto protoreflect.FileDescriptor

var file_persistent_streams_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x69, 0x6f, 0x2e, 0x61,
	0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x1a, 0x0b, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x14, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x96, 0x02,
	0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x60, 0x0a, 0x11,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f,
	0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x53, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x10, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78,
	0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x53, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x7a, 0x0a, 0x0f, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0xdd, 0x02, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61,
	0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x6f,
	0x70, 0x65, 0x6e, 0x12, 0x6e, 0x0a, 0x13, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f,
	0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13,
	0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x49, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69,
	0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x47,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x73, 0x2e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x78, 0x0a, 0x19, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x69, 0x6f, 0x2e,
	0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x18, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x22, 0x5f, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x61,
	0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x3e, 0x0a, 0x0c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0x32, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x88, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x07, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x69, 0x6f,
	0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x6f, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xba, 0x01, 0x0a, 0x04, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x78, 0x0a, 0x19, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78,
	0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x18, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22,
	0xfc, 0x01, 0x0a, 0x18, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x11, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x73, 0x2e, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x10, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x51,
	0x0a, 0x10, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x22, 0x4f, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x41, 0x63, 0x6b,
	0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x40, 0x0a, 0x08, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x50, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x73, 0x2e, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x18, 0x0a, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x04, 0x6f,
	0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6f, 0x2e, 0x61,
	0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6f, 0x70, 0x65,
	0x6e, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x76, 0x0a, 0x15, 0x50, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x45, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78,
	0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x57, 0x69, 0x74, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x70,
	0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x79, 0x22, 0x0d, 0x0a, 0x0b, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0xba, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a,
	0x04, 0x68, 0x65, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x74,
	0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x48, 0x00, 0x52, 0x04, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x08, 0x64, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x64,
	0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x2a, 0x2f, 0x0a,
	0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x0b, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x61, 0x6c,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x10, 0x01, 0x32, 0xb9,
	0x05, 0x0a, 0x17, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x81, 0x01, 0x0a, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x36, 0x2e, 0x69, 0x6f,
	0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e,
	0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75,
	0x0a, 0x0a, 0x4f, 0x70, 0x65, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x30, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x22,
	0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x62, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69,
	0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x62, 0x0a, 0x0c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x36, 0x2e, 0x69, 0x6f, 0x2e, 0x61,
	0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x79, 0x0a,
	0x0b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x35, 0x2e, 0x69,
	0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x69, 0x71, 0x2e,
	0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x00, 0x30, 0x01, 0x12, 0x60, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x35, 0x2e, 0x69, 0x6f, 0x2e, 0x61, 0x78, 0x6f,
	0x6e, 0x69, 0x71, 0x2e, 0x61, 0x78, 0x6f, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x30, 0x01, 0x42, 0x0f, 0x50, 0x01, 0x5a, 0x0b,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_persistent_streams_proto_rawDescOnce sync.Once
	file_persistent_streams_proto_rawDescData = file_persistent_streams_proto_rawDesc
)

func file_persistent_streams_proto_rawDescGZIP() []byte {
	file_persistent_streams_proto_rawDescOnce.Do(func() {
		file_persistent_streams_proto_rawDescData = protoimpl.X.CompressGZIP(file_persistent_streams_proto_rawDescData)
	})
	return file_persistent_streams_proto_rawDescData
}

var file_persistent_streams_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_persistent_streams_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_persistent_streams_proto_goTypes = []interface{}{
	(CreateResult)(0),                // 0: io.axoniq.axonserver.grpc.streams.CreateResult
	(*ListStreamsRequest)(nil),       // 1: io.axoniq.axonserver.grpc.streams.ListStreamsRequest
	(*StreamStatus)(nil),             // 2: io.axoniq.axonserver.grpc.streams.StreamStatus
	(*SegmentPosition)(nil),          // 3: io.axoniq.axonserver.grpc.streams.SegmentPosition
	(*StreamRequest)(nil),            // 4: io.axoniq.axonserver.grpc.streams.StreamRequest
	(*CreateStreamRequest)(nil),      // 5: io.axoniq.axonserver.grpc.streams.CreateStreamRequest
	(*CreateStreamResponse)(nil),     // 6: io.axoniq.axonserver.grpc.streams.CreateStreamResponse
	(*SegmentError)(nil),             // 7: io.axoniq.axonserver.grpc.streams.SegmentError
	(*DeleteStreamRequest)(nil),      // 8: io.axoniq.axonserver.grpc.streams.DeleteStreamRequest
	(*ResetStreamRequest)(nil),       // 9: io.axoniq.axonserver.grpc.streams.ResetStreamRequest
	(*UpdateStreamRequest)(nil),      // 10: io.axoniq.axonserver.grpc.streams.UpdateStreamRequest
	(*Open)(nil),                     // 11: io.axoniq.axonserver.grpc.streams.Open
	(*InitializationProperties)(nil), // 12: io.axoniq.axonserver.grpc.streams.InitializationProperties
	(*SequencingPolicy)(nil),         // 13: io.axoniq.axonserver.grpc.streams.SequencingPolicy
	(*ProgressAcknowledgement)(nil),  // 14: io.axoniq.axonserver.grpc.streams.ProgressAcknowledgement
	(*Requests)(nil),                 // 15: io.axoniq.axonserver.grpc.streams.Requests
	(*StreamSignal)(nil),             // 16: io.axoniq.axonserver.grpc.streams.StreamSignal
	(*PersistentStreamEvent)(nil),    // 17: io.axoniq.axonserver.grpc.streams.PersistentStreamEvent
	(*OpenSegment)(nil),              // 18: io.axoniq.axonserver.grpc.streams.OpenSegment
	(*ResetStreamConfiguration)(nil), // 19: io.axoniq.axonserver.grpc.streams.ResetStreamConfiguration
	(*EventWithToken)(nil),           // 20: io.axoniq.axonserver.grpc.event.EventWithToken
	(*empty.Empty)(nil),              // 21: google.protobuf.Empty
}
var file_persistent_streams_proto_depIdxs = []int32{
	13, // 0: io.axoniq.axonserver.grpc.streams.StreamStatus.sequencing_policy:type_name -> io.axoniq.axonserver.grpc.streams.SequencingPolicy
	3,  // 1: io.axoniq.axonserver.grpc.streams.StreamStatus.segments:type_name -> io.axoniq.axonserver.grpc.streams.SegmentPosition
	11, // 2: io.axoniq.axonserver.grpc.streams.StreamRequest.open:type_name -> io.axoniq.axonserver.grpc.streams.Open
	14, // 3: io.axoniq.axonserver.grpc.streams.StreamRequest.acknowledgeProgress:type_name -> io.axoniq.axonserver.grpc.streams.ProgressAcknowledgement
	15, // 4: io.axoniq.axonserver.grpc.streams.StreamRequest.requests:type_name -> io.axoniq.axonserver.grpc.streams.Requests
	7,  // 5: io.axoniq.axonserver.grpc.streams.StreamRequest.error:type_name -> io.axoniq.axonserver.grpc.streams.SegmentError
	12, // 6: io.axoniq.axonserver.grpc.streams.CreateStreamRequest.initialization_properties:type_name -> io.axoniq.axonserver.grpc.streams.InitializationProperties
	0,  // 7: io.axoniq.axonserver.grpc.streams.CreateStreamResponse.result:type_name -> io.axoniq.axonserver.grpc.streams.CreateResult
	19, // 8: io.axoniq.axonserver.grpc.streams.ResetStreamRequest.options:type_name -> io.axoniq.axonserver.grpc.streams.ResetStreamConfiguration
	12, // 9: io.axoniq.axonserver.grpc.streams.Open.initialization_properties:type_name -> io.axoniq.axonserver.grpc.streams.InitializationProperties
	13, // 10: io.axoniq.axonserver.grpc.streams.InitializationProperties.sequencing_policy:type_name -> io.axoniq.axonserver.grpc.streams.SequencingPolicy
	17, // 11: io.axoniq.axonserver.grpc.streams.StreamSignal.event:type_name -> io.axoniq.axonserver.grpc.streams.PersistentStreamEvent
	18, // 12: io.axoniq.axonserver.grpc.streams.StreamSignal.open:type_name -> io.axoniq.axonserver.grpc.streams.OpenSegment
	20, // 13: io.axoniq.axonserver.grpc.streams.PersistentStreamEvent.event:type_name -> io.axoniq.axonserver.grpc.event.EventWithToken
	21, // 14: io.axoniq.axonserver.grpc.streams.ResetStreamConfiguration.head:type_name -> google.protobuf.Empty
	21, // 15: io.axoniq.axonserver.grpc.streams.ResetStreamConfiguration.tail:type_name -> google.protobuf.Empty
	5,  // 16: io.axoniq.axonserver.grpc.streams.PersistentStreamService.CreateStream:input_type -> io.axoniq.axonserver.grpc.streams.CreateStreamRequest
	4,  // 17: io.axoniq.axonserver.grpc.streams.PersistentStreamService.OpenStream:input_type -> io.axoniq.axonserver.grpc.streams.StreamRequest
	8,  // 18: io.axoniq.axonserver.grpc.streams.PersistentStreamService.DeleteStream:input_type -> io.axoniq.axonserver.grpc.streams.DeleteStreamRequest
	10, // 19: io.axoniq.axonserver.grpc.streams.PersistentStreamService.UpdateStream:input_type -> io.axoniq.axonserver.grpc.streams.UpdateStreamRequest
	1,  // 20: io.axoniq.axonserver.grpc.streams.PersistentStreamService.ListStreams:input_type -> io.axoniq.axonserver.grpc.streams.ListStreamsRequest
	9,  // 21: io.axoniq.axonserver.grpc.streams.PersistentStreamService.ResetStream:input_type -> io.axoniq.axonserver.grpc.streams.ResetStreamRequest
	6,  // 22: io.axoniq.axonserver.grpc.streams.PersistentStreamService.CreateStream:output_type -> io.axoniq.axonserver.grpc.streams.CreateStreamResponse
	16, // 23: io.axoniq.axonserver.grpc.streams.PersistentStreamService.OpenStream:output_type -> io.axoniq.axonserver.grpc.streams.StreamSignal
	21, // 24: io.axoniq.axonserver.grpc.streams.PersistentStreamService.DeleteStream:output_type -> google.protobuf.Empty
	21, // 25: io.axoniq.axonserver.grpc.streams.PersistentStreamService.UpdateStream:output_type -> google.protobuf.Empty
	2,  // 26: io.axoniq.axonserver.grpc.streams.PersistentStreamService.ListStreams:output_type -> io.axoniq.axonserver.grpc.streams.StreamStatus
	21, // 27: io.axoniq.axonserver.grpc.streams.PersistentStreamService.ResetStream:output_type -> google.protobuf.Empty
	22, // [22:28] is the sub-list for method output_type
	16, // [16:22] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_persistent_streams_proto_init() }
func file_persistent_streams_proto_init() {
	if File_persistent_streams_proto != nil {
		return
	}
	file_event_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_persistent_streams_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListStreamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_streams_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_streams_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_streams_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_streams_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_streams_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_streams_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SegmentError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_streams_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_streams_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_streams_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_streams_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Open); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_streams_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializationProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_streams_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SequencingPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_streams_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProgressAcknowledgement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_streams_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Requests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_streams_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamSignal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_streams_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PersistentStreamEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_streams_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenSegment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_persistent_streams_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetStreamConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_persistent_streams_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*StreamRequest_Open)(nil),
		(*StreamRequest_AcknowledgeProgress)(nil),
		(*StreamRequest_Requests)(nil),
		(*StreamRequest_Error)(nil),
	}
	file_persistent_streams_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*StreamSignal_Event)(nil),
		(*StreamSignal_Closed)(nil),
		(*StreamSignal_Open)(nil),
	}
	file_persistent_streams_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*ResetStreamConfiguration_Head)(nil),
		(*ResetStreamConfiguration_Tail)(nil),
		(*ResetStreamConfiguration_Datetime)(nil),
		(*ResetStreamConfiguration_Position)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_persistent_streams_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_persistent_streams_proto_goTypes,
		DependencyIndexes: file_persistent_streams_proto_depIdxs,
		EnumInfos:         file_persistent_streams_proto_enumTypes,
		MessageInfos:      file_persistent_streams_proto_msgTypes,
	}.Build()
	File_persistent_streams_proto = out.File
	file_persistent_streams_proto_rawDesc = nil
	file_persistent_streams_proto_goTypes = nil
	file_persistent_streams_proto_depIdxs = nil
}
